
DSP NUCLEO G431TBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9cc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  0800cbb0  0800cbb0  0000dbb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0c8  0800d0c8  0000f228  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d0c8  0800d0c8  0000e0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0d0  0800d0d0  0000f228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0d0  0800d0d0  0000e0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d0d4  0800d0d4  0000e0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000228  20000000  0800d0d8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000516c  20000228  0800d300  0000f228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005394  0800d300  0000f394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf5c  00000000  00000000  0000f258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000382a  00000000  00000000  0002c1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  0002f9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001208  00000000  00000000  00031148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023804  00000000  00000000  00032350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d2a5  00000000  00000000  00055b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2ba9  00000000  00000000  00072df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001559a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000775c  00000000  00000000  001559e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0015d144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000228 	.word	0x20000228
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cb94 	.word	0x0800cb94

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000022c 	.word	0x2000022c
 800021c:	0800cb94 	.word	0x0800cb94

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b9be 	b.w	8000ff0 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f83c 	bl	8000cf8 <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_d2lz>:
 8000c8c:	b538      	push	{r3, r4, r5, lr}
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2300      	movs	r3, #0
 8000c92:	4604      	mov	r4, r0
 8000c94:	460d      	mov	r5, r1
 8000c96:	f7ff ff49 	bl	8000b2c <__aeabi_dcmplt>
 8000c9a:	b928      	cbnz	r0, 8000ca8 <__aeabi_d2lz+0x1c>
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	4629      	mov	r1, r5
 8000ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca4:	f000 b80a 	b.w	8000cbc <__aeabi_d2ulz>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cae:	f000 f805 	bl	8000cbc <__aeabi_d2ulz>
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	bd38      	pop	{r3, r4, r5, pc}
 8000cba:	bf00      	nop

08000cbc <__aeabi_d2ulz>:
 8000cbc:	b5d0      	push	{r4, r6, r7, lr}
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <__aeabi_d2ulz+0x34>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	460f      	mov	r7, r1
 8000cc6:	f7ff fcbf 	bl	8000648 <__aeabi_dmul>
 8000cca:	f7ff ff57 	bl	8000b7c <__aeabi_d2uiz>
 8000cce:	4604      	mov	r4, r0
 8000cd0:	f7ff fc40 	bl	8000554 <__aeabi_ui2d>
 8000cd4:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <__aeabi_d2ulz+0x38>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f7ff fcb6 	bl	8000648 <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	f7ff faf8 	bl	80002d8 <__aeabi_dsub>
 8000ce8:	f7ff ff48 	bl	8000b7c <__aeabi_d2uiz>
 8000cec:	4621      	mov	r1, r4
 8000cee:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf0:	3df00000 	.word	0x3df00000
 8000cf4:	41f00000 	.word	0x41f00000

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	468e      	mov	lr, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	4688      	mov	r8, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d962      	bls.n	8000dd4 <__udivmoddi4+0xdc>
 8000d0e:	fab2 f682 	clz	r6, r2
 8000d12:	b14e      	cbz	r6, 8000d28 <__udivmoddi4+0x30>
 8000d14:	f1c6 0320 	rsb	r3, r6, #32
 8000d18:	fa01 f806 	lsl.w	r8, r1, r6
 8000d1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d20:	40b7      	lsls	r7, r6
 8000d22:	ea43 0808 	orr.w	r8, r3, r8
 8000d26:	40b4      	lsls	r4, r6
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d34:	0c23      	lsrs	r3, r4, #16
 8000d36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d4c:	f080 80ea 	bcs.w	8000f24 <__udivmoddi4+0x22c>
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f240 80e7 	bls.w	8000f24 <__udivmoddi4+0x22c>
 8000d56:	3902      	subs	r1, #2
 8000d58:	443b      	add	r3, r7
 8000d5a:	1a9a      	subs	r2, r3, r2
 8000d5c:	b2a3      	uxth	r3, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6e:	459c      	cmp	ip, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x8e>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	f080 80d6 	bcs.w	8000f28 <__udivmoddi4+0x230>
 8000d7c:	459c      	cmp	ip, r3
 8000d7e:	f240 80d3 	bls.w	8000f28 <__udivmoddi4+0x230>
 8000d82:	443b      	add	r3, r7
 8000d84:	3802      	subs	r0, #2
 8000d86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8a:	eba3 030c 	sub.w	r3, r3, ip
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11d      	cbz	r5, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40f3      	lsrs	r3, r6
 8000d94:	2200      	movs	r2, #0
 8000d96:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d905      	bls.n	8000dae <__udivmoddi4+0xb6>
 8000da2:	b10d      	cbz	r5, 8000da8 <__udivmoddi4+0xb0>
 8000da4:	e9c5 0100 	strd	r0, r1, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4608      	mov	r0, r1
 8000dac:	e7f5      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dae:	fab3 f183 	clz	r1, r3
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d146      	bne.n	8000e44 <__udivmoddi4+0x14c>
 8000db6:	4573      	cmp	r3, lr
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xc8>
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f200 8105 	bhi.w	8000fca <__udivmoddi4+0x2d2>
 8000dc0:	1a84      	subs	r4, r0, r2
 8000dc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	4690      	mov	r8, r2
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d0e5      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dce:	e9c5 4800 	strd	r4, r8, [r5]
 8000dd2:	e7e2      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f000 8090 	beq.w	8000efa <__udivmoddi4+0x202>
 8000dda:	fab2 f682 	clz	r6, r2
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f040 80a4 	bne.w	8000f2c <__udivmoddi4+0x234>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	b280      	uxth	r0, r0
 8000dee:	b2bc      	uxth	r4, r7
 8000df0:	2101      	movs	r1, #1
 8000df2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000df6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x11e>
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x11c>
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	f200 80e0 	bhi.w	8000fd4 <__udivmoddi4+0x2dc>
 8000e14:	46c4      	mov	ip, r8
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e24:	fb02 f404 	mul.w	r4, r2, r4
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x144>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x142>
 8000e34:	429c      	cmp	r4, r3
 8000e36:	f200 80ca 	bhi.w	8000fce <__udivmoddi4+0x2d6>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e42:	e7a5      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e44:	f1c1 0620 	rsb	r6, r1, #32
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4e:	431f      	orrs	r7, r3
 8000e50:	fa0e f401 	lsl.w	r4, lr, r1
 8000e54:	fa20 f306 	lsr.w	r3, r0, r6
 8000e58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e60:	4323      	orrs	r3, r4
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	fa1f fc87 	uxth.w	ip, r7
 8000e6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e82:	d909      	bls.n	8000e98 <__udivmoddi4+0x1a0>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e8a:	f080 809c 	bcs.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	f240 8099 	bls.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	eba4 040e 	sub.w	r4, r4, lr
 8000e9c:	fa1f fe83 	uxth.w	lr, r3
 8000ea0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb0:	45a4      	cmp	ip, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1ce>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eba:	f080 8082 	bcs.w	8000fc2 <__udivmoddi4+0x2ca>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d97f      	bls.n	8000fc2 <__udivmoddi4+0x2ca>
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	443c      	add	r4, r7
 8000ec6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eca:	eba4 040c 	sub.w	r4, r4, ip
 8000ece:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ed2:	4564      	cmp	r4, ip
 8000ed4:	4673      	mov	r3, lr
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	d362      	bcc.n	8000fa0 <__udivmoddi4+0x2a8>
 8000eda:	d05f      	beq.n	8000f9c <__udivmoddi4+0x2a4>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x1fe>
 8000ede:	ebb8 0203 	subs.w	r2, r8, r3
 8000ee2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ee6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eea:	fa22 f301 	lsr.w	r3, r2, r1
 8000eee:	431e      	orrs	r6, r3
 8000ef0:	40cc      	lsrs	r4, r1
 8000ef2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	e74f      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000efa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000efe:	0c01      	lsrs	r1, r0, #16
 8000f00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f04:	b280      	uxth	r0, r0
 8000f06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	463c      	mov	r4, r7
 8000f10:	46b8      	mov	r8, r7
 8000f12:	46be      	mov	lr, r7
 8000f14:	2620      	movs	r6, #32
 8000f16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f1a:	eba2 0208 	sub.w	r2, r2, r8
 8000f1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f22:	e766      	b.n	8000df2 <__udivmoddi4+0xfa>
 8000f24:	4601      	mov	r1, r0
 8000f26:	e718      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f28:	4610      	mov	r0, r2
 8000f2a:	e72c      	b.n	8000d86 <__udivmoddi4+0x8e>
 8000f2c:	f1c6 0220 	rsb	r2, r6, #32
 8000f30:	fa2e f302 	lsr.w	r3, lr, r2
 8000f34:	40b7      	lsls	r7, r6
 8000f36:	40b1      	lsls	r1, r6
 8000f38:	fa20 f202 	lsr.w	r2, r0, r2
 8000f3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f40:	430a      	orrs	r2, r1
 8000f42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f46:	b2bc      	uxth	r4, r7
 8000f48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb08 f904 	mul.w	r9, r8, r4
 8000f56:	40b0      	lsls	r0, r6
 8000f58:	4589      	cmp	r9, r1
 8000f5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f5e:	b280      	uxth	r0, r0
 8000f60:	d93e      	bls.n	8000fe0 <__udivmoddi4+0x2e8>
 8000f62:	1879      	adds	r1, r7, r1
 8000f64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f68:	d201      	bcs.n	8000f6e <__udivmoddi4+0x276>
 8000f6a:	4589      	cmp	r9, r1
 8000f6c:	d81f      	bhi.n	8000fae <__udivmoddi4+0x2b6>
 8000f6e:	eba1 0109 	sub.w	r1, r1, r9
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f84:	4542      	cmp	r2, r8
 8000f86:	d229      	bcs.n	8000fdc <__udivmoddi4+0x2e4>
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f8e:	d2c4      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f90:	4542      	cmp	r2, r8
 8000f92:	d2c2      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f94:	f1a9 0102 	sub.w	r1, r9, #2
 8000f98:	443a      	add	r2, r7
 8000f9a:	e7be      	b.n	8000f1a <__udivmoddi4+0x222>
 8000f9c:	45f0      	cmp	r8, lr
 8000f9e:	d29d      	bcs.n	8000edc <__udivmoddi4+0x1e4>
 8000fa0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fa4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fa8:	3801      	subs	r0, #1
 8000faa:	46e1      	mov	r9, ip
 8000fac:	e796      	b.n	8000edc <__udivmoddi4+0x1e4>
 8000fae:	eba7 0909 	sub.w	r9, r7, r9
 8000fb2:	4449      	add	r1, r9
 8000fb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fbc:	fb09 f804 	mul.w	r8, r9, r4
 8000fc0:	e7db      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fc2:	4673      	mov	r3, lr
 8000fc4:	e77f      	b.n	8000ec6 <__udivmoddi4+0x1ce>
 8000fc6:	4650      	mov	r0, sl
 8000fc8:	e766      	b.n	8000e98 <__udivmoddi4+0x1a0>
 8000fca:	4608      	mov	r0, r1
 8000fcc:	e6fd      	b.n	8000dca <__udivmoddi4+0xd2>
 8000fce:	443b      	add	r3, r7
 8000fd0:	3a02      	subs	r2, #2
 8000fd2:	e733      	b.n	8000e3c <__udivmoddi4+0x144>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	443b      	add	r3, r7
 8000fda:	e71c      	b.n	8000e16 <__udivmoddi4+0x11e>
 8000fdc:	4649      	mov	r1, r9
 8000fde:	e79c      	b.n	8000f1a <__udivmoddi4+0x222>
 8000fe0:	eba1 0109 	sub.w	r1, r1, r9
 8000fe4:	46c4      	mov	ip, r8
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	e7c4      	b.n	8000f7a <__udivmoddi4+0x282>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <Process_Guitar_Signal>:
extern uint16_t dac_buffer[];
extern volatile uint8_t process_audio_flag;
extern volatile uint16_t buffer_index;

void Process_Guitar_Signal(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
  uint16_t i;
  float32_t normalized_input;
  float32_t processed_signal;
  
  for (i = 0; i < BUFFER_SIZE; i++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	81fb      	strh	r3, [r7, #14]
 8000ffe:	e04d      	b.n	800109c <Process_Guitar_Signal+0xa8>
  {
    normalized_input = ((float32_t)adc_buffer[i] / (ADC_MAX_VALUE / 2.0f)) - 1.0f;
 8001000:	89fb      	ldrh	r3, [r7, #14]
 8001002:	4a2a      	ldr	r2, [pc, #168]	@ (80010ac <Process_Guitar_Signal+0xb8>)
 8001004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001008:	ee07 3a90 	vmov	s15, r3
 800100c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001010:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80010b0 <Process_Guitar_Signal+0xbc>
 8001014:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001018:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800101c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001020:	edc7 7a01 	vstr	s15, [r7, #4]
    processed_signal = Apply_Distortion(normalized_input);
 8001024:	ed97 0a01 	vldr	s0, [r7, #4]
 8001028:	f000 f8ee 	bl	8001208 <Apply_Distortion>
 800102c:	ed87 0a02 	vstr	s0, [r7, #8]
    processed_signal *= output_volume;
 8001030:	4b20      	ldr	r3, [pc, #128]	@ (80010b4 <Process_Guitar_Signal+0xc0>)
 8001032:	edd3 7a00 	vldr	s15, [r3]
 8001036:	ed97 7a02 	vldr	s14, [r7, #8]
 800103a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103e:	edc7 7a02 	vstr	s15, [r7, #8]
    if (processed_signal > 1.0f) processed_signal = 1.0f;
 8001042:	edd7 7a02 	vldr	s15, [r7, #8]
 8001046:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800104a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001052:	dd02      	ble.n	800105a <Process_Guitar_Signal+0x66>
 8001054:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001058:	60bb      	str	r3, [r7, #8]
    if (processed_signal < -1.0f) processed_signal = -1.0f;
 800105a:	edd7 7a02 	vldr	s15, [r7, #8]
 800105e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001062:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106a:	d501      	bpl.n	8001070 <Process_Guitar_Signal+0x7c>
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <Process_Guitar_Signal+0xc4>)
 800106e:	60bb      	str	r3, [r7, #8]
    dac_buffer[i] = (uint16_t)((processed_signal + 1.0f) * (DAC_MAX_VALUE / 2.0f));
 8001070:	edd7 7a02 	vldr	s15, [r7, #8]
 8001074:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001078:	ee77 7a87 	vadd.f32	s15, s15, s14
 800107c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80010b0 <Process_Guitar_Signal+0xbc>
 8001080:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001084:	89fb      	ldrh	r3, [r7, #14]
 8001086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800108a:	ee17 2a90 	vmov	r2, s15
 800108e:	b291      	uxth	r1, r2
 8001090:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <Process_Guitar_Signal+0xc8>)
 8001092:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (i = 0; i < BUFFER_SIZE; i++)
 8001096:	89fb      	ldrh	r3, [r7, #14]
 8001098:	3301      	adds	r3, #1
 800109a:	81fb      	strh	r3, [r7, #14]
 800109c:	89fb      	ldrh	r3, [r7, #14]
 800109e:	2b7f      	cmp	r3, #127	@ 0x7f
 80010a0:	d9ae      	bls.n	8001000 <Process_Guitar_Signal+0xc>
  }
}
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000244 	.word	0x20000244
 80010b0:	44fff000 	.word	0x44fff000
 80010b4:	20000050 	.word	0x20000050
 80010b8:	bf800000 	.word	0xbf800000
 80010bc:	20000344 	.word	0x20000344

080010c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a46      	ldr	r2, [pc, #280]	@ (80011e8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	f040 8086 	bne.w	80011e0 <HAL_TIM_PeriodElapsedCallback+0x120>
  {
    HAL_ADC_Start(&hadc1);
 80010d4:	4845      	ldr	r0, [pc, #276]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80010d6:	f002 fd57 	bl	8003b88 <HAL_ADC_Start>

    if (HAL_ADC_PollForConversion(&hadc1, 1) == HAL_OK)
 80010da:	2101      	movs	r1, #1
 80010dc:	4843      	ldr	r0, [pc, #268]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80010de:	f002 fe43 	bl	8003d68 <HAL_ADC_PollForConversion>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d178      	bne.n	80011da <HAL_TIM_PeriodElapsedCallback+0x11a>
    {
      uint16_t adc_value = HAL_ADC_GetValue(&hadc1);
 80010e8:	4840      	ldr	r0, [pc, #256]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80010ea:	f002 ff15 	bl	8003f18 <HAL_ADC_GetValue>
 80010ee:	4603      	mov	r3, r0
 80010f0:	823b      	strh	r3, [r7, #16]

      float32_t normalized_input = ((float32_t)adc_value - 2048.0f) / 2048.0f;
 80010f2:	8a3b      	ldrh	r3, [r7, #16]
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010fc:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80011f0 <HAL_TIM_PeriodElapsedCallback+0x130>
 8001100:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001104:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 80011f0 <HAL_TIM_PeriodElapsedCallback+0x130>
 8001108:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800110c:	edc7 7a03 	vstr	s15, [r7, #12]
      float32_t processed_signal = Apply_NoiseGate(normalized_input);
 8001110:	ed97 0a03 	vldr	s0, [r7, #12]
 8001114:	f000 fb88 	bl	8001828 <Apply_NoiseGate>
 8001118:	ed87 0a05 	vstr	s0, [r7, #20]
      processed_signal = Apply_Overdrive(processed_signal);
 800111c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001120:	f000 f8e0 	bl	80012e4 <Apply_Overdrive>
 8001124:	ed87 0a05 	vstr	s0, [r7, #20]
      processed_signal = Apply_Delay(processed_signal);
 8001128:	ed97 0a05 	vldr	s0, [r7, #20]
 800112c:	f000 fa9a 	bl	8001664 <Apply_Delay>
 8001130:	ed87 0a05 	vstr	s0, [r7, #20]
      processed_signal *= output_volume;
 8001134:	4b2f      	ldr	r3, [pc, #188]	@ (80011f4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	ed97 7a05 	vldr	s14, [r7, #20]
 800113e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001142:	edc7 7a05 	vstr	s15, [r7, #20]
      if (processed_signal > 1.0f) processed_signal = 1.0f;
 8001146:	edd7 7a05 	vldr	s15, [r7, #20]
 800114a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800114e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001156:	dd02      	ble.n	800115e <HAL_TIM_PeriodElapsedCallback+0x9e>
 8001158:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800115c:	617b      	str	r3, [r7, #20]
      if (processed_signal < -1.0f) processed_signal = -1.0f;
 800115e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001162:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116e:	d501      	bpl.n	8001174 <HAL_TIM_PeriodElapsedCallback+0xb4>
 8001170:	4b21      	ldr	r3, [pc, #132]	@ (80011f8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001172:	617b      	str	r3, [r7, #20]

      uint16_t dac_value = (uint16_t)((processed_signal * 2048.0f) + 2048.0f);
 8001174:	edd7 7a05 	vldr	s15, [r7, #20]
 8001178:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80011f0 <HAL_TIM_PeriodElapsedCallback+0x130>
 800117c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001180:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80011f0 <HAL_TIM_PeriodElapsedCallback+0x130>
 8001184:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800118c:	ee17 3a90 	vmov	r3, s15
 8001190:	827b      	strh	r3, [r7, #18]
      if (dac_value > 4095) dac_value = 4095;
 8001192:	8a7b      	ldrh	r3, [r7, #18]
 8001194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001198:	d302      	bcc.n	80011a0 <HAL_TIM_PeriodElapsedCallback+0xe0>
 800119a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800119e:	827b      	strh	r3, [r7, #18]
      if (dac_value < 0) dac_value = 0;

      HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 80011a0:	8a7b      	ldrh	r3, [r7, #18]
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	4815      	ldr	r0, [pc, #84]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80011a8:	f003 febe 	bl	8004f28 <HAL_DAC_SetValue>

      adc_buffer[buffer_index] = adc_value;
 80011ac:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4619      	mov	r1, r3
 80011b4:	4a13      	ldr	r2, [pc, #76]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80011b6:	8a3b      	ldrh	r3, [r7, #16]
 80011b8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
      buffer_index++;
 80011bc:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	3301      	adds	r3, #1
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80011c8:	801a      	strh	r2, [r3, #0]
      if (buffer_index >= BUFFER_SIZE)
 80011ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001200 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80011d2:	d902      	bls.n	80011da <HAL_TIM_PeriodElapsedCallback+0x11a>
      {
        buffer_index = 0;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	801a      	strh	r2, [r3, #0]
      }
    }

    HAL_ADC_Stop(&hadc1);
 80011da:	4804      	ldr	r0, [pc, #16]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80011dc:	f002 fd90 	bl	8003d00 <HAL_ADC_Stop>
  }
}
 80011e0:	bf00      	nop
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40012c00 	.word	0x40012c00
 80011ec:	20005010 	.word	0x20005010
 80011f0:	45000000 	.word	0x45000000
 80011f4:	20000050 	.word	0x20000050
 80011f8:	bf800000 	.word	0xbf800000
 80011fc:	2000507c 	.word	0x2000507c
 8001200:	20000446 	.word	0x20000446
 8001204:	20000244 	.word	0x20000244

08001208 <Apply_Distortion>:
float32_t distortion_gain = 3.0f;
float32_t distortion_threshold = 0.7f;
float32_t output_volume = 0.8f;

float32_t Apply_Distortion(float32_t input)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t output;
  output = input * distortion_gain;
 8001212:	4b32      	ldr	r3, [pc, #200]	@ (80012dc <Apply_Distortion+0xd4>)
 8001214:	edd3 7a00 	vldr	s15, [r3]
 8001218:	ed97 7a01 	vldr	s14, [r7, #4]
 800121c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001220:	edc7 7a03 	vstr	s15, [r7, #12]
  if (output > distortion_threshold)
 8001224:	4b2e      	ldr	r3, [pc, #184]	@ (80012e0 <Apply_Distortion+0xd8>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ed97 7a03 	vldr	s14, [r7, #12]
 800122e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001236:	dd1d      	ble.n	8001274 <Apply_Distortion+0x6c>
  {
    output = distortion_threshold + (output - distortion_threshold) / (1.0f + fabsf(output - distortion_threshold));
 8001238:	4b29      	ldr	r3, [pc, #164]	@ (80012e0 <Apply_Distortion+0xd8>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001242:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001246:	4b26      	ldr	r3, [pc, #152]	@ (80012e0 <Apply_Distortion+0xd8>)
 8001248:	edd3 7a00 	vldr	s15, [r3]
 800124c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001254:	eef0 7ae7 	vabs.f32	s15, s15
 8001258:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800125c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001264:	4b1e      	ldr	r3, [pc, #120]	@ (80012e0 <Apply_Distortion+0xd8>)
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126e:	edc7 7a03 	vstr	s15, [r7, #12]
 8001272:	e028      	b.n	80012c6 <Apply_Distortion+0xbe>
  }
  else if (output < -distortion_threshold)
 8001274:	4b1a      	ldr	r3, [pc, #104]	@ (80012e0 <Apply_Distortion+0xd8>)
 8001276:	edd3 7a00 	vldr	s15, [r3]
 800127a:	eef1 7a67 	vneg.f32	s15, s15
 800127e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128a:	d51c      	bpl.n	80012c6 <Apply_Distortion+0xbe>
  {
    output = -distortion_threshold + (output + distortion_threshold) / (1.0f + fabsf(output + distortion_threshold));
 800128c:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <Apply_Distortion+0xd8>)
 800128e:	ed93 7a00 	vldr	s14, [r3]
 8001292:	edd7 7a03 	vldr	s15, [r7, #12]
 8001296:	ee77 6a27 	vadd.f32	s13, s14, s15
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <Apply_Distortion+0xd8>)
 800129c:	ed93 7a00 	vldr	s14, [r3]
 80012a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a8:	eef0 7ae7 	vabs.f32	s15, s15
 80012ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012b8:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <Apply_Distortion+0xd8>)
 80012ba:	edd3 7a00 	vldr	s15, [r3]
 80012be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c2:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  return output;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	ee07 3a90 	vmov	s15, r3
}
 80012cc:	eeb0 0a67 	vmov.f32	s0, s15
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000048 	.word	0x20000048
 80012e0:	2000004c 	.word	0x2000004c

080012e4 <Apply_Overdrive>:

float32_t Apply_Overdrive(float32_t input)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b08f      	sub	sp, #60	@ 0x3c
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	ed87 0a01 	vstr	s0, [r7, #4]
  if (!overdrive.enabled) return input;
 80012ee:	4bb6      	ldr	r3, [pc, #728]	@ (80015c8 <Apply_Overdrive+0x2e4>)
 80012f0:	7c5b      	ldrb	r3, [r3, #17]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <Apply_Overdrive+0x16>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	e1a9      	b.n	800164e <Apply_Overdrive+0x36a>

  float32_t hp_alpha = 0.99f;
 80012fa:	4bb4      	ldr	r3, [pc, #720]	@ (80015cc <Apply_Overdrive+0x2e8>)
 80012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float32_t hp_output = input - overdrive.hp_state;
 80012fe:	4bb2      	ldr	r3, [pc, #712]	@ (80015c8 <Apply_Overdrive+0x2e4>)
 8001300:	edd3 7a05 	vldr	s15, [r3, #20]
 8001304:	ed97 7a01 	vldr	s14, [r7, #4]
 8001308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800130c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  overdrive.hp_state = input - hp_alpha * hp_output;
 8001310:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001314:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001324:	4ba8      	ldr	r3, [pc, #672]	@ (80015c8 <Apply_Overdrive+0x2e4>)
 8001326:	edc3 7a05 	vstr	s15, [r3, #20]

  float32_t gained = hp_output * overdrive.gain;
 800132a:	4ba7      	ldr	r3, [pc, #668]	@ (80015c8 <Apply_Overdrive+0x2e4>)
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001338:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  float32_t clipped;

  if (overdrive.mode == 0)
 800133c:	4ba2      	ldr	r3, [pc, #648]	@ (80015c8 <Apply_Overdrive+0x2e4>)
 800133e:	7c1b      	ldrb	r3, [r3, #16]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d13d      	bne.n	80013c0 <Apply_Overdrive+0xdc>
  {
    float32_t abs_gained = fabsf(gained);
 8001344:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001348:	eef0 7ae7 	vabs.f32	s15, s15
 800134c:	edc7 7a04 	vstr	s15, [r7, #16]
    if (abs_gained < 0.001f)
 8001350:	edd7 7a04 	vldr	s15, [r7, #16]
 8001354:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 80015d0 <Apply_Overdrive+0x2ec>
 8001358:	eef4 7ac7 	vcmpe.f32	s15, s14
 800135c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001360:	d502      	bpl.n	8001368 <Apply_Overdrive+0x84>
    {
      clipped = gained;
 8001362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001364:	637b      	str	r3, [r7, #52]	@ 0x34
 8001366:	e0db      	b.n	8001520 <Apply_Overdrive+0x23c>
    }
    else
    {
      if (gained > 3.0f)
 8001368:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800136c:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001378:	dd03      	ble.n	8001382 <Apply_Overdrive+0x9e>
        clipped = 1.0f;
 800137a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800137e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001380:	e0ce      	b.n	8001520 <Apply_Overdrive+0x23c>
      else if (gained < -3.0f)
 8001382:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001386:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 800138a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800138e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001392:	d502      	bpl.n	800139a <Apply_Overdrive+0xb6>
        clipped = -1.0f;
 8001394:	4b8f      	ldr	r3, [pc, #572]	@ (80015d4 <Apply_Overdrive+0x2f0>)
 8001396:	637b      	str	r3, [r7, #52]	@ 0x34
 8001398:	e0c2      	b.n	8001520 <Apply_Overdrive+0x23c>
      else
        clipped = gained / (1.0f + fabsf(gained) * 0.3f);
 800139a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800139e:	eef0 7ae7 	vabs.f32	s15, s15
 80013a2:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 80015d8 <Apply_Overdrive+0x2f4>
 80013a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013b2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80013b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ba:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 80013be:	e0af      	b.n	8001520 <Apply_Overdrive+0x23c>
    }
  }
  else if (overdrive.mode == 1)
 80013c0:	4b81      	ldr	r3, [pc, #516]	@ (80015c8 <Apply_Overdrive+0x2e4>)
 80013c2:	7c1b      	ldrb	r3, [r3, #16]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d155      	bne.n	8001474 <Apply_Overdrive+0x190>
  {
    float32_t abs_gained = fabsf(gained);
 80013c8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013cc:	eef0 7ae7 	vabs.f32	s15, s15
 80013d0:	edc7 7a08 	vstr	s15, [r7, #32]
    float32_t sign = (gained >= 0.0f) ? 1.0f : -1.0f;
 80013d4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e0:	db02      	blt.n	80013e8 <Apply_Overdrive+0x104>
 80013e2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80013e6:	e000      	b.n	80013ea <Apply_Overdrive+0x106>
 80013e8:	4b7a      	ldr	r3, [pc, #488]	@ (80015d4 <Apply_Overdrive+0x2f0>)
 80013ea:	61fb      	str	r3, [r7, #28]
    float32_t th = overdrive.threshold;
 80013ec:	4b76      	ldr	r3, [pc, #472]	@ (80015c8 <Apply_Overdrive+0x2e4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	61bb      	str	r3, [r7, #24]
    
    if (abs_gained < th)
 80013f2:	ed97 7a08 	vldr	s14, [r7, #32]
 80013f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80013fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001402:	d506      	bpl.n	8001412 <Apply_Overdrive+0x12e>
      clipped = 2.0f * gained;
 8001404:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001408:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800140c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8001410:	e086      	b.n	8001520 <Apply_Overdrive+0x23c>
    else if (abs_gained < 2.0f * th)
 8001412:	edd7 7a06 	vldr	s15, [r7, #24]
 8001416:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800141a:	ed97 7a08 	vldr	s14, [r7, #32]
 800141e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001426:	d522      	bpl.n	800146e <Apply_Overdrive+0x18a>
    {
      float32_t x = (2.0f - 3.0f * abs_gained / th);
 8001428:	edd7 7a08 	vldr	s15, [r7, #32]
 800142c:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001430:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001434:	ed97 7a06 	vldr	s14, [r7, #24]
 8001438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001444:	edc7 7a05 	vstr	s15, [r7, #20]
      clipped = sign * (3.0f - x * x) / 3.0f;
 8001448:	edd7 7a05 	vldr	s15, [r7, #20]
 800144c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001450:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001454:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001458:	edd7 7a07 	vldr	s15, [r7, #28]
 800145c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001460:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001464:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001468:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 800146c:	e058      	b.n	8001520 <Apply_Overdrive+0x23c>
    }
    else
      clipped = sign;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	637b      	str	r3, [r7, #52]	@ 0x34
 8001472:	e055      	b.n	8001520 <Apply_Overdrive+0x23c>
  }
  else
  {
    if (gained > 0.0f)
 8001474:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001478:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800147c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001480:	dd1f      	ble.n	80014c2 <Apply_Overdrive+0x1de>
    {
      if (gained > overdrive.threshold)
 8001482:	4b51      	ldr	r3, [pc, #324]	@ (80015c8 <Apply_Overdrive+0x2e4>)
 8001484:	edd3 7a01 	vldr	s15, [r3, #4]
 8001488:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800148c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001494:	dd12      	ble.n	80014bc <Apply_Overdrive+0x1d8>
        clipped = overdrive.threshold + (gained - overdrive.threshold) * 0.1f;
 8001496:	4b4c      	ldr	r3, [pc, #304]	@ (80015c8 <Apply_Overdrive+0x2e4>)
 8001498:	ed93 7a01 	vldr	s14, [r3, #4]
 800149c:	4b4a      	ldr	r3, [pc, #296]	@ (80015c8 <Apply_Overdrive+0x2e4>)
 800149e:	edd3 7a01 	vldr	s15, [r3, #4]
 80014a2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80014a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014aa:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80015e4 <Apply_Overdrive+0x300>
 80014ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 80014ba:	e031      	b.n	8001520 <Apply_Overdrive+0x23c>
      else
        clipped = gained;
 80014bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014be:	637b      	str	r3, [r7, #52]	@ 0x34
 80014c0:	e02e      	b.n	8001520 <Apply_Overdrive+0x23c>
    }
    else
    {
      if (gained < -overdrive.threshold * 1.5f)
 80014c2:	4b41      	ldr	r3, [pc, #260]	@ (80015c8 <Apply_Overdrive+0x2e4>)
 80014c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014c8:	eef1 7a67 	vneg.f32	s15, s15
 80014cc:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80014d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e0:	d51c      	bpl.n	800151c <Apply_Overdrive+0x238>
        clipped = -overdrive.threshold * 1.5f + (gained + overdrive.threshold * 1.5f) * 0.3f;
 80014e2:	4b39      	ldr	r3, [pc, #228]	@ (80015c8 <Apply_Overdrive+0x2e4>)
 80014e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014e8:	eef1 7a67 	vneg.f32	s15, s15
 80014ec:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80014f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014f4:	4b34      	ldr	r3, [pc, #208]	@ (80015c8 <Apply_Overdrive+0x2e4>)
 80014f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80014fa:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 80014fe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001502:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800150a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80015d8 <Apply_Overdrive+0x2f4>
 800150e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001516:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 800151a:	e001      	b.n	8001520 <Apply_Overdrive+0x23c>
      else
        clipped = gained;
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	637b      	str	r3, [r7, #52]	@ 0x34
    }
  }

  float32_t lp_alpha = 0.3f + overdrive.tone * 0.6f;
 8001520:	4b29      	ldr	r3, [pc, #164]	@ (80015c8 <Apply_Overdrive+0x2e4>)
 8001522:	edd3 7a02 	vldr	s15, [r3, #8]
 8001526:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80015dc <Apply_Overdrive+0x2f8>
 800152a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800152e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80015d8 <Apply_Overdrive+0x2f4>
 8001532:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001536:	edc7 7a03 	vstr	s15, [r7, #12]
  overdrive.lp_state = lp_alpha * clipped + (1.0f - lp_alpha) * overdrive.lp_state;
 800153a:	ed97 7a03 	vldr	s14, [r7, #12]
 800153e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001546:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800154a:	edd7 7a03 	vldr	s15, [r7, #12]
 800154e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001552:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <Apply_Overdrive+0x2e4>)
 8001554:	edd3 7a06 	vldr	s15, [r3, #24]
 8001558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800155c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001560:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <Apply_Overdrive+0x2e4>)
 8001562:	edc3 7a06 	vstr	s15, [r3, #24]

  float32_t output = overdrive.mix * overdrive.lp_state + (1.0f - overdrive.mix) * input;
 8001566:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <Apply_Overdrive+0x2e4>)
 8001568:	ed93 7a03 	vldr	s14, [r3, #12]
 800156c:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <Apply_Overdrive+0x2e4>)
 800156e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001572:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001576:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <Apply_Overdrive+0x2e4>)
 8001578:	edd3 7a03 	vldr	s15, [r3, #12]
 800157c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001580:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001584:	edd7 7a01 	vldr	s15, [r7, #4]
 8001588:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001590:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

  if (output > 0.95f)
 8001594:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001598:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80015e8 <Apply_Overdrive+0x304>
 800159c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a4:	dd22      	ble.n	80015ec <Apply_Overdrive+0x308>
    output = 0.95f + (output - 0.95f) * 0.1f;
 80015a6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80015aa:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80015e8 <Apply_Overdrive+0x304>
 80015ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015b2:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80015e4 <Apply_Overdrive+0x300>
 80015b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ba:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80015e8 <Apply_Overdrive+0x304>
 80015be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015c2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 80015c6:	e02a      	b.n	800161e <Apply_Overdrive+0x33a>
 80015c8:	20000000 	.word	0x20000000
 80015cc:	3f7d70a4 	.word	0x3f7d70a4
 80015d0:	3a83126f 	.word	0x3a83126f
 80015d4:	bf800000 	.word	0xbf800000
 80015d8:	3e99999a 	.word	0x3e99999a
 80015dc:	3f19999a 	.word	0x3f19999a
 80015e0:	bf733333 	.word	0xbf733333
 80015e4:	3dcccccd 	.word	0x3dcccccd
 80015e8:	3f733333 	.word	0x3f733333
  else if (output < -0.95f)
 80015ec:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80015f0:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 80015e0 <Apply_Overdrive+0x2fc>
 80015f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fc:	d50f      	bpl.n	800161e <Apply_Overdrive+0x33a>
    output = -0.95f + (output + 0.95f) * 0.1f;
 80015fe:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001602:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80015e8 <Apply_Overdrive+0x304>
 8001606:	ee77 7a87 	vadd.f32	s15, s15, s14
 800160a:	ed1f 7a0a 	vldr	s14, [pc, #-40]	@ 80015e4 <Apply_Overdrive+0x300>
 800160e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001612:	ed1f 7a0b 	vldr	s14, [pc, #-44]	@ 80015e8 <Apply_Overdrive+0x304>
 8001616:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800161a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

  if (output > 1.0f) output = 1.0f;
 800161e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001622:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800162a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162e:	dd02      	ble.n	8001636 <Apply_Overdrive+0x352>
 8001630:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001634:	633b      	str	r3, [r7, #48]	@ 0x30
  if (output < -1.0f) output = -1.0f;
 8001636:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800163a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800163e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001646:	d501      	bpl.n	800164c <Apply_Overdrive+0x368>
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <Apply_Overdrive+0x37c>)
 800164a:	633b      	str	r3, [r7, #48]	@ 0x30

  return output;
 800164c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	373c      	adds	r7, #60	@ 0x3c
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	bf800000 	.word	0xbf800000

08001664 <Apply_Delay>:

float32_t Apply_Delay(float32_t input)
{
 8001664:	b480      	push	{r7}
 8001666:	b08b      	sub	sp, #44	@ 0x2c
 8001668:	af00      	add	r7, sp, #0
 800166a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (!delay_effect.enabled) return input;
 800166e:	4b64      	ldr	r3, [pc, #400]	@ (8001800 <Apply_Delay+0x19c>)
 8001670:	7c1b      	ldrb	r3, [r3, #16]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d102      	bne.n	800167c <Apply_Delay+0x18>
 8001676:	edd7 7a01 	vldr	s15, [r7, #4]
 800167a:	e0ba      	b.n	80017f2 <Apply_Delay+0x18e>

  int32_t delay_read_index = (int32_t)delay_write_index - (int32_t)delay_effect.delay_samples;
 800167c:	4b61      	ldr	r3, [pc, #388]	@ (8001804 <Apply_Delay+0x1a0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b5f      	ldr	r3, [pc, #380]	@ (8001800 <Apply_Delay+0x19c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
  while (delay_read_index < 0)
 800168a:	e003      	b.n	8001694 <Apply_Delay+0x30>
  {
    delay_read_index += DELAY_BUFFER_SIZE;
 800168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168e:	f503 5396 	add.w	r3, r3, #4800	@ 0x12c0
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
  while (delay_read_index < 0)
 8001694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001696:	2b00      	cmp	r3, #0
 8001698:	dbf8      	blt.n	800168c <Apply_Delay+0x28>
  }

  float32_t delayed_sample = delay_buffer[delay_read_index];
 800169a:	4a5b      	ldr	r2, [pc, #364]	@ (8001808 <Apply_Delay+0x1a4>)
 800169c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	61fb      	str	r3, [r7, #28]

  float32_t tone_alpha = 0.2f + delay_effect.tone * 0.7f;
 80016a6:	4b56      	ldr	r3, [pc, #344]	@ (8001800 <Apply_Delay+0x19c>)
 80016a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80016ac:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 800180c <Apply_Delay+0x1a8>
 80016b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b4:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8001810 <Apply_Delay+0x1ac>
 80016b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016bc:	edc7 7a06 	vstr	s15, [r7, #24]
  delay_effect.lp_state = tone_alpha * delayed_sample + (1.0f - tone_alpha) * delay_effect.lp_state;
 80016c0:	ed97 7a06 	vldr	s14, [r7, #24]
 80016c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80016c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80016d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80016d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016d8:	4b49      	ldr	r3, [pc, #292]	@ (8001800 <Apply_Delay+0x19c>)
 80016da:	edd3 7a05 	vldr	s15, [r3, #20]
 80016de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e6:	4b46      	ldr	r3, [pc, #280]	@ (8001800 <Apply_Delay+0x19c>)
 80016e8:	edc3 7a05 	vstr	s15, [r3, #20]

  float32_t filtered_delay = delay_effect.lp_state;
 80016ec:	4b44      	ldr	r3, [pc, #272]	@ (8001800 <Apply_Delay+0x19c>)
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	617b      	str	r3, [r7, #20]

  float32_t feedback_signal = filtered_delay * delay_effect.feedback;
 80016f2:	4b43      	ldr	r3, [pc, #268]	@ (8001800 <Apply_Delay+0x19c>)
 80016f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80016f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80016fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001700:	edc7 7a08 	vstr	s15, [r7, #32]
  if (feedback_signal > 0.95f)
 8001704:	edd7 7a08 	vldr	s15, [r7, #32]
 8001708:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001814 <Apply_Delay+0x1b0>
 800170c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001714:	dd02      	ble.n	800171c <Apply_Delay+0xb8>
    feedback_signal = 0.95f;
 8001716:	4b40      	ldr	r3, [pc, #256]	@ (8001818 <Apply_Delay+0x1b4>)
 8001718:	623b      	str	r3, [r7, #32]
 800171a:	e00a      	b.n	8001732 <Apply_Delay+0xce>
  else if (feedback_signal < -0.95f)
 800171c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001720:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 800181c <Apply_Delay+0x1b8>
 8001724:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172c:	d501      	bpl.n	8001732 <Apply_Delay+0xce>
    feedback_signal = -0.95f;
 800172e:	4b3c      	ldr	r3, [pc, #240]	@ (8001820 <Apply_Delay+0x1bc>)
 8001730:	623b      	str	r3, [r7, #32]

  delay_buffer[delay_write_index] = input + feedback_signal;
 8001732:	4b34      	ldr	r3, [pc, #208]	@ (8001804 <Apply_Delay+0x1a0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	ed97 7a01 	vldr	s14, [r7, #4]
 800173a:	edd7 7a08 	vldr	s15, [r7, #32]
 800173e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001742:	4a31      	ldr	r2, [pc, #196]	@ (8001808 <Apply_Delay+0x1a4>)
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	edc3 7a00 	vstr	s15, [r3]

  if (delay_buffer[delay_write_index] > 1.0f)
 800174c:	4b2d      	ldr	r3, [pc, #180]	@ (8001804 <Apply_Delay+0x1a0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a2d      	ldr	r2, [pc, #180]	@ (8001808 <Apply_Delay+0x1a4>)
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800175e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001766:	dd08      	ble.n	800177a <Apply_Delay+0x116>
    delay_buffer[delay_write_index] = 1.0f;
 8001768:	4b26      	ldr	r3, [pc, #152]	@ (8001804 <Apply_Delay+0x1a0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a26      	ldr	r2, [pc, #152]	@ (8001808 <Apply_Delay+0x1a4>)
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	e014      	b.n	80017a4 <Apply_Delay+0x140>
  else if (delay_buffer[delay_write_index] < -1.0f)
 800177a:	4b22      	ldr	r3, [pc, #136]	@ (8001804 <Apply_Delay+0x1a0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a22      	ldr	r2, [pc, #136]	@ (8001808 <Apply_Delay+0x1a4>)
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800178c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001794:	d506      	bpl.n	80017a4 <Apply_Delay+0x140>
    delay_buffer[delay_write_index] = -1.0f;
 8001796:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <Apply_Delay+0x1a0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a1b      	ldr	r2, [pc, #108]	@ (8001808 <Apply_Delay+0x1a4>)
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	4a20      	ldr	r2, [pc, #128]	@ (8001824 <Apply_Delay+0x1c0>)
 80017a2:	601a      	str	r2, [r3, #0]

  delay_write_index++;
 80017a4:	4b17      	ldr	r3, [pc, #92]	@ (8001804 <Apply_Delay+0x1a0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	4a16      	ldr	r2, [pc, #88]	@ (8001804 <Apply_Delay+0x1a0>)
 80017ac:	6013      	str	r3, [r2, #0]
  if (delay_write_index >= DELAY_BUFFER_SIZE)
 80017ae:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <Apply_Delay+0x1a0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f5b3 5f96 	cmp.w	r3, #4800	@ 0x12c0
 80017b6:	d302      	bcc.n	80017be <Apply_Delay+0x15a>
  {
    delay_write_index = 0;
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <Apply_Delay+0x1a0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
  }

  float32_t dry_gain = 1.0f - delay_effect.mix;
 80017be:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <Apply_Delay+0x19c>)
 80017c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80017c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017cc:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t wet_gain = delay_effect.mix;
 80017d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <Apply_Delay+0x19c>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	60fb      	str	r3, [r7, #12]

  return (input * dry_gain) + (delayed_sample * wet_gain);
 80017d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80017da:	edd7 7a04 	vldr	s15, [r7, #16]
 80017de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80017e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ee:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80017f2:	eeb0 0a67 	vmov.f32	s0, s15
 80017f6:	372c      	adds	r7, #44	@ 0x2c
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	2000001c 	.word	0x2000001c
 8001804:	20004f48 	.word	0x20004f48
 8001808:	20000448 	.word	0x20000448
 800180c:	3f333333 	.word	0x3f333333
 8001810:	3e4ccccd 	.word	0x3e4ccccd
 8001814:	3f733333 	.word	0x3f733333
 8001818:	3f733333 	.word	0x3f733333
 800181c:	bf733333 	.word	0xbf733333
 8001820:	bf733333 	.word	0xbf733333
 8001824:	bf800000 	.word	0xbf800000

08001828 <Apply_NoiseGate>:

float32_t Apply_NoiseGate(float32_t input)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	@ 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (!noise_gate.enabled) return input;
 8001832:	4b78      	ldr	r3, [pc, #480]	@ (8001a14 <Apply_NoiseGate+0x1ec>)
 8001834:	7c1b      	ldrb	r3, [r3, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d102      	bne.n	8001840 <Apply_NoiseGate+0x18>
 800183a:	edd7 7a01 	vldr	s15, [r7, #4]
 800183e:	e0e1      	b.n	8001a04 <Apply_NoiseGate+0x1dc>

  float32_t input_level = fabsf(input);
 8001840:	edd7 7a01 	vldr	s15, [r7, #4]
 8001844:	eef0 7ae7 	vabs.f32	s15, s15
 8001848:	edc7 7a04 	vstr	s15, [r7, #16]

  float32_t attack_coeff = 1.0f - (1.0f / (noise_gate.attack_time * SAMPLE_RATE));
 800184c:	4b71      	ldr	r3, [pc, #452]	@ (8001a14 <Apply_NoiseGate+0x1ec>)
 800184e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001852:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8001a18 <Apply_NoiseGate+0x1f0>
 8001856:	ee27 7a87 	vmul.f32	s14, s15, s14
 800185a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800185e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001862:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800186a:	edc7 7a07 	vstr	s15, [r7, #28]
  float32_t release_coeff = 1.0f - (1.0f / (noise_gate.release_time * SAMPLE_RATE));
 800186e:	4b69      	ldr	r3, [pc, #420]	@ (8001a14 <Apply_NoiseGate+0x1ec>)
 8001870:	edd3 7a02 	vldr	s15, [r3, #8]
 8001874:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8001a18 <Apply_NoiseGate+0x1f0>
 8001878:	ee27 7a87 	vmul.f32	s14, s15, s14
 800187c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001884:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188c:	edc7 7a06 	vstr	s15, [r7, #24]

  if (attack_coeff < 0.0f) attack_coeff = 0.0f;
 8001890:	edd7 7a07 	vldr	s15, [r7, #28]
 8001894:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189c:	d502      	bpl.n	80018a4 <Apply_NoiseGate+0x7c>
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
  if (attack_coeff >= 1.0f) attack_coeff = 0.999f;
 80018a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80018a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b4:	db01      	blt.n	80018ba <Apply_NoiseGate+0x92>
 80018b6:	4b59      	ldr	r3, [pc, #356]	@ (8001a1c <Apply_NoiseGate+0x1f4>)
 80018b8:	61fb      	str	r3, [r7, #28]
  if (release_coeff < 0.0f) release_coeff = 0.0f;
 80018ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80018be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c6:	d502      	bpl.n	80018ce <Apply_NoiseGate+0xa6>
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  if (release_coeff >= 1.0f) release_coeff = 0.999f;
 80018ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80018d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018de:	db01      	blt.n	80018e4 <Apply_NoiseGate+0xbc>
 80018e0:	4b4e      	ldr	r3, [pc, #312]	@ (8001a1c <Apply_NoiseGate+0x1f4>)
 80018e2:	61bb      	str	r3, [r7, #24]

  if (input_level > noise_gate.envelope)
 80018e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001a14 <Apply_NoiseGate+0x1ec>)
 80018e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80018ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80018ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f6:	dd17      	ble.n	8001928 <Apply_NoiseGate+0x100>
  {
    noise_gate.envelope += (input_level - noise_gate.envelope) * (1.0f - attack_coeff);
 80018f8:	4b46      	ldr	r3, [pc, #280]	@ (8001a14 <Apply_NoiseGate+0x1ec>)
 80018fa:	ed93 7a03 	vldr	s14, [r3, #12]
 80018fe:	4b45      	ldr	r3, [pc, #276]	@ (8001a14 <Apply_NoiseGate+0x1ec>)
 8001900:	edd3 7a03 	vldr	s15, [r3, #12]
 8001904:	edd7 6a04 	vldr	s13, [r7, #16]
 8001908:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800190c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001910:	edd7 7a07 	vldr	s15, [r7, #28]
 8001914:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800191c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001920:	4b3c      	ldr	r3, [pc, #240]	@ (8001a14 <Apply_NoiseGate+0x1ec>)
 8001922:	edc3 7a03 	vstr	s15, [r3, #12]
 8001926:	e016      	b.n	8001956 <Apply_NoiseGate+0x12e>
  }
  else
  {
    noise_gate.envelope += (input_level - noise_gate.envelope) * (1.0f - release_coeff);
 8001928:	4b3a      	ldr	r3, [pc, #232]	@ (8001a14 <Apply_NoiseGate+0x1ec>)
 800192a:	ed93 7a03 	vldr	s14, [r3, #12]
 800192e:	4b39      	ldr	r3, [pc, #228]	@ (8001a14 <Apply_NoiseGate+0x1ec>)
 8001930:	edd3 7a03 	vldr	s15, [r3, #12]
 8001934:	edd7 6a04 	vldr	s13, [r7, #16]
 8001938:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800193c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001940:	edd7 7a06 	vldr	s15, [r7, #24]
 8001944:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800194c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001950:	4b30      	ldr	r3, [pc, #192]	@ (8001a14 <Apply_NoiseGate+0x1ec>)
 8001952:	edc3 7a03 	vstr	s15, [r3, #12]
  }

  float32_t gate_gain;

  if (noise_gate.envelope > noise_gate.threshold * 1.2f)
 8001956:	4b2f      	ldr	r3, [pc, #188]	@ (8001a14 <Apply_NoiseGate+0x1ec>)
 8001958:	ed93 7a03 	vldr	s14, [r3, #12]
 800195c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a14 <Apply_NoiseGate+0x1ec>)
 800195e:	edd3 7a00 	vldr	s15, [r3]
 8001962:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8001a20 <Apply_NoiseGate+0x1f8>
 8001966:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800196a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800196e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001972:	dd03      	ble.n	800197c <Apply_NoiseGate+0x154>
  {
    gate_gain = 1.0f;
 8001974:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	e03d      	b.n	80019f8 <Apply_NoiseGate+0x1d0>
  }
  else if (noise_gate.envelope < noise_gate.threshold * 0.8f)
 800197c:	4b25      	ldr	r3, [pc, #148]	@ (8001a14 <Apply_NoiseGate+0x1ec>)
 800197e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001982:	4b24      	ldr	r3, [pc, #144]	@ (8001a14 <Apply_NoiseGate+0x1ec>)
 8001984:	edd3 7a00 	vldr	s15, [r3]
 8001988:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001a24 <Apply_NoiseGate+0x1fc>
 800198c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001998:	d503      	bpl.n	80019a2 <Apply_NoiseGate+0x17a>
  {
    gate_gain = 0.0f;
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	e02a      	b.n	80019f8 <Apply_NoiseGate+0x1d0>
  }
  else
  {
    float32_t range = noise_gate.threshold * 0.4f;
 80019a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a14 <Apply_NoiseGate+0x1ec>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001a28 <Apply_NoiseGate+0x200>
 80019ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b0:	edc7 7a03 	vstr	s15, [r7, #12]
    float32_t position = (noise_gate.envelope - noise_gate.threshold * 0.8f) / range;
 80019b4:	4b17      	ldr	r3, [pc, #92]	@ (8001a14 <Apply_NoiseGate+0x1ec>)
 80019b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80019ba:	4b16      	ldr	r3, [pc, #88]	@ (8001a14 <Apply_NoiseGate+0x1ec>)
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001a24 <Apply_NoiseGate+0x1fc>
 80019c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019c8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80019cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80019d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019d4:	edc7 7a02 	vstr	s15, [r7, #8]
    gate_gain = position * position * (3.0f - 2.0f * position);
 80019d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80019dc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019e8:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80019ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f4:	edc7 7a05 	vstr	s15, [r7, #20]
  }

  return input * gate_gain;
 80019f8:	ed97 7a01 	vldr	s14, [r7, #4]
 80019fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a00:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001a04:	eeb0 0a67 	vmov.f32	s0, s15
 8001a08:	3724      	adds	r7, #36	@ 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000034 	.word	0x20000034
 8001a18:	473b8000 	.word	0x473b8000
 8001a1c:	3f7fbe77 	.word	0x3f7fbe77
 8001a20:	3f99999a 	.word	0x3f99999a
 8001a24:	3f4ccccd 	.word	0x3f4ccccd
 8001a28:	3ecccccd 	.word	0x3ecccccd

08001a2c <SystemClock_Config>:
  *            PLL_Q                          = 2
  *            PLL_R                          = 2
  *            Flash Latency(WS)              = 4
  */
void SystemClock_Config(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b094      	sub	sp, #80	@ 0x50
 8001a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a32:	f107 0318 	add.w	r3, r7, #24
 8001a36:	2238      	movs	r2, #56	@ 0x38
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f008 ffeb 	bl	800aa16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f003 ffc8 	bl	80059e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a54:	2302      	movs	r3, #2
 8001a56:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a5e:	2340      	movs	r3, #64	@ 0x40
 8001a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a62:	2302      	movs	r3, #2
 8001a64:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a66:	2302      	movs	r3, #2
 8001a68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001a6e:	2355      	movs	r3, #85	@ 0x55
 8001a70:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV10;
 8001a72:	230a      	movs	r3, #10
 8001a74:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a76:	2302      	movs	r3, #2
 8001a78:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a7e:	f107 0318 	add.w	r3, r7, #24
 8001a82:	4618      	mov	r0, r3
 8001a84:	f004 f862 	bl	8005b4c <HAL_RCC_OscConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001a8e:	f000 f877 	bl	8001b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a92:	230f      	movs	r3, #15
 8001a94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a96:	2303      	movs	r3, #3
 8001a98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	2104      	movs	r1, #4
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f004 fb60 	bl	8006170 <HAL_RCC_ClockConfig>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001ab6:	f000 f863 	bl	8001b80 <Error_Handler>
  }
}
 8001aba:	bf00      	nop
 8001abc:	3750      	adds	r7, #80	@ 0x50
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <main>:

int main(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  HAL_Init();
 8001ac8:	f001 fbcd 	bl	8003266 <HAL_Init>
  SystemClock_Config();
 8001acc:	f7ff ffae 	bl	8001a2c <SystemClock_Config>

  MX_GPIO_Init();
 8001ad0:	f000 fa28 	bl	8001f24 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001ad4:	f000 f85a 	bl	8001b8c <MX_ADC1_Init>
  MX_DAC1_Init();
 8001ad8:	f000 f8d2 	bl	8001c80 <MX_DAC1_Init>
  MX_OPAMP1_Init();
 8001adc:	f000 f90a 	bl	8001cf4 <MX_OPAMP1_Init>
  MX_TIM1_Init();
 8001ae0:	f000 f934 	bl	8001d4c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001ae4:	f000 f986 	bl	8001df4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001ae8:	f000 f9d0 	bl	8001e8c <MX_USART3_UART_Init>

  // Start DAC and OPAMP
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001aec:	2100      	movs	r1, #0
 8001aee:	481c      	ldr	r0, [pc, #112]	@ (8001b60 <main+0x9c>)
 8001af0:	f003 f9ae 	bl	8004e50 <HAL_DAC_Start>
  HAL_OPAMP_Start(&hopamp1);
 8001af4:	481b      	ldr	r0, [pc, #108]	@ (8001b64 <main+0xa0>)
 8001af6:	f003 ff43 	bl	8005980 <HAL_OPAMP_Start>

  TIM1_Config_For_Sampling();
 8001afa:	f000 fa51 	bl	8001fa0 <TIM1_Config_For_Sampling>
  HAL_TIM_Base_Start_IT(&htim1);
 8001afe:	481a      	ldr	r0, [pc, #104]	@ (8001b68 <main+0xa4>)
 8001b00:	f004 ff9a 	bl	8006a38 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart3, &uart_rx_byte, 1);
 8001b04:	2201      	movs	r2, #1
 8001b06:	4919      	ldr	r1, [pc, #100]	@ (8001b6c <main+0xa8>)
 8001b08:	4819      	ldr	r0, [pc, #100]	@ (8001b70 <main+0xac>)
 8001b0a:	f005 fde3 	bl	80076d4 <HAL_UART_Receive_IT>

  while (1)
  {
    if (uart_command_ready)
 8001b0e:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <main+0xb0>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d004      	beq.n	8001b22 <main+0x5e>
    {
      Parse_UART_Command();
 8001b18:	f000 fd2e 	bl	8002578 <Parse_UART_Command>
      uart_command_ready = 0;
 8001b1c:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <main+0xb0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
    }

    if (process_audio_flag)
 8001b22:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <main+0xb4>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d004      	beq.n	8001b36 <main+0x72>
    {
      Process_Guitar_Signal();
 8001b2c:	f7ff fa62 	bl	8000ff4 <Process_Guitar_Signal>
      process_audio_flag = 0;
 8001b30:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <main+0xb4>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
    }

    if (command_blink_counter)
 8001b36:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <main+0xb8>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0e6      	beq.n	8001b0e <main+0x4a>
    {
      HAL_Delay(50);
 8001b40:	2032      	movs	r0, #50	@ 0x32
 8001b42:	f001 fc01 	bl	8003348 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001b46:	2120      	movs	r1, #32
 8001b48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b4c:	f003 fe2e 	bl	80057ac <HAL_GPIO_TogglePin>
      command_blink_counter--;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <main+0xb8>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	3b01      	subs	r3, #1
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <main+0xb8>)
 8001b5c:	701a      	strb	r2, [r3, #0]
    if (uart_command_ready)
 8001b5e:	e7d6      	b.n	8001b0e <main+0x4a>
 8001b60:	2000507c 	.word	0x2000507c
 8001b64:	20005090 	.word	0x20005090
 8001b68:	200050cc 	.word	0x200050cc
 8001b6c:	2000500e 	.word	0x2000500e
 8001b70:	200051ac 	.word	0x200051ac
 8001b74:	2000500f 	.word	0x2000500f
 8001b78:	20000444 	.word	0x20000444
 8001b7c:	2000500d 	.word	0x2000500d

08001b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <Error_Handler+0x8>

08001b8c <MX_ADC1_Init>:

/**
  * @brief ADC1 Initialization Function
  */
void MX_ADC1_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08c      	sub	sp, #48	@ 0x30
 8001b90:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8001b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f008 ff36 	bl	800aa16 <memset>

  hadc1.Instance = ADC1;
 8001baa:	4b32      	ldr	r3, [pc, #200]	@ (8001c74 <MX_ADC1_Init+0xe8>)
 8001bac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001bb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bb2:	4b30      	ldr	r3, [pc, #192]	@ (8001c74 <MX_ADC1_Init+0xe8>)
 8001bb4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001bb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bba:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <MX_ADC1_Init+0xe8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c74 <MX_ADC1_Init+0xe8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c74 <MX_ADC1_Init+0xe8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bcc:	4b29      	ldr	r3, [pc, #164]	@ (8001c74 <MX_ADC1_Init+0xe8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bd2:	4b28      	ldr	r3, [pc, #160]	@ (8001c74 <MX_ADC1_Init+0xe8>)
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bd8:	4b26      	ldr	r3, [pc, #152]	@ (8001c74 <MX_ADC1_Init+0xe8>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bde:	4b25      	ldr	r3, [pc, #148]	@ (8001c74 <MX_ADC1_Init+0xe8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001be4:	4b23      	ldr	r3, [pc, #140]	@ (8001c74 <MX_ADC1_Init+0xe8>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bea:	4b22      	ldr	r3, [pc, #136]	@ (8001c74 <MX_ADC1_Init+0xe8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bf2:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <MX_ADC1_Init+0xe8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c74 <MX_ADC1_Init+0xe8>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001c74 <MX_ADC1_Init+0xe8>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c06:	4b1b      	ldr	r3, [pc, #108]	@ (8001c74 <MX_ADC1_Init+0xe8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001c0c:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <MX_ADC1_Init+0xe8>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c14:	4817      	ldr	r0, [pc, #92]	@ (8001c74 <MX_ADC1_Init+0xe8>)
 8001c16:	f001 fe33 	bl	8003880 <HAL_ADC_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001c20:	f7ff ffae 	bl	8001b80 <Error_Handler>
  }

  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c24:	2300      	movs	r3, #0
 8001c26:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4811      	ldr	r0, [pc, #68]	@ (8001c74 <MX_ADC1_Init+0xe8>)
 8001c30:	f002 ff38 	bl	8004aa4 <HAL_ADCEx_MultiModeConfigChannel>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001c3a:	f7ff ffa1 	bl	8001b80 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_1;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <MX_ADC1_Init+0xec>)
 8001c40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c42:	2306      	movs	r3, #6
 8001c44:	60bb      	str	r3, [r7, #8]
  /* Increase ADC sampling time to improve input SNR and stabilize the PGA output
    Short sample times can cause noisy readings for high source impedances (guitar)
    ADC_SAMPLETIME_92CYCLES_5 is a compromise between speed and noise. */
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001c46:	2305      	movs	r3, #5
 8001c48:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c7c <MX_ADC1_Init+0xf0>)
 8001c4c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4806      	ldr	r0, [pc, #24]	@ (8001c74 <MX_ADC1_Init+0xe8>)
 8001c5c:	f002 f96a 	bl	8003f34 <HAL_ADC_ConfigChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001c66:	f7ff ff8b 	bl	8001b80 <Error_Handler>
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	3730      	adds	r7, #48	@ 0x30
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20005010 	.word	0x20005010
 8001c78:	04300002 	.word	0x04300002
 8001c7c:	407f0000 	.word	0x407f0000

08001c80 <MX_DAC1_Init>:

/**
  * @brief DAC1 Initialization Function
  */
void MX_DAC1_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08c      	sub	sp, #48	@ 0x30
 8001c84:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001c86:	463b      	mov	r3, r7
 8001c88:	2230      	movs	r2, #48	@ 0x30
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f008 fec2 	bl	800aa16 <memset>

  hdac1.Instance = DAC1;
 8001c92:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <MX_DAC1_Init+0x6c>)
 8001c94:	4a16      	ldr	r2, [pc, #88]	@ (8001cf0 <MX_DAC1_Init+0x70>)
 8001c96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001c98:	4814      	ldr	r0, [pc, #80]	@ (8001cec <MX_DAC1_Init+0x6c>)
 8001c9a:	f003 f8b6 	bl	8004e0a <HAL_DAC_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001ca4:	f7ff ff6c 	bl	8001b80 <Error_Handler>
  }

  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001ccc:	463b      	mov	r3, r7
 8001cce:	2200      	movs	r2, #0
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4806      	ldr	r0, [pc, #24]	@ (8001cec <MX_DAC1_Init+0x6c>)
 8001cd4:	f003 f956 	bl	8004f84 <HAL_DAC_ConfigChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001cde:	f7ff ff4f 	bl	8001b80 <Error_Handler>
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	3730      	adds	r7, #48	@ 0x30
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	2000507c 	.word	0x2000507c
 8001cf0:	50000800 	.word	0x50000800

08001cf4 <MX_OPAMP1_Init>:

/**
  * @brief OPAMP1 Initialization Function
  */
void MX_OPAMP1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  hopamp1.Instance = OPAMP1;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <MX_OPAMP1_Init+0x50>)
 8001cfa:	4a13      	ldr	r2, [pc, #76]	@ (8001d48 <MX_OPAMP1_Init+0x54>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <MX_OPAMP1_Init+0x50>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <MX_OPAMP1_Init+0x50>)
 8001d06:	2240      	movs	r2, #64	@ 0x40
 8001d08:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <MX_OPAMP1_Init+0x50>)
 8001d0c:	2208      	movs	r2, #8
 8001d0e:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <MX_OPAMP1_Init+0x50>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <MX_OPAMP1_Init+0x50>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <MX_OPAMP1_Init+0x50>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	625a      	str	r2, [r3, #36]	@ 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_32_OR_MINUS_31;
 8001d22:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <MX_OPAMP1_Init+0x50>)
 8001d24:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d28:	629a      	str	r2, [r3, #40]	@ 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <MX_OPAMP1_Init+0x50>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001d30:	4804      	ldr	r0, [pc, #16]	@ (8001d44 <MX_OPAMP1_Init+0x50>)
 8001d32:	f003 fd55 	bl	80057e0 <HAL_OPAMP_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_OPAMP1_Init+0x4c>
  {
    Error_Handler();
 8001d3c:	f7ff ff20 	bl	8001b80 <Error_Handler>
  }
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20005090 	.word	0x20005090
 8001d48:	40010300 	.word	0x40010300

08001d4c <MX_TIM1_Init>:

/**
  * @brief TIM1 Initialization Function
  */
void MX_TIM1_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d52:	f107 0310 	add.w	r3, r7, #16
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 8001d6a:	4b20      	ldr	r3, [pc, #128]	@ (8001dec <MX_TIM1_Init+0xa0>)
 8001d6c:	4a20      	ldr	r2, [pc, #128]	@ (8001df0 <MX_TIM1_Init+0xa4>)
 8001d6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d70:	4b1e      	ldr	r3, [pc, #120]	@ (8001dec <MX_TIM1_Init+0xa0>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d76:	4b1d      	ldr	r3, [pc, #116]	@ (8001dec <MX_TIM1_Init+0xa0>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dec <MX_TIM1_Init+0xa0>)
 8001d7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d84:	4b19      	ldr	r3, [pc, #100]	@ (8001dec <MX_TIM1_Init+0xa0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d8a:	4b18      	ldr	r3, [pc, #96]	@ (8001dec <MX_TIM1_Init+0xa0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d90:	4b16      	ldr	r3, [pc, #88]	@ (8001dec <MX_TIM1_Init+0xa0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d96:	4815      	ldr	r0, [pc, #84]	@ (8001dec <MX_TIM1_Init+0xa0>)
 8001d98:	f004 fdf6 	bl	8006988 <HAL_TIM_Base_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001da2:	f7ff feed 	bl	8001b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001daa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	4619      	mov	r1, r3
 8001db2:	480e      	ldr	r0, [pc, #56]	@ (8001dec <MX_TIM1_Init+0xa0>)
 8001db4:	f004 fffa 	bl	8006dac <HAL_TIM_ConfigClockSource>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001dbe:	f7ff fedf 	bl	8001b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4806      	ldr	r0, [pc, #24]	@ (8001dec <MX_TIM1_Init+0xa0>)
 8001dd4:	f005 fa44 	bl	8007260 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001dde:	f7ff fecf 	bl	8001b80 <Error_Handler>
  }
}
 8001de2:	bf00      	nop
 8001de4:	3720      	adds	r7, #32
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200050cc 	.word	0x200050cc
 8001df0:	40012c00 	.word	0x40012c00

08001df4 <MX_USART2_UART_Init>:

/**
  * @brief USART2 Initialization Function
  */
void MX_USART2_UART_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001df8:	4b22      	ldr	r3, [pc, #136]	@ (8001e84 <MX_USART2_UART_Init+0x90>)
 8001dfa:	4a23      	ldr	r2, [pc, #140]	@ (8001e88 <MX_USART2_UART_Init+0x94>)
 8001dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dfe:	4b21      	ldr	r3, [pc, #132]	@ (8001e84 <MX_USART2_UART_Init+0x90>)
 8001e00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	4b1f      	ldr	r3, [pc, #124]	@ (8001e84 <MX_USART2_UART_Init+0x90>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e84 <MX_USART2_UART_Init+0x90>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e12:	4b1c      	ldr	r3, [pc, #112]	@ (8001e84 <MX_USART2_UART_Init+0x90>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e18:	4b1a      	ldr	r3, [pc, #104]	@ (8001e84 <MX_USART2_UART_Init+0x90>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1e:	4b19      	ldr	r3, [pc, #100]	@ (8001e84 <MX_USART2_UART_Init+0x90>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e24:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <MX_USART2_UART_Init+0x90>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e2a:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <MX_USART2_UART_Init+0x90>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e30:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <MX_USART2_UART_Init+0x90>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e36:	4b13      	ldr	r3, [pc, #76]	@ (8001e84 <MX_USART2_UART_Init+0x90>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e3c:	4811      	ldr	r0, [pc, #68]	@ (8001e84 <MX_USART2_UART_Init+0x90>)
 8001e3e:	f005 fad7 	bl	80073f0 <HAL_UART_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e48:	f7ff fe9a 	bl	8001b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	480d      	ldr	r0, [pc, #52]	@ (8001e84 <MX_USART2_UART_Init+0x90>)
 8001e50:	f007 fd3f 	bl	80098d2 <HAL_UARTEx_SetTxFifoThreshold>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e5a:	f7ff fe91 	bl	8001b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4808      	ldr	r0, [pc, #32]	@ (8001e84 <MX_USART2_UART_Init+0x90>)
 8001e62:	f007 fd74 	bl	800994e <HAL_UARTEx_SetRxFifoThreshold>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001e6c:	f7ff fe88 	bl	8001b80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e70:	4804      	ldr	r0, [pc, #16]	@ (8001e84 <MX_USART2_UART_Init+0x90>)
 8001e72:	f007 fcf5 	bl	8009860 <HAL_UARTEx_DisableFifoMode>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001e7c:	f7ff fe80 	bl	8001b80 <Error_Handler>
  }
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20005118 	.word	0x20005118
 8001e88:	40004400 	.word	0x40004400

08001e8c <MX_USART3_UART_Init>:

/**
  * @brief USART3 Initialization Function (for ESP32)
  */
void MX_USART3_UART_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8001e90:	4b22      	ldr	r3, [pc, #136]	@ (8001f1c <MX_USART3_UART_Init+0x90>)
 8001e92:	4a23      	ldr	r2, [pc, #140]	@ (8001f20 <MX_USART3_UART_Init+0x94>)
 8001e94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e96:	4b21      	ldr	r3, [pc, #132]	@ (8001f1c <MX_USART3_UART_Init+0x90>)
 8001e98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f1c <MX_USART3_UART_Init+0x90>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f1c <MX_USART3_UART_Init+0x90>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8001f1c <MX_USART3_UART_Init+0x90>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f1c <MX_USART3_UART_Init+0x90>)
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb6:	4b19      	ldr	r3, [pc, #100]	@ (8001f1c <MX_USART3_UART_Init+0x90>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ebc:	4b17      	ldr	r3, [pc, #92]	@ (8001f1c <MX_USART3_UART_Init+0x90>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ec2:	4b16      	ldr	r3, [pc, #88]	@ (8001f1c <MX_USART3_UART_Init+0x90>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ec8:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <MX_USART3_UART_Init+0x90>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ece:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <MX_USART3_UART_Init+0x90>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ed4:	4811      	ldr	r0, [pc, #68]	@ (8001f1c <MX_USART3_UART_Init+0x90>)
 8001ed6:	f005 fa8b 	bl	80073f0 <HAL_UART_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ee0:	f7ff fe4e 	bl	8001b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	480d      	ldr	r0, [pc, #52]	@ (8001f1c <MX_USART3_UART_Init+0x90>)
 8001ee8:	f007 fcf3 	bl	80098d2 <HAL_UARTEx_SetTxFifoThreshold>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001ef2:	f7ff fe45 	bl	8001b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4808      	ldr	r0, [pc, #32]	@ (8001f1c <MX_USART3_UART_Init+0x90>)
 8001efa:	f007 fd28 	bl	800994e <HAL_UARTEx_SetRxFifoThreshold>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f04:	f7ff fe3c 	bl	8001b80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f08:	4804      	ldr	r0, [pc, #16]	@ (8001f1c <MX_USART3_UART_Init+0x90>)
 8001f0a:	f007 fca9 	bl	8009860 <HAL_UARTEx_DisableFifoMode>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f14:	f7ff fe34 	bl	8001b80 <Error_Handler>
  }
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	200051ac 	.word	0x200051ac
 8001f20:	40004800 	.word	0x40004800

08001f24 <MX_GPIO_Init>:

/**
  * @brief GPIO Initialization Function
  */
void MX_GPIO_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f3a:	4b18      	ldr	r3, [pc, #96]	@ (8001f9c <MX_GPIO_Init+0x78>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3e:	4a17      	ldr	r2, [pc, #92]	@ (8001f9c <MX_GPIO_Init+0x78>)
 8001f40:	f043 0320 	orr.w	r3, r3, #32
 8001f44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f46:	4b15      	ldr	r3, [pc, #84]	@ (8001f9c <MX_GPIO_Init+0x78>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <MX_GPIO_Init+0x78>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f56:	4a11      	ldr	r2, [pc, #68]	@ (8001f9c <MX_GPIO_Init+0x78>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f9c <MX_GPIO_Init+0x78>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2120      	movs	r1, #32
 8001f6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f72:	f003 fc03 	bl	800577c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f76:	2320      	movs	r3, #32
 8001f78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f86:	f107 030c 	add.w	r3, r7, #12
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f90:	f003 fa72 	bl	8005478 <HAL_GPIO_Init>
}
 8001f94:	bf00      	nop
 8001f96:	3720      	adds	r7, #32
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40021000 	.word	0x40021000

08001fa0 <TIM1_Config_For_Sampling>:

/**
  * @brief  Configure Timer1 for audio sampling rate (48kHz)
  */
void TIM1_Config_For_Sampling(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  htim1.Instance = TIM1;
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <TIM1_Config_For_Sampling+0x44>)
 8001fa6:	4a10      	ldr	r2, [pc, #64]	@ (8001fe8 <TIM1_Config_For_Sampling+0x48>)
 8001fa8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001faa:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <TIM1_Config_For_Sampling+0x44>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <TIM1_Config_For_Sampling+0x44>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3541;  // 48kHz sampling rate
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <TIM1_Config_For_Sampling+0x44>)
 8001fb8:	f640 52d5 	movw	r2, #3541	@ 0xdd5
 8001fbc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbe:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <TIM1_Config_For_Sampling+0x44>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fc4:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <TIM1_Config_For_Sampling+0x44>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <TIM1_Config_For_Sampling+0x44>)
 8001fcc:	2280      	movs	r2, #128	@ 0x80
 8001fce:	619a      	str	r2, [r3, #24]
  
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fd0:	4804      	ldr	r0, [pc, #16]	@ (8001fe4 <TIM1_Config_For_Sampling+0x44>)
 8001fd2:	f004 fcd9 	bl	8006988 <HAL_TIM_Base_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <TIM1_Config_For_Sampling+0x40>
  {
    Error_Handler();
 8001fdc:	f7ff fdd0 	bl	8001b80 <Error_Handler>
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	200050cc 	.word	0x200050cc
 8001fe8:	40012c00 	.word	0x40012c00

08001fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8002030 <HAL_MspInit+0x44>)
 8001ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8002030 <HAL_MspInit+0x44>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <HAL_MspInit+0x44>)
 8002000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <HAL_MspInit+0x44>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200e:	4a08      	ldr	r2, [pc, #32]	@ (8002030 <HAL_MspInit+0x44>)
 8002010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002014:	6593      	str	r3, [r2, #88]	@ 0x58
 8002016:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <HAL_MspInit+0x44>)
 8002018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002022:	f003 fd83 	bl	8005b2c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000

08002034 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b09a      	sub	sp, #104	@ 0x68
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	2244      	movs	r2, #68	@ 0x44
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f008 fcde 	bl	800aa16 <memset>
  if(hadc->Instance==ADC1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002062:	d134      	bne.n	80020ce <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002064:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002068:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800206a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800206e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002070:	f107 0310 	add.w	r3, r7, #16
 8002074:	4618      	mov	r0, r3
 8002076:	f004 fa97 	bl	80065a8 <HAL_RCCEx_PeriphCLKConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002080:	f7ff fd7e 	bl	8001b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002084:	4b14      	ldr	r3, [pc, #80]	@ (80020d8 <HAL_ADC_MspInit+0xa4>)
 8002086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002088:	4a13      	ldr	r2, [pc, #76]	@ (80020d8 <HAL_ADC_MspInit+0xa4>)
 800208a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800208e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002090:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <HAL_ADC_MspInit+0xa4>)
 8002092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002094:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <HAL_ADC_MspInit+0xa4>)
 800209e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a0:	4a0d      	ldr	r2, [pc, #52]	@ (80020d8 <HAL_ADC_MspInit+0xa4>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020a8:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <HAL_ADC_MspInit+0xa4>)
 80020aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020b4:	2303      	movs	r3, #3
 80020b6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b8:	2303      	movs	r3, #3
 80020ba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020c4:	4619      	mov	r1, r3
 80020c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ca:	f003 f9d5 	bl	8005478 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80020ce:	bf00      	nop
 80020d0:	3768      	adds	r7, #104	@ 0x68
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000

080020dc <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	@ 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a15      	ldr	r2, [pc, #84]	@ (8002150 <HAL_DAC_MspInit+0x74>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d124      	bne.n	8002148 <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80020fe:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <HAL_DAC_MspInit+0x78>)
 8002100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002102:	4a14      	ldr	r2, [pc, #80]	@ (8002154 <HAL_DAC_MspInit+0x78>)
 8002104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800210a:	4b12      	ldr	r3, [pc, #72]	@ (8002154 <HAL_DAC_MspInit+0x78>)
 800210c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002116:	4b0f      	ldr	r3, [pc, #60]	@ (8002154 <HAL_DAC_MspInit+0x78>)
 8002118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211a:	4a0e      	ldr	r2, [pc, #56]	@ (8002154 <HAL_DAC_MspInit+0x78>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002122:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <HAL_DAC_MspInit+0x78>)
 8002124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800212e:	2310      	movs	r3, #16
 8002130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002132:	2303      	movs	r3, #3
 8002134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	4619      	mov	r1, r3
 8002140:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002144:	f003 f998 	bl	8005478 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002148:	bf00      	nop
 800214a:	3728      	adds	r7, #40	@ 0x28
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	50000800 	.word	0x50000800
 8002154:	40021000 	.word	0x40021000

08002158 <HAL_OPAMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hopamp: OPAMP handle pointer
  * @retval None
  */
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0f      	ldr	r2, [pc, #60]	@ (80021b4 <HAL_OPAMP_MspInit+0x5c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d118      	bne.n	80021ac <HAL_OPAMP_MspInit+0x54>
  {
    /* USER CODE BEGIN OPAMP1_MspInit 0 */

    /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <HAL_OPAMP_MspInit+0x60>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217e:	4a0e      	ldr	r2, [pc, #56]	@ (80021b8 <HAL_OPAMP_MspInit+0x60>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002186:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <HAL_OPAMP_MspInit+0x60>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP1 GPIO Configuration
    PA7     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002192:	2380      	movs	r3, #128	@ 0x80
 8002194:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002196:	2303      	movs	r3, #3
 8002198:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	4619      	mov	r1, r3
 80021a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a8:	f003 f966 	bl	8005478 <HAL_GPIO_Init>

    /* USER CODE END OPAMP1_MspInit 1 */

  }

}
 80021ac:	bf00      	nop
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40010300 	.word	0x40010300
 80021b8:	40021000 	.word	0x40021000

080021bc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002200 <HAL_TIM_Base_MspInit+0x44>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d113      	bne.n	80021f6 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002204 <HAL_TIM_Base_MspInit+0x48>)
 80021d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002204 <HAL_TIM_Base_MspInit+0x48>)
 80021d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80021da:	4b0a      	ldr	r3, [pc, #40]	@ (8002204 <HAL_TIM_Base_MspInit+0x48>)
 80021dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM1_MspInit 1 */
    
  // Enable TIM1 update interrupt (lower priority than UART so UART IRQs can preempt)
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2101      	movs	r1, #1
 80021ea:	2019      	movs	r0, #25
 80021ec:	f002 fdd9 	bl	8004da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80021f0:	2019      	movs	r0, #25
 80021f2:	f002 fdf0 	bl	8004dd6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40012c00 	.word	0x40012c00
 8002204:	40021000 	.word	0x40021000

08002208 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b09c      	sub	sp, #112	@ 0x70
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002220:	f107 0318 	add.w	r3, r7, #24
 8002224:	2244      	movs	r2, #68	@ 0x44
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f008 fbf4 	bl	800aa16 <memset>
  if(huart->Instance==USART2)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a3a      	ldr	r2, [pc, #232]	@ (800231c <HAL_UART_MspInit+0x114>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d137      	bne.n	80022a8 <HAL_UART_MspInit+0xa0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002238:	2302      	movs	r3, #2
 800223a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800223c:	2300      	movs	r3, #0
 800223e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002240:	f107 0318 	add.w	r3, r7, #24
 8002244:	4618      	mov	r0, r3
 8002246:	f004 f9af 	bl	80065a8 <HAL_RCCEx_PeriphCLKConfig>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002250:	f7ff fc96 	bl	8001b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002254:	4b32      	ldr	r3, [pc, #200]	@ (8002320 <HAL_UART_MspInit+0x118>)
 8002256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002258:	4a31      	ldr	r2, [pc, #196]	@ (8002320 <HAL_UART_MspInit+0x118>)
 800225a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800225e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002260:	4b2f      	ldr	r3, [pc, #188]	@ (8002320 <HAL_UART_MspInit+0x118>)
 8002262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226c:	4b2c      	ldr	r3, [pc, #176]	@ (8002320 <HAL_UART_MspInit+0x118>)
 800226e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002270:	4a2b      	ldr	r2, [pc, #172]	@ (8002320 <HAL_UART_MspInit+0x118>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002278:	4b29      	ldr	r3, [pc, #164]	@ (8002320 <HAL_UART_MspInit+0x118>)
 800227a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002284:	230c      	movs	r3, #12
 8002286:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002294:	2307      	movs	r3, #7
 8002296:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800229c:	4619      	mov	r1, r3
 800229e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022a2:	f003 f8e9 	bl	8005478 <HAL_GPIO_Init>
  /* USART3 interrupt Init (give UART higher priority than TIM1 so ACKs are serviced promptly) */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  }

}
 80022a6:	e035      	b.n	8002314 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART3)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002324 <HAL_UART_MspInit+0x11c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d130      	bne.n	8002314 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002320 <HAL_UART_MspInit+0x118>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002320 <HAL_UART_MspInit+0x118>)
 80022b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80022be:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <HAL_UART_MspInit+0x118>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ca:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <HAL_UART_MspInit+0x118>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ce:	4a14      	ldr	r2, [pc, #80]	@ (8002320 <HAL_UART_MspInit+0x118>)
 80022d0:	f043 0304 	orr.w	r3, r3, #4
 80022d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022d6:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <HAL_UART_MspInit+0x118>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022e2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022f4:	2307      	movs	r3, #7
 80022f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80022fc:	4619      	mov	r1, r3
 80022fe:	480a      	ldr	r0, [pc, #40]	@ (8002328 <HAL_UART_MspInit+0x120>)
 8002300:	f003 f8ba 	bl	8005478 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002304:	2200      	movs	r2, #0
 8002306:	2100      	movs	r1, #0
 8002308:	2027      	movs	r0, #39	@ 0x27
 800230a:	f002 fd4a 	bl	8004da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800230e:	2027      	movs	r0, #39	@ 0x27
 8002310:	f002 fd61 	bl	8004dd6 <HAL_NVIC_EnableIRQ>
}
 8002314:	bf00      	nop
 8002316:	3770      	adds	r7, #112	@ 0x70
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40004400 	.word	0x40004400
 8002320:	40021000 	.word	0x40021000
 8002324:	40004800 	.word	0x40004800
 8002328:	48000800 	.word	0x48000800

0800232c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002330:	bf00      	nop
 8002332:	e7fd      	b.n	8002330 <NMI_Handler+0x4>

08002334 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002338:	bf00      	nop
 800233a:	e7fd      	b.n	8002338 <HardFault_Handler+0x4>

0800233c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002340:	bf00      	nop
 8002342:	e7fd      	b.n	8002340 <MemManage_Handler+0x4>

08002344 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002348:	bf00      	nop
 800234a:	e7fd      	b.n	8002348 <BusFault_Handler+0x4>

0800234c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002350:	bf00      	nop
 8002352:	e7fd      	b.n	8002350 <UsageFault_Handler+0x4>

08002354 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002382:	f000 ffc3 	bl	800330c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002390:	4802      	ldr	r0, [pc, #8]	@ (800239c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002392:	f004 fbbb 	bl	8006b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	200050cc 	.word	0x200050cc

080023a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 80023a4:	4802      	ldr	r0, [pc, #8]	@ (80023b0 <USART2_IRQHandler+0x10>)
 80023a6:	f005 f9e1 	bl	800776c <HAL_UART_IRQHandler>
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20005118 	.word	0x20005118

080023b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt (ESP32).
  */
void USART3_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart3);
 80023b8:	4802      	ldr	r0, [pc, #8]	@ (80023c4 <USART3_IRQHandler+0x10>)
 80023ba:	f005 f9d7 	bl	800776c <HAL_UART_IRQHandler>
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200051ac 	.word	0x200051ac

080023c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return 1;
 80023cc:	2301      	movs	r3, #1
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <_kill>:

int _kill(int pid, int sig)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023e2:	f008 fbb7 	bl	800ab54 <__errno>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2216      	movs	r2, #22
 80023ea:	601a      	str	r2, [r3, #0]
  return -1;
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <_exit>:

void _exit (int status)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ffe7 	bl	80023d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800240a:	bf00      	nop
 800240c:	e7fd      	b.n	800240a <_exit+0x12>

0800240e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b086      	sub	sp, #24
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	e00a      	b.n	8002436 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002420:	f3af 8000 	nop.w
 8002424:	4601      	mov	r1, r0
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	60ba      	str	r2, [r7, #8]
 800242c:	b2ca      	uxtb	r2, r1
 800242e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	3301      	adds	r3, #1
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	dbf0      	blt.n	8002420 <_read+0x12>
  }

  return len;
 800243e:	687b      	ldr	r3, [r7, #4]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	e009      	b.n	800246e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	60ba      	str	r2, [r7, #8]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3301      	adds	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	429a      	cmp	r2, r3
 8002474:	dbf1      	blt.n	800245a <_write+0x12>
  }
  return len;
 8002476:	687b      	ldr	r3, [r7, #4]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <_close>:

int _close(int file)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024a8:	605a      	str	r2, [r3, #4]
  return 0;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_isatty>:

int _isatty(int file)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024c0:	2301      	movs	r3, #1
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b085      	sub	sp, #20
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024f0:	4a14      	ldr	r2, [pc, #80]	@ (8002544 <_sbrk+0x5c>)
 80024f2:	4b15      	ldr	r3, [pc, #84]	@ (8002548 <_sbrk+0x60>)
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024fc:	4b13      	ldr	r3, [pc, #76]	@ (800254c <_sbrk+0x64>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d102      	bne.n	800250a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002504:	4b11      	ldr	r3, [pc, #68]	@ (800254c <_sbrk+0x64>)
 8002506:	4a12      	ldr	r2, [pc, #72]	@ (8002550 <_sbrk+0x68>)
 8002508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800250a:	4b10      	ldr	r3, [pc, #64]	@ (800254c <_sbrk+0x64>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	429a      	cmp	r2, r3
 8002516:	d207      	bcs.n	8002528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002518:	f008 fb1c 	bl	800ab54 <__errno>
 800251c:	4603      	mov	r3, r0
 800251e:	220c      	movs	r2, #12
 8002520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002522:	f04f 33ff 	mov.w	r3, #4294967295
 8002526:	e009      	b.n	800253c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002528:	4b08      	ldr	r3, [pc, #32]	@ (800254c <_sbrk+0x64>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800252e:	4b07      	ldr	r3, [pc, #28]	@ (800254c <_sbrk+0x64>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4413      	add	r3, r2
 8002536:	4a05      	ldr	r2, [pc, #20]	@ (800254c <_sbrk+0x64>)
 8002538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800253a:	68fb      	ldr	r3, [r7, #12]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20008000 	.word	0x20008000
 8002548:	00000400 	.word	0x00000400
 800254c:	20005240 	.word	0x20005240
 8002550:	20005398 	.word	0x20005398

08002554 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002558:	4b06      	ldr	r3, [pc, #24]	@ (8002574 <SystemInit+0x20>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255e:	4a05      	ldr	r2, [pc, #20]	@ (8002574 <SystemInit+0x20>)
 8002560:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002564:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <Parse_UART_Command>:
// (uart_rx_buffer, uart_rx_byte, uart_rx_index, uart_command_ready, uart_tx_buffer, command_blink_counter)
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart2;

void Parse_UART_Command(void)
{
 8002578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800257c:	b0ba      	sub	sp, #232	@ 0xe8
 800257e:	af0a      	add	r7, sp, #40	@ 0x28
  char* cmd = (char*)uart_rx_buffer;
 8002580:	4b5c      	ldr	r3, [pc, #368]	@ (80026f4 <Parse_UART_Command+0x17c>)
 8002582:	673b      	str	r3, [r7, #112]	@ 0x70
  uint8_t command_received = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
  
  if (strncmp(cmd, "VOL:", 4) == 0)
 800258a:	2204      	movs	r2, #4
 800258c:	495a      	ldr	r1, [pc, #360]	@ (80026f8 <Parse_UART_Command+0x180>)
 800258e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002590:	f008 fa49 	bl	800aa26 <strncmp>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d14a      	bne.n	8002630 <Parse_UART_Command+0xb8>
  {
    float vol = atof(cmd + 4);
 800259a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800259c:	3304      	adds	r3, #4
 800259e:	4618      	mov	r0, r3
 80025a0:	f007 fa62 	bl	8009a68 <atof>
 80025a4:	ec53 2b10 	vmov	r2, r3, d0
 80025a8:	4610      	mov	r0, r2
 80025aa:	4619      	mov	r1, r3
 80025ac:	f7fe fb06 	bl	8000bbc <__aeabi_d2f>
 80025b0:	4603      	mov	r3, r0
 80025b2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (vol >= 0.0f && vol <= 1.0f)
 80025b4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80025b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c0:	f2c0 8595 	blt.w	80030ee <Parse_UART_Command+0xb76>
 80025c4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80025c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80025cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d4:	f200 858b 	bhi.w	80030ee <Parse_UART_Command+0xb76>
    {
      output_volume = vol;
 80025d8:	4a48      	ldr	r2, [pc, #288]	@ (80026fc <Parse_UART_Command+0x184>)
 80025da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025dc:	6013      	str	r3, [r2, #0]
      command_received = 1;
 80025de:	2301      	movs	r3, #1
 80025e0:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
      snprintf(uart_tx_buffer, UART_TX_BUFFER_SIZE, "ACK:VOL=%.2f\n", vol);
 80025e4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80025e6:	f7fd ffd7 	bl	8000598 <__aeabi_f2d>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	e9cd 2300 	strd	r2, r3, [sp]
 80025f2:	4a43      	ldr	r2, [pc, #268]	@ (8002700 <Parse_UART_Command+0x188>)
 80025f4:	2180      	movs	r1, #128	@ 0x80
 80025f6:	4843      	ldr	r0, [pc, #268]	@ (8002704 <Parse_UART_Command+0x18c>)
 80025f8:	f008 f994 	bl	800a924 <sniprintf>
      if (HAL_UART_Transmit_IT(&huart3, (uint8_t*)uart_tx_buffer, strlen(uart_tx_buffer)) != HAL_OK)
 80025fc:	4841      	ldr	r0, [pc, #260]	@ (8002704 <Parse_UART_Command+0x18c>)
 80025fe:	f7fd fe0f 	bl	8000220 <strlen>
 8002602:	4603      	mov	r3, r0
 8002604:	b29b      	uxth	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	493e      	ldr	r1, [pc, #248]	@ (8002704 <Parse_UART_Command+0x18c>)
 800260a:	483f      	ldr	r0, [pc, #252]	@ (8002708 <Parse_UART_Command+0x190>)
 800260c:	f004 ffce 	bl	80075ac <HAL_UART_Transmit_IT>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 856b 	beq.w	80030ee <Parse_UART_Command+0xb76>
      {
        // fallback to blocking transmit if IT transmit not available
        HAL_UART_Transmit(&huart3, (uint8_t*)uart_tx_buffer, strlen(uart_tx_buffer), 100);
 8002618:	483a      	ldr	r0, [pc, #232]	@ (8002704 <Parse_UART_Command+0x18c>)
 800261a:	f7fd fe01 	bl	8000220 <strlen>
 800261e:	4603      	mov	r3, r0
 8002620:	b29a      	uxth	r2, r3
 8002622:	2364      	movs	r3, #100	@ 0x64
 8002624:	4937      	ldr	r1, [pc, #220]	@ (8002704 <Parse_UART_Command+0x18c>)
 8002626:	4838      	ldr	r0, [pc, #224]	@ (8002708 <Parse_UART_Command+0x190>)
 8002628:	f004 ff32 	bl	8007490 <HAL_UART_Transmit>
 800262c:	f000 bd5f 	b.w	80030ee <Parse_UART_Command+0xb76>
      }
    }
  }
  else if (strncmp(cmd, "OVR:", 4) == 0)
 8002630:	2204      	movs	r2, #4
 8002632:	4936      	ldr	r1, [pc, #216]	@ (800270c <Parse_UART_Command+0x194>)
 8002634:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002636:	f008 f9f6 	bl	800aa26 <strncmp>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	f040 81ef 	bne.w	8002a20 <Parse_UART_Command+0x4a8>
  {
    if (strncmp(cmd + 4, "ON", 2) == 0)
 8002642:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002644:	3304      	adds	r3, #4
 8002646:	2202      	movs	r2, #2
 8002648:	4931      	ldr	r1, [pc, #196]	@ (8002710 <Parse_UART_Command+0x198>)
 800264a:	4618      	mov	r0, r3
 800264c:	f008 f9eb 	bl	800aa26 <strncmp>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d121      	bne.n	800269a <Parse_UART_Command+0x122>
    {
      overdrive.enabled = 1;
 8002656:	4b2f      	ldr	r3, [pc, #188]	@ (8002714 <Parse_UART_Command+0x19c>)
 8002658:	2201      	movs	r2, #1
 800265a:	745a      	strb	r2, [r3, #17]
      command_received = 1;
 800265c:	2301      	movs	r3, #1
 800265e:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
      const char *msg = "ACK:OVR=ON\n";
 8002662:	4b2d      	ldr	r3, [pc, #180]	@ (8002718 <Parse_UART_Command+0x1a0>)
 8002664:	657b      	str	r3, [r7, #84]	@ 0x54
      if (HAL_UART_Transmit_IT(&huart3, (uint8_t*)msg, strlen(msg)) != HAL_OK)
 8002666:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002668:	f7fd fdda 	bl	8000220 <strlen>
 800266c:	4603      	mov	r3, r0
 800266e:	b29b      	uxth	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002674:	4824      	ldr	r0, [pc, #144]	@ (8002708 <Parse_UART_Command+0x190>)
 8002676:	f004 ff99 	bl	80075ac <HAL_UART_Transmit_IT>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8536 	beq.w	80030ee <Parse_UART_Command+0xb76>
      {
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 100);
 8002682:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002684:	f7fd fdcc 	bl	8000220 <strlen>
 8002688:	4603      	mov	r3, r0
 800268a:	b29a      	uxth	r2, r3
 800268c:	2364      	movs	r3, #100	@ 0x64
 800268e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002690:	481d      	ldr	r0, [pc, #116]	@ (8002708 <Parse_UART_Command+0x190>)
 8002692:	f004 fefd 	bl	8007490 <HAL_UART_Transmit>
 8002696:	f000 bd2a 	b.w	80030ee <Parse_UART_Command+0xb76>
      }
    }
    else if (strncmp(cmd + 4, "OFF", 3) == 0)
 800269a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800269c:	3304      	adds	r3, #4
 800269e:	2203      	movs	r2, #3
 80026a0:	491e      	ldr	r1, [pc, #120]	@ (800271c <Parse_UART_Command+0x1a4>)
 80026a2:	4618      	mov	r0, r3
 80026a4:	f008 f9bf 	bl	800aa26 <strncmp>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d13a      	bne.n	8002724 <Parse_UART_Command+0x1ac>
    {
      overdrive.enabled = 0;
 80026ae:	4b19      	ldr	r3, [pc, #100]	@ (8002714 <Parse_UART_Command+0x19c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	745a      	strb	r2, [r3, #17]
      command_received = 1;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
      const char *msg = "ACK:OVR=OFF\n";
 80026ba:	4b19      	ldr	r3, [pc, #100]	@ (8002720 <Parse_UART_Command+0x1a8>)
 80026bc:	65bb      	str	r3, [r7, #88]	@ 0x58
      if (HAL_UART_Transmit_IT(&huart3, (uint8_t*)msg, strlen(msg)) != HAL_OK)
 80026be:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80026c0:	f7fd fdae 	bl	8000220 <strlen>
 80026c4:	4603      	mov	r3, r0
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80026cc:	480e      	ldr	r0, [pc, #56]	@ (8002708 <Parse_UART_Command+0x190>)
 80026ce:	f004 ff6d 	bl	80075ac <HAL_UART_Transmit_IT>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 850a 	beq.w	80030ee <Parse_UART_Command+0xb76>
      {
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 100);
 80026da:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80026dc:	f7fd fda0 	bl	8000220 <strlen>
 80026e0:	4603      	mov	r3, r0
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	2364      	movs	r3, #100	@ 0x64
 80026e6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80026e8:	4807      	ldr	r0, [pc, #28]	@ (8002708 <Parse_UART_Command+0x190>)
 80026ea:	f004 fed1 	bl	8007490 <HAL_UART_Transmit>
 80026ee:	f000 bcfe 	b.w	80030ee <Parse_UART_Command+0xb76>
 80026f2:	bf00      	nop
 80026f4:	20004f4c 	.word	0x20004f4c
 80026f8:	0800cbb0 	.word	0x0800cbb0
 80026fc:	20000050 	.word	0x20000050
 8002700:	0800cbb8 	.word	0x0800cbb8
 8002704:	20004f8c 	.word	0x20004f8c
 8002708:	200051ac 	.word	0x200051ac
 800270c:	0800cbc8 	.word	0x0800cbc8
 8002710:	0800cbd0 	.word	0x0800cbd0
 8002714:	20000000 	.word	0x20000000
 8002718:	0800cbd4 	.word	0x0800cbd4
 800271c:	0800cbe0 	.word	0x0800cbe0
 8002720:	0800cbe4 	.word	0x0800cbe4
      }
    }
    else
    {
      char params[UART_RX_BUFFER_SIZE];
      strncpy(params, cmd + 4, sizeof(params));
 8002724:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002726:	1d19      	adds	r1, r3, #4
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	2240      	movs	r2, #64	@ 0x40
 800272c:	4618      	mov	r0, r3
 800272e:	f008 f98c 	bl	800aa4a <strncpy>
      params[sizeof(params) - 1] = '\0';
 8002732:	2300      	movs	r3, #0
 8002734:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

      char *saveptr = NULL;
 8002738:	2300      	movs	r3, #0
 800273a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      char *token = strtok_r(params, ",", &saveptr);
 800273c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	49af      	ldr	r1, [pc, #700]	@ (8002a00 <Parse_UART_Command+0x488>)
 8002744:	4618      	mov	r0, r3
 8002746:	f008 f9bb 	bl	800aac0 <strtok_r>
 800274a:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
      uint8_t parsed = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
      float gain = overdrive.gain;
 8002754:	4bab      	ldr	r3, [pc, #684]	@ (8002a04 <Parse_UART_Command+0x48c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      float threshold = overdrive.threshold;
 800275c:	4ba9      	ldr	r3, [pc, #676]	@ (8002a04 <Parse_UART_Command+0x48c>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      float tone = overdrive.tone;
 8002764:	4ba7      	ldr	r3, [pc, #668]	@ (8002a04 <Parse_UART_Command+0x48c>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      float mix = overdrive.mix;
 800276c:	4ba5      	ldr	r3, [pc, #660]	@ (8002a04 <Parse_UART_Command+0x48c>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      int mode = overdrive.mode;
 8002774:	4ba3      	ldr	r3, [pc, #652]	@ (8002a04 <Parse_UART_Command+0x48c>)
 8002776:	7c1b      	ldrb	r3, [r3, #16]
 8002778:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

      if (token)
 800277c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01a      	beq.n	80027ba <Parse_UART_Command+0x242>
      {
        gain = atof(token);
 8002784:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8002788:	f007 f96e 	bl	8009a68 <atof>
 800278c:	ec53 2b10 	vmov	r2, r3, d0
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	f7fe fa12 	bl	8000bbc <__aeabi_d2f>
 8002798:	4603      	mov	r3, r0
 800279a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        parsed++;
 800279e:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 80027a2:	3301      	adds	r3, #1
 80027a4:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
        token = strtok_r(NULL, ",", &saveptr);
 80027a8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027ac:	461a      	mov	r2, r3
 80027ae:	4994      	ldr	r1, [pc, #592]	@ (8002a00 <Parse_UART_Command+0x488>)
 80027b0:	2000      	movs	r0, #0
 80027b2:	f008 f985 	bl	800aac0 <strtok_r>
 80027b6:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
      }
      if (token)
 80027ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d01a      	beq.n	80027f8 <Parse_UART_Command+0x280>
      {
        threshold = atof(token);
 80027c2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80027c6:	f007 f94f 	bl	8009a68 <atof>
 80027ca:	ec53 2b10 	vmov	r2, r3, d0
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	f7fe f9f3 	bl	8000bbc <__aeabi_d2f>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        parsed++;
 80027dc:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 80027e0:	3301      	adds	r3, #1
 80027e2:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
        token = strtok_r(NULL, ",", &saveptr);
 80027e6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027ea:	461a      	mov	r2, r3
 80027ec:	4984      	ldr	r1, [pc, #528]	@ (8002a00 <Parse_UART_Command+0x488>)
 80027ee:	2000      	movs	r0, #0
 80027f0:	f008 f966 	bl	800aac0 <strtok_r>
 80027f4:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
      }
      if (token)
 80027f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d01a      	beq.n	8002836 <Parse_UART_Command+0x2be>
      {
        tone = atof(token);
 8002800:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8002804:	f007 f930 	bl	8009a68 <atof>
 8002808:	ec53 2b10 	vmov	r2, r3, d0
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	f7fe f9d4 	bl	8000bbc <__aeabi_d2f>
 8002814:	4603      	mov	r3, r0
 8002816:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        parsed++;
 800281a:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 800281e:	3301      	adds	r3, #1
 8002820:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
        token = strtok_r(NULL, ",", &saveptr);
 8002824:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002828:	461a      	mov	r2, r3
 800282a:	4975      	ldr	r1, [pc, #468]	@ (8002a00 <Parse_UART_Command+0x488>)
 800282c:	2000      	movs	r0, #0
 800282e:	f008 f947 	bl	800aac0 <strtok_r>
 8002832:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
      }
      if (token)
 8002836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01a      	beq.n	8002874 <Parse_UART_Command+0x2fc>
      {
        mix = atof(token);
 800283e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8002842:	f007 f911 	bl	8009a68 <atof>
 8002846:	ec53 2b10 	vmov	r2, r3, d0
 800284a:	4610      	mov	r0, r2
 800284c:	4619      	mov	r1, r3
 800284e:	f7fe f9b5 	bl	8000bbc <__aeabi_d2f>
 8002852:	4603      	mov	r3, r0
 8002854:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        parsed++;
 8002858:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 800285c:	3301      	adds	r3, #1
 800285e:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
        token = strtok_r(NULL, ",", &saveptr);
 8002862:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002866:	461a      	mov	r2, r3
 8002868:	4965      	ldr	r1, [pc, #404]	@ (8002a00 <Parse_UART_Command+0x488>)
 800286a:	2000      	movs	r0, #0
 800286c:	f008 f928 	bl	800aac0 <strtok_r>
 8002870:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
      }
      if (token)
 8002874:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <Parse_UART_Command+0x31a>
      {
        mode = atoi(token);
 800287c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8002880:	f007 f8f5 	bl	8009a6e <atoi>
 8002884:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
        parsed++;
 8002888:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 800288c:	3301      	adds	r3, #1
 800288e:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
      }

      if (parsed >= 3)
 8002892:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8002896:	2b02      	cmp	r3, #2
 8002898:	f240 8429 	bls.w	80030ee <Parse_UART_Command+0xb76>
      {
        if (gain >= 1.0f && gain <= 100.0f) overdrive.gain = gain;
 800289c:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80028a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80028a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ac:	db0c      	blt.n	80028c8 <Parse_UART_Command+0x350>
 80028ae:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80028b2:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8002a08 <Parse_UART_Command+0x490>
 80028b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028be:	d803      	bhi.n	80028c8 <Parse_UART_Command+0x350>
 80028c0:	4a50      	ldr	r2, [pc, #320]	@ (8002a04 <Parse_UART_Command+0x48c>)
 80028c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028c6:	6013      	str	r3, [r2, #0]
        if (threshold >= 0.1f && threshold <= 0.95f) overdrive.threshold = threshold;
 80028c8:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80028cc:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8002a0c <Parse_UART_Command+0x494>
 80028d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	db0c      	blt.n	80028f4 <Parse_UART_Command+0x37c>
 80028da:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80028de:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8002a10 <Parse_UART_Command+0x498>
 80028e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ea:	d803      	bhi.n	80028f4 <Parse_UART_Command+0x37c>
 80028ec:	4a45      	ldr	r2, [pc, #276]	@ (8002a04 <Parse_UART_Command+0x48c>)
 80028ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028f2:	6053      	str	r3, [r2, #4]
        if (tone >= 0.0f && tone <= 1.0f) overdrive.tone = tone;
 80028f4:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80028f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002900:	db0c      	blt.n	800291c <Parse_UART_Command+0x3a4>
 8002902:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002906:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800290a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800290e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002912:	d803      	bhi.n	800291c <Parse_UART_Command+0x3a4>
 8002914:	4a3b      	ldr	r2, [pc, #236]	@ (8002a04 <Parse_UART_Command+0x48c>)
 8002916:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800291a:	6093      	str	r3, [r2, #8]
        if (parsed >= 4 && mix >= 0.0f && mix <= 1.0f) overdrive.mix = mix;
 800291c:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8002920:	2b03      	cmp	r3, #3
 8002922:	d913      	bls.n	800294c <Parse_UART_Command+0x3d4>
 8002924:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8002928:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800292c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002930:	db0c      	blt.n	800294c <Parse_UART_Command+0x3d4>
 8002932:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8002936:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800293a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800293e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002942:	d803      	bhi.n	800294c <Parse_UART_Command+0x3d4>
 8002944:	4a2f      	ldr	r2, [pc, #188]	@ (8002a04 <Parse_UART_Command+0x48c>)
 8002946:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800294a:	60d3      	str	r3, [r2, #12]
        if (parsed >= 5 && mode >= 0 && mode <= 2) overdrive.mode = mode;
 800294c:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8002950:	2b04      	cmp	r3, #4
 8002952:	d90c      	bls.n	800296e <Parse_UART_Command+0x3f6>
 8002954:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002958:	2b00      	cmp	r3, #0
 800295a:	db08      	blt.n	800296e <Parse_UART_Command+0x3f6>
 800295c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002960:	2b02      	cmp	r3, #2
 8002962:	dc04      	bgt.n	800296e <Parse_UART_Command+0x3f6>
 8002964:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002968:	b2da      	uxtb	r2, r3
 800296a:	4b26      	ldr	r3, [pc, #152]	@ (8002a04 <Parse_UART_Command+0x48c>)
 800296c:	741a      	strb	r2, [r3, #16]

        command_received = 1;
 800296e:	2301      	movs	r3, #1
 8002970:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
        snprintf(uart_tx_buffer, UART_TX_BUFFER_SIZE,
                 "ACK:OVR=%.1f,%.2f,%.2f,%.2f,%d\n",
                 overdrive.gain, overdrive.threshold, overdrive.tone, overdrive.mix, overdrive.mode);
 8002974:	4b23      	ldr	r3, [pc, #140]	@ (8002a04 <Parse_UART_Command+0x48c>)
 8002976:	681b      	ldr	r3, [r3, #0]
        snprintf(uart_tx_buffer, UART_TX_BUFFER_SIZE,
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd fe0d 	bl	8000598 <__aeabi_f2d>
 800297e:	4604      	mov	r4, r0
 8002980:	460d      	mov	r5, r1
                 overdrive.gain, overdrive.threshold, overdrive.tone, overdrive.mix, overdrive.mode);
 8002982:	4b20      	ldr	r3, [pc, #128]	@ (8002a04 <Parse_UART_Command+0x48c>)
 8002984:	685b      	ldr	r3, [r3, #4]
        snprintf(uart_tx_buffer, UART_TX_BUFFER_SIZE,
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fe06 	bl	8000598 <__aeabi_f2d>
 800298c:	4680      	mov	r8, r0
 800298e:	4689      	mov	r9, r1
                 overdrive.gain, overdrive.threshold, overdrive.tone, overdrive.mix, overdrive.mode);
 8002990:	4b1c      	ldr	r3, [pc, #112]	@ (8002a04 <Parse_UART_Command+0x48c>)
 8002992:	689b      	ldr	r3, [r3, #8]
        snprintf(uart_tx_buffer, UART_TX_BUFFER_SIZE,
 8002994:	4618      	mov	r0, r3
 8002996:	f7fd fdff 	bl	8000598 <__aeabi_f2d>
 800299a:	4682      	mov	sl, r0
 800299c:	468b      	mov	fp, r1
                 overdrive.gain, overdrive.threshold, overdrive.tone, overdrive.mix, overdrive.mode);
 800299e:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <Parse_UART_Command+0x48c>)
 80029a0:	68db      	ldr	r3, [r3, #12]
        snprintf(uart_tx_buffer, UART_TX_BUFFER_SIZE,
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fd fdf8 	bl	8000598 <__aeabi_f2d>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
                 overdrive.gain, overdrive.threshold, overdrive.tone, overdrive.mix, overdrive.mode);
 80029ac:	4915      	ldr	r1, [pc, #84]	@ (8002a04 <Parse_UART_Command+0x48c>)
 80029ae:	7c09      	ldrb	r1, [r1, #16]
        snprintf(uart_tx_buffer, UART_TX_BUFFER_SIZE,
 80029b0:	9108      	str	r1, [sp, #32]
 80029b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80029b6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80029ba:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80029be:	e9cd 4500 	strd	r4, r5, [sp]
 80029c2:	4a14      	ldr	r2, [pc, #80]	@ (8002a14 <Parse_UART_Command+0x49c>)
 80029c4:	2180      	movs	r1, #128	@ 0x80
 80029c6:	4814      	ldr	r0, [pc, #80]	@ (8002a18 <Parse_UART_Command+0x4a0>)
 80029c8:	f007 ffac 	bl	800a924 <sniprintf>
        if (HAL_UART_Transmit_IT(&huart3, (uint8_t*)uart_tx_buffer, strlen(uart_tx_buffer)) != HAL_OK)
 80029cc:	4812      	ldr	r0, [pc, #72]	@ (8002a18 <Parse_UART_Command+0x4a0>)
 80029ce:	f7fd fc27 	bl	8000220 <strlen>
 80029d2:	4603      	mov	r3, r0
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	490f      	ldr	r1, [pc, #60]	@ (8002a18 <Parse_UART_Command+0x4a0>)
 80029da:	4810      	ldr	r0, [pc, #64]	@ (8002a1c <Parse_UART_Command+0x4a4>)
 80029dc:	f004 fde6 	bl	80075ac <HAL_UART_Transmit_IT>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8383 	beq.w	80030ee <Parse_UART_Command+0xb76>
        {
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_tx_buffer, strlen(uart_tx_buffer), 100);
 80029e8:	480b      	ldr	r0, [pc, #44]	@ (8002a18 <Parse_UART_Command+0x4a0>)
 80029ea:	f7fd fc19 	bl	8000220 <strlen>
 80029ee:	4603      	mov	r3, r0
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	2364      	movs	r3, #100	@ 0x64
 80029f4:	4908      	ldr	r1, [pc, #32]	@ (8002a18 <Parse_UART_Command+0x4a0>)
 80029f6:	4809      	ldr	r0, [pc, #36]	@ (8002a1c <Parse_UART_Command+0x4a4>)
 80029f8:	f004 fd4a 	bl	8007490 <HAL_UART_Transmit>
 80029fc:	e377      	b.n	80030ee <Parse_UART_Command+0xb76>
 80029fe:	bf00      	nop
 8002a00:	0800cbf4 	.word	0x0800cbf4
 8002a04:	20000000 	.word	0x20000000
 8002a08:	42c80000 	.word	0x42c80000
 8002a0c:	3dcccccd 	.word	0x3dcccccd
 8002a10:	3f733333 	.word	0x3f733333
 8002a14:	0800cbf8 	.word	0x0800cbf8
 8002a18:	20004f8c 	.word	0x20004f8c
 8002a1c:	200051ac 	.word	0x200051ac
        }
      }
    }
  }
  else if (strncmp(cmd, "DLY:", 4) == 0)
 8002a20:	2204      	movs	r2, #4
 8002a22:	4990      	ldr	r1, [pc, #576]	@ (8002c64 <Parse_UART_Command+0x6ec>)
 8002a24:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002a26:	f007 fffe 	bl	800aa26 <strncmp>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f040 81b7 	bne.w	8002da0 <Parse_UART_Command+0x828>
  {
    if (strncmp(cmd + 4, "ON", 2) == 0)
 8002a32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a34:	3304      	adds	r3, #4
 8002a36:	2202      	movs	r2, #2
 8002a38:	498b      	ldr	r1, [pc, #556]	@ (8002c68 <Parse_UART_Command+0x6f0>)
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f007 fff3 	bl	800aa26 <strncmp>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d120      	bne.n	8002a88 <Parse_UART_Command+0x510>
    {
      delay_effect.enabled = 1;
 8002a46:	4b89      	ldr	r3, [pc, #548]	@ (8002c6c <Parse_UART_Command+0x6f4>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	741a      	strb	r2, [r3, #16]
      command_received = 1;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
      const char *msg = "ACK:DLY=ON\n";
 8002a52:	4b87      	ldr	r3, [pc, #540]	@ (8002c70 <Parse_UART_Command+0x6f8>)
 8002a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
      if (HAL_UART_Transmit_IT(&huart3, (uint8_t*)msg, strlen(msg)) != HAL_OK)
 8002a56:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002a58:	f7fd fbe2 	bl	8000220 <strlen>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002a64:	4883      	ldr	r0, [pc, #524]	@ (8002c74 <Parse_UART_Command+0x6fc>)
 8002a66:	f004 fda1 	bl	80075ac <HAL_UART_Transmit_IT>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 833e 	beq.w	80030ee <Parse_UART_Command+0xb76>
      {
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 100);
 8002a72:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002a74:	f7fd fbd4 	bl	8000220 <strlen>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	2364      	movs	r3, #100	@ 0x64
 8002a7e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002a80:	487c      	ldr	r0, [pc, #496]	@ (8002c74 <Parse_UART_Command+0x6fc>)
 8002a82:	f004 fd05 	bl	8007490 <HAL_UART_Transmit>
 8002a86:	e332      	b.n	80030ee <Parse_UART_Command+0xb76>
      }
    }
    else if (strncmp(cmd + 4, "OFF", 3) == 0)
 8002a88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	497a      	ldr	r1, [pc, #488]	@ (8002c78 <Parse_UART_Command+0x700>)
 8002a90:	4618      	mov	r0, r3
 8002a92:	f007 ffc8 	bl	800aa26 <strncmp>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d120      	bne.n	8002ade <Parse_UART_Command+0x566>
    {
      delay_effect.enabled = 0;
 8002a9c:	4b73      	ldr	r3, [pc, #460]	@ (8002c6c <Parse_UART_Command+0x6f4>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	741a      	strb	r2, [r3, #16]
      command_received = 1;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
      const char *msg = "ACK:DLY=OFF\n";
 8002aa8:	4b74      	ldr	r3, [pc, #464]	@ (8002c7c <Parse_UART_Command+0x704>)
 8002aaa:	663b      	str	r3, [r7, #96]	@ 0x60
      if (HAL_UART_Transmit_IT(&huart3, (uint8_t*)msg, strlen(msg)) != HAL_OK)
 8002aac:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002aae:	f7fd fbb7 	bl	8000220 <strlen>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002aba:	486e      	ldr	r0, [pc, #440]	@ (8002c74 <Parse_UART_Command+0x6fc>)
 8002abc:	f004 fd76 	bl	80075ac <HAL_UART_Transmit_IT>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8313 	beq.w	80030ee <Parse_UART_Command+0xb76>
      {
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 100);
 8002ac8:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002aca:	f7fd fba9 	bl	8000220 <strlen>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	2364      	movs	r3, #100	@ 0x64
 8002ad4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002ad6:	4867      	ldr	r0, [pc, #412]	@ (8002c74 <Parse_UART_Command+0x6fc>)
 8002ad8:	f004 fcda 	bl	8007490 <HAL_UART_Transmit>
 8002adc:	e307      	b.n	80030ee <Parse_UART_Command+0xb76>
      }
    }
    else
    {
      char params[UART_RX_BUFFER_SIZE];
      strncpy(params, cmd + 4, sizeof(params));
 8002ade:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ae0:	1d19      	adds	r1, r3, #4
 8002ae2:	1d3b      	adds	r3, r7, #4
 8002ae4:	2240      	movs	r2, #64	@ 0x40
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f007 ffaf 	bl	800aa4a <strncpy>
      params[sizeof(params) - 1] = '\0';
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

      char *saveptr = NULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	64bb      	str	r3, [r7, #72]	@ 0x48
      char *token = strtok_r(params, ",", &saveptr);
 8002af6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002afa:	1d3b      	adds	r3, r7, #4
 8002afc:	4960      	ldr	r1, [pc, #384]	@ (8002c80 <Parse_UART_Command+0x708>)
 8002afe:	4618      	mov	r0, r3
 8002b00:	f007 ffde 	bl	800aac0 <strtok_r>
 8002b04:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
      uint8_t parsed = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
      float time_ms = (float)delay_effect.delay_samples * (1000.0f / SAMPLE_RATE);
 8002b0e:	4b57      	ldr	r3, [pc, #348]	@ (8002c6c <Parse_UART_Command+0x6f4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	ee07 3a90 	vmov	s15, r3
 8002b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b1a:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002c84 <Parse_UART_Command+0x70c>
 8002b1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b22:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
      float feedback = delay_effect.feedback;
 8002b26:	4b51      	ldr	r3, [pc, #324]	@ (8002c6c <Parse_UART_Command+0x6f4>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      float mix = delay_effect.mix;
 8002b2e:	4b4f      	ldr	r3, [pc, #316]	@ (8002c6c <Parse_UART_Command+0x6f4>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      float tone = delay_effect.tone;
 8002b36:	4b4d      	ldr	r3, [pc, #308]	@ (8002c6c <Parse_UART_Command+0x6f4>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      if (token)
 8002b3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d01a      	beq.n	8002b7c <Parse_UART_Command+0x604>
      {
        time_ms = atof(token);
 8002b46:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8002b4a:	f006 ff8d 	bl	8009a68 <atof>
 8002b4e:	ec53 2b10 	vmov	r2, r3, d0
 8002b52:	4610      	mov	r0, r2
 8002b54:	4619      	mov	r1, r3
 8002b56:	f7fe f831 	bl	8000bbc <__aeabi_d2f>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        parsed++;
 8002b60:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8002b64:	3301      	adds	r3, #1
 8002b66:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
        token = strtok_r(NULL, ",", &saveptr);
 8002b6a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4943      	ldr	r1, [pc, #268]	@ (8002c80 <Parse_UART_Command+0x708>)
 8002b72:	2000      	movs	r0, #0
 8002b74:	f007 ffa4 	bl	800aac0 <strtok_r>
 8002b78:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
      }
      if (token)
 8002b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01a      	beq.n	8002bba <Parse_UART_Command+0x642>
      {
        feedback = atof(token);
 8002b84:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8002b88:	f006 ff6e 	bl	8009a68 <atof>
 8002b8c:	ec53 2b10 	vmov	r2, r3, d0
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	f7fe f812 	bl	8000bbc <__aeabi_d2f>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        parsed++;
 8002b9e:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
        token = strtok_r(NULL, ",", &saveptr);
 8002ba8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002bac:	461a      	mov	r2, r3
 8002bae:	4934      	ldr	r1, [pc, #208]	@ (8002c80 <Parse_UART_Command+0x708>)
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f007 ff85 	bl	800aac0 <strtok_r>
 8002bb6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
      }
      if (token)
 8002bba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d01a      	beq.n	8002bf8 <Parse_UART_Command+0x680>
      {
        mix = atof(token);
 8002bc2:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8002bc6:	f006 ff4f 	bl	8009a68 <atof>
 8002bca:	ec53 2b10 	vmov	r2, r3, d0
 8002bce:	4610      	mov	r0, r2
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f7fd fff3 	bl	8000bbc <__aeabi_d2f>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        parsed++;
 8002bdc:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8002be0:	3301      	adds	r3, #1
 8002be2:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
        token = strtok_r(NULL, ",", &saveptr);
 8002be6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002bea:	461a      	mov	r2, r3
 8002bec:	4924      	ldr	r1, [pc, #144]	@ (8002c80 <Parse_UART_Command+0x708>)
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f007 ff66 	bl	800aac0 <strtok_r>
 8002bf4:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
      }
      if (token)
 8002bf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d011      	beq.n	8002c24 <Parse_UART_Command+0x6ac>
      {
        tone = atof(token);
 8002c00:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8002c04:	f006 ff30 	bl	8009a68 <atof>
 8002c08:	ec53 2b10 	vmov	r2, r3, d0
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	f7fd ffd4 	bl	8000bbc <__aeabi_d2f>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        parsed++;
 8002c1a:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
      }

      if (parsed >= 3)
 8002c24:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	f240 8260 	bls.w	80030ee <Parse_UART_Command+0xb76>
      {
        uint32_t samples = (uint32_t)((time_ms / 1000.0f) * SAMPLE_RATE);
 8002c2e:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002c32:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002c88 <Parse_UART_Command+0x710>
 8002c36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c3a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002c8c <Parse_UART_Command+0x714>
 8002c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c46:	ee17 3a90 	vmov	r3, s15
 8002c4a:	667b      	str	r3, [r7, #100]	@ 0x64
        if (samples > 0 && samples <= DELAY_BUFFER_SIZE)
 8002c4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01e      	beq.n	8002c90 <Parse_UART_Command+0x718>
 8002c52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c54:	f5b3 5f96 	cmp.w	r3, #4800	@ 0x12c0
 8002c58:	d81a      	bhi.n	8002c90 <Parse_UART_Command+0x718>
        {
          delay_effect.delay_samples = samples;
 8002c5a:	4a04      	ldr	r2, [pc, #16]	@ (8002c6c <Parse_UART_Command+0x6f4>)
 8002c5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	e01a      	b.n	8002c98 <Parse_UART_Command+0x720>
 8002c62:	bf00      	nop
 8002c64:	0800cc18 	.word	0x0800cc18
 8002c68:	0800cbd0 	.word	0x0800cbd0
 8002c6c:	2000001c 	.word	0x2000001c
 8002c70:	0800cc20 	.word	0x0800cc20
 8002c74:	200051ac 	.word	0x200051ac
 8002c78:	0800cbe0 	.word	0x0800cbe0
 8002c7c:	0800cc2c 	.word	0x0800cc2c
 8002c80:	0800cbf4 	.word	0x0800cbf4
 8002c84:	3caaaaab 	.word	0x3caaaaab
 8002c88:	447a0000 	.word	0x447a0000
 8002c8c:	473b8000 	.word	0x473b8000
        }
        else
        {
          delay_effect.delay_samples = DELAY_BUFFER_SIZE;
 8002c90:	4b73      	ldr	r3, [pc, #460]	@ (8002e60 <Parse_UART_Command+0x8e8>)
 8002c92:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8002c96:	601a      	str	r2, [r3, #0]
        }
        if (feedback >= 0.0f && feedback <= 0.95f) delay_effect.feedback = feedback;
 8002c98:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8002c9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca4:	db0c      	blt.n	8002cc0 <Parse_UART_Command+0x748>
 8002ca6:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8002caa:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8002e64 <Parse_UART_Command+0x8ec>
 8002cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb6:	d803      	bhi.n	8002cc0 <Parse_UART_Command+0x748>
 8002cb8:	4a69      	ldr	r2, [pc, #420]	@ (8002e60 <Parse_UART_Command+0x8e8>)
 8002cba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002cbe:	6053      	str	r3, [r2, #4]
        if (mix >= 0.0f && mix <= 1.0f) delay_effect.mix = mix;
 8002cc0:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002cc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ccc:	db0c      	blt.n	8002ce8 <Parse_UART_Command+0x770>
 8002cce:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002cd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cde:	d803      	bhi.n	8002ce8 <Parse_UART_Command+0x770>
 8002ce0:	4a5f      	ldr	r2, [pc, #380]	@ (8002e60 <Parse_UART_Command+0x8e8>)
 8002ce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ce6:	6093      	str	r3, [r2, #8]
        if (parsed >= 4 && tone >= 0.0f && tone <= 1.0f) delay_effect.tone = tone;
 8002ce8:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d913      	bls.n	8002d18 <Parse_UART_Command+0x7a0>
 8002cf0:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8002cf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfc:	db0c      	blt.n	8002d18 <Parse_UART_Command+0x7a0>
 8002cfe:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8002d02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d0e:	d803      	bhi.n	8002d18 <Parse_UART_Command+0x7a0>
 8002d10:	4a53      	ldr	r2, [pc, #332]	@ (8002e60 <Parse_UART_Command+0x8e8>)
 8002d12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d16:	60d3      	str	r3, [r2, #12]

        command_received = 1;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
        snprintf(uart_tx_buffer, UART_TX_BUFFER_SIZE,
 8002d1e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002d22:	f7fd fc39 	bl	8000598 <__aeabi_f2d>
 8002d26:	4604      	mov	r4, r0
 8002d28:	460d      	mov	r5, r1
                 "ACK:DLY=%.0fms,%.2f,%.2f,%.2f\n",
                 time_ms, delay_effect.feedback, delay_effect.mix, delay_effect.tone);
 8002d2a:	4b4d      	ldr	r3, [pc, #308]	@ (8002e60 <Parse_UART_Command+0x8e8>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
        snprintf(uart_tx_buffer, UART_TX_BUFFER_SIZE,
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fc32 	bl	8000598 <__aeabi_f2d>
 8002d34:	4680      	mov	r8, r0
 8002d36:	4689      	mov	r9, r1
                 time_ms, delay_effect.feedback, delay_effect.mix, delay_effect.tone);
 8002d38:	4b49      	ldr	r3, [pc, #292]	@ (8002e60 <Parse_UART_Command+0x8e8>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
        snprintf(uart_tx_buffer, UART_TX_BUFFER_SIZE,
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fc2b 	bl	8000598 <__aeabi_f2d>
 8002d42:	4682      	mov	sl, r0
 8002d44:	468b      	mov	fp, r1
                 time_ms, delay_effect.feedback, delay_effect.mix, delay_effect.tone);
 8002d46:	4b46      	ldr	r3, [pc, #280]	@ (8002e60 <Parse_UART_Command+0x8e8>)
 8002d48:	68db      	ldr	r3, [r3, #12]
        snprintf(uart_tx_buffer, UART_TX_BUFFER_SIZE,
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fc24 	bl	8000598 <__aeabi_f2d>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002d58:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002d5c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002d60:	e9cd 4500 	strd	r4, r5, [sp]
 8002d64:	4a40      	ldr	r2, [pc, #256]	@ (8002e68 <Parse_UART_Command+0x8f0>)
 8002d66:	2180      	movs	r1, #128	@ 0x80
 8002d68:	4840      	ldr	r0, [pc, #256]	@ (8002e6c <Parse_UART_Command+0x8f4>)
 8002d6a:	f007 fddb 	bl	800a924 <sniprintf>
        if (HAL_UART_Transmit_IT(&huart3, (uint8_t*)uart_tx_buffer, strlen(uart_tx_buffer)) != HAL_OK)
 8002d6e:	483f      	ldr	r0, [pc, #252]	@ (8002e6c <Parse_UART_Command+0x8f4>)
 8002d70:	f7fd fa56 	bl	8000220 <strlen>
 8002d74:	4603      	mov	r3, r0
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	493c      	ldr	r1, [pc, #240]	@ (8002e6c <Parse_UART_Command+0x8f4>)
 8002d7c:	483c      	ldr	r0, [pc, #240]	@ (8002e70 <Parse_UART_Command+0x8f8>)
 8002d7e:	f004 fc15 	bl	80075ac <HAL_UART_Transmit_IT>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 81b2 	beq.w	80030ee <Parse_UART_Command+0xb76>
        {
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_tx_buffer, strlen(uart_tx_buffer), 100);
 8002d8a:	4838      	ldr	r0, [pc, #224]	@ (8002e6c <Parse_UART_Command+0x8f4>)
 8002d8c:	f7fd fa48 	bl	8000220 <strlen>
 8002d90:	4603      	mov	r3, r0
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	2364      	movs	r3, #100	@ 0x64
 8002d96:	4935      	ldr	r1, [pc, #212]	@ (8002e6c <Parse_UART_Command+0x8f4>)
 8002d98:	4835      	ldr	r0, [pc, #212]	@ (8002e70 <Parse_UART_Command+0x8f8>)
 8002d9a:	f004 fb79 	bl	8007490 <HAL_UART_Transmit>
 8002d9e:	e1a6      	b.n	80030ee <Parse_UART_Command+0xb76>
        }
      }
    }
  }
  else if (strncmp(cmd, "GATE:", 5) == 0)
 8002da0:	2205      	movs	r2, #5
 8002da2:	4934      	ldr	r1, [pc, #208]	@ (8002e74 <Parse_UART_Command+0x8fc>)
 8002da4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002da6:	f007 fe3e 	bl	800aa26 <strncmp>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f040 8166 	bne.w	800307e <Parse_UART_Command+0xb06>
  {
    if (strncmp(cmd + 5, "ON", 2) == 0)
 8002db2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002db4:	3305      	adds	r3, #5
 8002db6:	2202      	movs	r2, #2
 8002db8:	492f      	ldr	r1, [pc, #188]	@ (8002e78 <Parse_UART_Command+0x900>)
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f007 fe33 	bl	800aa26 <strncmp>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d120      	bne.n	8002e08 <Parse_UART_Command+0x890>
    {
      noise_gate.enabled = 1;
 8002dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e7c <Parse_UART_Command+0x904>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	741a      	strb	r2, [r3, #16]
      command_received = 1;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
      const char *msg = "ACK:GATE=ON\n";
 8002dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e80 <Parse_UART_Command+0x908>)
 8002dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
      if (HAL_UART_Transmit_IT(&huart3, (uint8_t*)msg, strlen(msg)) != HAL_OK)
 8002dd6:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002dd8:	f7fd fa22 	bl	8000220 <strlen>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002de4:	4822      	ldr	r0, [pc, #136]	@ (8002e70 <Parse_UART_Command+0x8f8>)
 8002de6:	f004 fbe1 	bl	80075ac <HAL_UART_Transmit_IT>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 817e 	beq.w	80030ee <Parse_UART_Command+0xb76>
      {
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 100);
 8002df2:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002df4:	f7fd fa14 	bl	8000220 <strlen>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	2364      	movs	r3, #100	@ 0x64
 8002dfe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e00:	481b      	ldr	r0, [pc, #108]	@ (8002e70 <Parse_UART_Command+0x8f8>)
 8002e02:	f004 fb45 	bl	8007490 <HAL_UART_Transmit>
 8002e06:	e172      	b.n	80030ee <Parse_UART_Command+0xb76>
      }
    }
    else if (strncmp(cmd + 5, "OFF", 3) == 0)
 8002e08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e0a:	3305      	adds	r3, #5
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	491d      	ldr	r1, [pc, #116]	@ (8002e84 <Parse_UART_Command+0x90c>)
 8002e10:	4618      	mov	r0, r3
 8002e12:	f007 fe08 	bl	800aa26 <strncmp>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d137      	bne.n	8002e8c <Parse_UART_Command+0x914>
    {
      noise_gate.enabled = 0;
 8002e1c:	4b17      	ldr	r3, [pc, #92]	@ (8002e7c <Parse_UART_Command+0x904>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	741a      	strb	r2, [r3, #16]
      command_received = 1;
 8002e22:	2301      	movs	r3, #1
 8002e24:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
      const char *msg = "ACK:GATE=OFF\n";
 8002e28:	4b17      	ldr	r3, [pc, #92]	@ (8002e88 <Parse_UART_Command+0x910>)
 8002e2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
      if (HAL_UART_Transmit_IT(&huart3, (uint8_t*)msg, strlen(msg)) != HAL_OK)
 8002e2c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002e2e:	f7fd f9f7 	bl	8000220 <strlen>
 8002e32:	4603      	mov	r3, r0
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002e3a:	480d      	ldr	r0, [pc, #52]	@ (8002e70 <Parse_UART_Command+0x8f8>)
 8002e3c:	f004 fbb6 	bl	80075ac <HAL_UART_Transmit_IT>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 8153 	beq.w	80030ee <Parse_UART_Command+0xb76>
      {
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 100);
 8002e48:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002e4a:	f7fd f9e9 	bl	8000220 <strlen>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	2364      	movs	r3, #100	@ 0x64
 8002e54:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002e56:	4806      	ldr	r0, [pc, #24]	@ (8002e70 <Parse_UART_Command+0x8f8>)
 8002e58:	f004 fb1a 	bl	8007490 <HAL_UART_Transmit>
 8002e5c:	e147      	b.n	80030ee <Parse_UART_Command+0xb76>
 8002e5e:	bf00      	nop
 8002e60:	2000001c 	.word	0x2000001c
 8002e64:	3f733333 	.word	0x3f733333
 8002e68:	0800cc3c 	.word	0x0800cc3c
 8002e6c:	20004f8c 	.word	0x20004f8c
 8002e70:	200051ac 	.word	0x200051ac
 8002e74:	0800cc5c 	.word	0x0800cc5c
 8002e78:	0800cbd0 	.word	0x0800cbd0
 8002e7c:	20000034 	.word	0x20000034
 8002e80:	0800cc64 	.word	0x0800cc64
 8002e84:	0800cbe0 	.word	0x0800cbe0
 8002e88:	0800cc74 	.word	0x0800cc74
      }
    }
    else
    {
      char params[UART_RX_BUFFER_SIZE];
      strncpy(params, cmd + 5, sizeof(params));
 8002e8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e8e:	1d59      	adds	r1, r3, #5
 8002e90:	1d3b      	adds	r3, r7, #4
 8002e92:	2240      	movs	r2, #64	@ 0x40
 8002e94:	4618      	mov	r0, r3
 8002e96:	f007 fdd8 	bl	800aa4a <strncpy>
      params[sizeof(params) - 1] = '\0';
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

      char *saveptr = NULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	647b      	str	r3, [r7, #68]	@ 0x44
      char *token = strtok_r(params, ",", &saveptr);
 8002ea4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8002ea8:	1d3b      	adds	r3, r7, #4
 8002eaa:	499b      	ldr	r1, [pc, #620]	@ (8003118 <Parse_UART_Command+0xba0>)
 8002eac:	4618      	mov	r0, r3
 8002eae:	f007 fe07 	bl	800aac0 <strtok_r>
 8002eb2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
      uint8_t parsed = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
      float threshold = noise_gate.threshold;
 8002ebc:	4b97      	ldr	r3, [pc, #604]	@ (800311c <Parse_UART_Command+0xba4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      float attack = noise_gate.attack_time;
 8002ec2:	4b96      	ldr	r3, [pc, #600]	@ (800311c <Parse_UART_Command+0xba4>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	67bb      	str	r3, [r7, #120]	@ 0x78
      float release = noise_gate.release_time;
 8002ec8:	4b94      	ldr	r3, [pc, #592]	@ (800311c <Parse_UART_Command+0xba4>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	677b      	str	r3, [r7, #116]	@ 0x74

      if (token)
 8002ece:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d019      	beq.n	8002f0a <Parse_UART_Command+0x992>
      {
        threshold = atof(token);
 8002ed6:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002eda:	f006 fdc5 	bl	8009a68 <atof>
 8002ede:	ec53 2b10 	vmov	r2, r3, d0
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f7fd fe69 	bl	8000bbc <__aeabi_d2f>
 8002eea:	4603      	mov	r3, r0
 8002eec:	67fb      	str	r3, [r7, #124]	@ 0x7c
        parsed++;
 8002eee:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
        token = strtok_r(NULL, ",", &saveptr);
 8002ef8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002efc:	461a      	mov	r2, r3
 8002efe:	4986      	ldr	r1, [pc, #536]	@ (8003118 <Parse_UART_Command+0xba0>)
 8002f00:	2000      	movs	r0, #0
 8002f02:	f007 fddd 	bl	800aac0 <strtok_r>
 8002f06:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
      }
      if (token)
 8002f0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d019      	beq.n	8002f46 <Parse_UART_Command+0x9ce>
      {
        attack = atof(token);
 8002f12:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002f16:	f006 fda7 	bl	8009a68 <atof>
 8002f1a:	ec53 2b10 	vmov	r2, r3, d0
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	f7fd fe4b 	bl	8000bbc <__aeabi_d2f>
 8002f26:	4603      	mov	r3, r0
 8002f28:	67bb      	str	r3, [r7, #120]	@ 0x78
        parsed++;
 8002f2a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
        token = strtok_r(NULL, ",", &saveptr);
 8002f34:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4977      	ldr	r1, [pc, #476]	@ (8003118 <Parse_UART_Command+0xba0>)
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f007 fdbf 	bl	800aac0 <strtok_r>
 8002f42:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
      }
      if (token)
 8002f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d010      	beq.n	8002f70 <Parse_UART_Command+0x9f8>
      {
        release = atof(token);
 8002f4e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002f52:	f006 fd89 	bl	8009a68 <atof>
 8002f56:	ec53 2b10 	vmov	r2, r3, d0
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f7fd fe2d 	bl	8000bbc <__aeabi_d2f>
 8002f62:	4603      	mov	r3, r0
 8002f64:	677b      	str	r3, [r7, #116]	@ 0x74
        parsed++;
 8002f66:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
      }

      if (parsed >= 1)
 8002f70:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 80ba 	beq.w	80030ee <Parse_UART_Command+0xb76>
      {
        if (threshold >= 0.001f && threshold <= 0.5f) noise_gate.threshold = threshold;
 8002f7a:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8002f7e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8003120 <Parse_UART_Command+0xba8>
 8002f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8a:	db0b      	blt.n	8002fa4 <Parse_UART_Command+0xa2c>
 8002f8c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8002f90:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9c:	d802      	bhi.n	8002fa4 <Parse_UART_Command+0xa2c>
 8002f9e:	4a5f      	ldr	r2, [pc, #380]	@ (800311c <Parse_UART_Command+0xba4>)
 8002fa0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fa2:	6013      	str	r3, [r2, #0]
        if (parsed >= 2 && attack >= 0.0001f && attack <= 0.1f) noise_gate.attack_time = attack;
 8002fa4:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d914      	bls.n	8002fd6 <Parse_UART_Command+0xa5e>
 8002fac:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8002fb0:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8003124 <Parse_UART_Command+0xbac>
 8002fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fbc:	db0b      	blt.n	8002fd6 <Parse_UART_Command+0xa5e>
 8002fbe:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8002fc2:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003128 <Parse_UART_Command+0xbb0>
 8002fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fce:	d802      	bhi.n	8002fd6 <Parse_UART_Command+0xa5e>
 8002fd0:	4a52      	ldr	r2, [pc, #328]	@ (800311c <Parse_UART_Command+0xba4>)
 8002fd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fd4:	6053      	str	r3, [r2, #4]
        if (parsed >= 3 && release >= 0.01f && release <= 1.0f) noise_gate.release_time = release;
 8002fd6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d914      	bls.n	8003008 <Parse_UART_Command+0xa90>
 8002fde:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002fe2:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800312c <Parse_UART_Command+0xbb4>
 8002fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fee:	db0b      	blt.n	8003008 <Parse_UART_Command+0xa90>
 8002ff0:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002ff4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003000:	d802      	bhi.n	8003008 <Parse_UART_Command+0xa90>
 8003002:	4a46      	ldr	r2, [pc, #280]	@ (800311c <Parse_UART_Command+0xba4>)
 8003004:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003006:	6093      	str	r3, [r2, #8]

        command_received = 1;
 8003008:	2301      	movs	r3, #1
 800300a:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
        snprintf(uart_tx_buffer, UART_TX_BUFFER_SIZE,
                 "ACK:GATE=%.3f,%.4f,%.2f\n",
                 noise_gate.threshold, noise_gate.attack_time, noise_gate.release_time);
 800300e:	4b43      	ldr	r3, [pc, #268]	@ (800311c <Parse_UART_Command+0xba4>)
 8003010:	681b      	ldr	r3, [r3, #0]
        snprintf(uart_tx_buffer, UART_TX_BUFFER_SIZE,
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fac0 	bl	8000598 <__aeabi_f2d>
 8003018:	4604      	mov	r4, r0
 800301a:	460d      	mov	r5, r1
                 noise_gate.threshold, noise_gate.attack_time, noise_gate.release_time);
 800301c:	4b3f      	ldr	r3, [pc, #252]	@ (800311c <Parse_UART_Command+0xba4>)
 800301e:	685b      	ldr	r3, [r3, #4]
        snprintf(uart_tx_buffer, UART_TX_BUFFER_SIZE,
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd fab9 	bl	8000598 <__aeabi_f2d>
 8003026:	4680      	mov	r8, r0
 8003028:	4689      	mov	r9, r1
                 noise_gate.threshold, noise_gate.attack_time, noise_gate.release_time);
 800302a:	4b3c      	ldr	r3, [pc, #240]	@ (800311c <Parse_UART_Command+0xba4>)
 800302c:	689b      	ldr	r3, [r3, #8]
        snprintf(uart_tx_buffer, UART_TX_BUFFER_SIZE,
 800302e:	4618      	mov	r0, r3
 8003030:	f7fd fab2 	bl	8000598 <__aeabi_f2d>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800303c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003040:	e9cd 4500 	strd	r4, r5, [sp]
 8003044:	4a3a      	ldr	r2, [pc, #232]	@ (8003130 <Parse_UART_Command+0xbb8>)
 8003046:	2180      	movs	r1, #128	@ 0x80
 8003048:	483a      	ldr	r0, [pc, #232]	@ (8003134 <Parse_UART_Command+0xbbc>)
 800304a:	f007 fc6b 	bl	800a924 <sniprintf>
        if (HAL_UART_Transmit_IT(&huart3, (uint8_t*)uart_tx_buffer, strlen(uart_tx_buffer)) != HAL_OK)
 800304e:	4839      	ldr	r0, [pc, #228]	@ (8003134 <Parse_UART_Command+0xbbc>)
 8003050:	f7fd f8e6 	bl	8000220 <strlen>
 8003054:	4603      	mov	r3, r0
 8003056:	b29b      	uxth	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	4936      	ldr	r1, [pc, #216]	@ (8003134 <Parse_UART_Command+0xbbc>)
 800305c:	4836      	ldr	r0, [pc, #216]	@ (8003138 <Parse_UART_Command+0xbc0>)
 800305e:	f004 faa5 	bl	80075ac <HAL_UART_Transmit_IT>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d042      	beq.n	80030ee <Parse_UART_Command+0xb76>
        {
          HAL_UART_Transmit(&huart3, (uint8_t*)uart_tx_buffer, strlen(uart_tx_buffer), 100);
 8003068:	4832      	ldr	r0, [pc, #200]	@ (8003134 <Parse_UART_Command+0xbbc>)
 800306a:	f7fd f8d9 	bl	8000220 <strlen>
 800306e:	4603      	mov	r3, r0
 8003070:	b29a      	uxth	r2, r3
 8003072:	2364      	movs	r3, #100	@ 0x64
 8003074:	492f      	ldr	r1, [pc, #188]	@ (8003134 <Parse_UART_Command+0xbbc>)
 8003076:	4830      	ldr	r0, [pc, #192]	@ (8003138 <Parse_UART_Command+0xbc0>)
 8003078:	f004 fa0a 	bl	8007490 <HAL_UART_Transmit>
 800307c:	e037      	b.n	80030ee <Parse_UART_Command+0xb76>
        }
      }
    }
  }
  else if (strncmp(cmd, "STATUS", 6) == 0)
 800307e:	2206      	movs	r2, #6
 8003080:	492e      	ldr	r1, [pc, #184]	@ (800313c <Parse_UART_Command+0xbc4>)
 8003082:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003084:	f007 fccf 	bl	800aa26 <strncmp>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d12f      	bne.n	80030ee <Parse_UART_Command+0xb76>
  {
    snprintf(uart_tx_buffer, UART_TX_BUFFER_SIZE,
 800308e:	4b2c      	ldr	r3, [pc, #176]	@ (8003140 <Parse_UART_Command+0xbc8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd fa80 	bl	8000598 <__aeabi_f2d>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
             "VOL:%.2f,OVR:%d,DLY:%d,GATE:%d\n",
             output_volume, overdrive.enabled, delay_effect.enabled, noise_gate.enabled);
 800309c:	4929      	ldr	r1, [pc, #164]	@ (8003144 <Parse_UART_Command+0xbcc>)
 800309e:	7c49      	ldrb	r1, [r1, #17]
    snprintf(uart_tx_buffer, UART_TX_BUFFER_SIZE,
 80030a0:	4608      	mov	r0, r1
             output_volume, overdrive.enabled, delay_effect.enabled, noise_gate.enabled);
 80030a2:	4929      	ldr	r1, [pc, #164]	@ (8003148 <Parse_UART_Command+0xbd0>)
 80030a4:	7c09      	ldrb	r1, [r1, #16]
    snprintf(uart_tx_buffer, UART_TX_BUFFER_SIZE,
 80030a6:	460c      	mov	r4, r1
             output_volume, overdrive.enabled, delay_effect.enabled, noise_gate.enabled);
 80030a8:	491c      	ldr	r1, [pc, #112]	@ (800311c <Parse_UART_Command+0xba4>)
 80030aa:	7c09      	ldrb	r1, [r1, #16]
    snprintf(uart_tx_buffer, UART_TX_BUFFER_SIZE,
 80030ac:	9104      	str	r1, [sp, #16]
 80030ae:	9403      	str	r4, [sp, #12]
 80030b0:	9002      	str	r0, [sp, #8]
 80030b2:	e9cd 2300 	strd	r2, r3, [sp]
 80030b6:	4a25      	ldr	r2, [pc, #148]	@ (800314c <Parse_UART_Command+0xbd4>)
 80030b8:	2180      	movs	r1, #128	@ 0x80
 80030ba:	481e      	ldr	r0, [pc, #120]	@ (8003134 <Parse_UART_Command+0xbbc>)
 80030bc:	f007 fc32 	bl	800a924 <sniprintf>
    if (HAL_UART_Transmit_IT(&huart3, (uint8_t*)uart_tx_buffer, strlen(uart_tx_buffer)) != HAL_OK)
 80030c0:	481c      	ldr	r0, [pc, #112]	@ (8003134 <Parse_UART_Command+0xbbc>)
 80030c2:	f7fd f8ad 	bl	8000220 <strlen>
 80030c6:	4603      	mov	r3, r0
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	4919      	ldr	r1, [pc, #100]	@ (8003134 <Parse_UART_Command+0xbbc>)
 80030ce:	481a      	ldr	r0, [pc, #104]	@ (8003138 <Parse_UART_Command+0xbc0>)
 80030d0:	f004 fa6c 	bl	80075ac <HAL_UART_Transmit_IT>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d009      	beq.n	80030ee <Parse_UART_Command+0xb76>
    {
      HAL_UART_Transmit(&huart3, (uint8_t*)uart_tx_buffer, strlen(uart_tx_buffer), 100);
 80030da:	4816      	ldr	r0, [pc, #88]	@ (8003134 <Parse_UART_Command+0xbbc>)
 80030dc:	f7fd f8a0 	bl	8000220 <strlen>
 80030e0:	4603      	mov	r3, r0
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	2364      	movs	r3, #100	@ 0x64
 80030e6:	4913      	ldr	r1, [pc, #76]	@ (8003134 <Parse_UART_Command+0xbbc>)
 80030e8:	4813      	ldr	r0, [pc, #76]	@ (8003138 <Parse_UART_Command+0xbc0>)
 80030ea:	f004 f9d1 	bl	8007490 <HAL_UART_Transmit>
    }
  }

  if (command_received)
 80030ee:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <Parse_UART_Command+0xb84>
  {
    command_blink_counter = 6;
 80030f6:	4b16      	ldr	r3, [pc, #88]	@ (8003150 <Parse_UART_Command+0xbd8>)
 80030f8:	2206      	movs	r2, #6
 80030fa:	701a      	strb	r2, [r3, #0]
  }

  memset(uart_rx_buffer, 0, UART_RX_BUFFER_SIZE);
 80030fc:	2240      	movs	r2, #64	@ 0x40
 80030fe:	2100      	movs	r1, #0
 8003100:	4814      	ldr	r0, [pc, #80]	@ (8003154 <Parse_UART_Command+0xbdc>)
 8003102:	f007 fc88 	bl	800aa16 <memset>
  uart_rx_index = 0;
 8003106:	4b14      	ldr	r3, [pc, #80]	@ (8003158 <Parse_UART_Command+0xbe0>)
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
}
 800310c:	bf00      	nop
 800310e:	37c0      	adds	r7, #192	@ 0xc0
 8003110:	46bd      	mov	sp, r7
 8003112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003116:	bf00      	nop
 8003118:	0800cbf4 	.word	0x0800cbf4
 800311c:	20000034 	.word	0x20000034
 8003120:	3a83126f 	.word	0x3a83126f
 8003124:	38d1b717 	.word	0x38d1b717
 8003128:	3dcccccd 	.word	0x3dcccccd
 800312c:	3c23d70a 	.word	0x3c23d70a
 8003130:	0800cc84 	.word	0x0800cc84
 8003134:	20004f8c 	.word	0x20004f8c
 8003138:	200051ac 	.word	0x200051ac
 800313c:	0800cca0 	.word	0x0800cca0
 8003140:	20000050 	.word	0x20000050
 8003144:	20000000 	.word	0x20000000
 8003148:	2000001c 	.word	0x2000001c
 800314c:	0800cca8 	.word	0x0800cca8
 8003150:	2000500d 	.word	0x2000500d
 8003154:	20004f4c 	.word	0x20004f4c
 8003158:	2000500c 	.word	0x2000500c

0800315c <HAL_UART_RxCpltCallback>:
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_tx_buffer, strlen(uart_tx_buffer), 100);
  }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1a      	ldr	r2, [pc, #104]	@ (80031d4 <HAL_UART_RxCpltCallback+0x78>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d12d      	bne.n	80031ca <HAL_UART_RxCpltCallback+0x6e>
  {
    if (uart_rx_byte == '\n' || uart_rx_byte == '\r')
 800316e:	4b1a      	ldr	r3, [pc, #104]	@ (80031d8 <HAL_UART_RxCpltCallback+0x7c>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b0a      	cmp	r3, #10
 8003174:	d003      	beq.n	800317e <HAL_UART_RxCpltCallback+0x22>
 8003176:	4b18      	ldr	r3, [pc, #96]	@ (80031d8 <HAL_UART_RxCpltCallback+0x7c>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b0d      	cmp	r3, #13
 800317c:	d10f      	bne.n	800319e <HAL_UART_RxCpltCallback+0x42>
    {
      if (uart_rx_index > 0)
 800317e:	4b17      	ldr	r3, [pc, #92]	@ (80031dc <HAL_UART_RxCpltCallback+0x80>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01b      	beq.n	80031c0 <HAL_UART_RxCpltCallback+0x64>
      {
        uart_rx_buffer[uart_rx_index] = '\0';
 8003188:	4b14      	ldr	r3, [pc, #80]	@ (80031dc <HAL_UART_RxCpltCallback+0x80>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	4b13      	ldr	r3, [pc, #76]	@ (80031e0 <HAL_UART_RxCpltCallback+0x84>)
 8003192:	2100      	movs	r1, #0
 8003194:	5499      	strb	r1, [r3, r2]
        uart_command_ready = 1;
 8003196:	4b13      	ldr	r3, [pc, #76]	@ (80031e4 <HAL_UART_RxCpltCallback+0x88>)
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
      if (uart_rx_index > 0)
 800319c:	e010      	b.n	80031c0 <HAL_UART_RxCpltCallback+0x64>
      }
    }
    else if (uart_rx_index < UART_RX_BUFFER_SIZE - 1)
 800319e:	4b0f      	ldr	r3, [pc, #60]	@ (80031dc <HAL_UART_RxCpltCallback+0x80>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80031a6:	d80b      	bhi.n	80031c0 <HAL_UART_RxCpltCallback+0x64>
    {
      uart_rx_buffer[uart_rx_index++] = uart_rx_byte;
 80031a8:	4b0c      	ldr	r3, [pc, #48]	@ (80031dc <HAL_UART_RxCpltCallback+0x80>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	b2d1      	uxtb	r1, r2
 80031b2:	4a0a      	ldr	r2, [pc, #40]	@ (80031dc <HAL_UART_RxCpltCallback+0x80>)
 80031b4:	7011      	strb	r1, [r2, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	4b07      	ldr	r3, [pc, #28]	@ (80031d8 <HAL_UART_RxCpltCallback+0x7c>)
 80031ba:	7819      	ldrb	r1, [r3, #0]
 80031bc:	4b08      	ldr	r3, [pc, #32]	@ (80031e0 <HAL_UART_RxCpltCallback+0x84>)
 80031be:	5499      	strb	r1, [r3, r2]
    }
    HAL_UART_Receive_IT(&huart3, &uart_rx_byte, 1);
 80031c0:	2201      	movs	r2, #1
 80031c2:	4905      	ldr	r1, [pc, #20]	@ (80031d8 <HAL_UART_RxCpltCallback+0x7c>)
 80031c4:	4808      	ldr	r0, [pc, #32]	@ (80031e8 <HAL_UART_RxCpltCallback+0x8c>)
 80031c6:	f004 fa85 	bl	80076d4 <HAL_UART_Receive_IT>
  }
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40004800 	.word	0x40004800
 80031d8:	2000500e 	.word	0x2000500e
 80031dc:	2000500c 	.word	0x2000500c
 80031e0:	20004f4c 	.word	0x20004f4c
 80031e4:	2000500f 	.word	0x2000500f
 80031e8:	200051ac 	.word	0x200051ac

080031ec <HAL_UART_TxCpltCallback>:
 * Disabled: TX callback LED blinks were causing spurious LED activity
 * when powered via USB (likely from noise/enumeration signals).
 * Keeping callback present but empty for future diagnostics if needed.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
  {
    /* TX complete - no action */
  }
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_UART_ErrorCallback>:
 * @brief Called on UART error (useful for diagnostics)
 * Disabled: Error callback LED blinks were causing spurious LED activity
 * when powered via USB. Keeping callback present but empty for future use.
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
  {
    /* UART error - no action for now */
  }
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003214:	480d      	ldr	r0, [pc, #52]	@ (800324c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003216:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003218:	f7ff f99c 	bl	8002554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800321c:	480c      	ldr	r0, [pc, #48]	@ (8003250 <LoopForever+0x6>)
  ldr r1, =_edata
 800321e:	490d      	ldr	r1, [pc, #52]	@ (8003254 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003220:	4a0d      	ldr	r2, [pc, #52]	@ (8003258 <LoopForever+0xe>)
  movs r3, #0
 8003222:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003224:	e002      	b.n	800322c <LoopCopyDataInit>

08003226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800322a:	3304      	adds	r3, #4

0800322c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800322c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800322e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003230:	d3f9      	bcc.n	8003226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003232:	4a0a      	ldr	r2, [pc, #40]	@ (800325c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003234:	4c0a      	ldr	r4, [pc, #40]	@ (8003260 <LoopForever+0x16>)
  movs r3, #0
 8003236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003238:	e001      	b.n	800323e <LoopFillZerobss>

0800323a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800323a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800323c:	3204      	adds	r2, #4

0800323e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800323e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003240:	d3fb      	bcc.n	800323a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003242:	f007 fc8d 	bl	800ab60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003246:	f7fe fc3d 	bl	8001ac4 <main>

0800324a <LoopForever>:

LoopForever:
    b LoopForever
 800324a:	e7fe      	b.n	800324a <LoopForever>
  ldr   r0, =_estack
 800324c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003254:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8003258:	0800d0d8 	.word	0x0800d0d8
  ldr r2, =_sbss
 800325c:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8003260:	20005394 	.word	0x20005394

08003264 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003264:	e7fe      	b.n	8003264 <ADC1_2_IRQHandler>

08003266 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b082      	sub	sp, #8
 800326a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003270:	2003      	movs	r0, #3
 8003272:	f001 fd8b 	bl	8004d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003276:	200f      	movs	r0, #15
 8003278:	f000 f80e 	bl	8003298 <HAL_InitTick>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	71fb      	strb	r3, [r7, #7]
 8003286:	e001      	b.n	800328c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003288:	f7fe feb0 	bl	8001fec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800328c:	79fb      	ldrb	r3, [r7, #7]

}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80032a4:	4b16      	ldr	r3, [pc, #88]	@ (8003300 <HAL_InitTick+0x68>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d022      	beq.n	80032f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80032ac:	4b15      	ldr	r3, [pc, #84]	@ (8003304 <HAL_InitTick+0x6c>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4b13      	ldr	r3, [pc, #76]	@ (8003300 <HAL_InitTick+0x68>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80032b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80032bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c0:	4618      	mov	r0, r3
 80032c2:	f001 fd96 	bl	8004df2 <HAL_SYSTICK_Config>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10f      	bne.n	80032ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b0f      	cmp	r3, #15
 80032d0:	d809      	bhi.n	80032e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032d2:	2200      	movs	r2, #0
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	f04f 30ff 	mov.w	r0, #4294967295
 80032da:	f001 fd62 	bl	8004da2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032de:	4a0a      	ldr	r2, [pc, #40]	@ (8003308 <HAL_InitTick+0x70>)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	e007      	b.n	80032f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
 80032ea:	e004      	b.n	80032f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
 80032f0:	e001      	b.n	80032f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	2000005c 	.word	0x2000005c
 8003304:	20000054 	.word	0x20000054
 8003308:	20000058 	.word	0x20000058

0800330c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003310:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <HAL_IncTick+0x1c>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b05      	ldr	r3, [pc, #20]	@ (800332c <HAL_IncTick+0x20>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4413      	add	r3, r2
 800331a:	4a03      	ldr	r2, [pc, #12]	@ (8003328 <HAL_IncTick+0x1c>)
 800331c:	6013      	str	r3, [r2, #0]
}
 800331e:	bf00      	nop
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	20005244 	.word	0x20005244
 800332c:	2000005c 	.word	0x2000005c

08003330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return uwTick;
 8003334:	4b03      	ldr	r3, [pc, #12]	@ (8003344 <HAL_GetTick+0x14>)
 8003336:	681b      	ldr	r3, [r3, #0]
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	20005244 	.word	0x20005244

08003348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003350:	f7ff ffee 	bl	8003330 <HAL_GetTick>
 8003354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003360:	d004      	beq.n	800336c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003362:	4b09      	ldr	r3, [pc, #36]	@ (8003388 <HAL_Delay+0x40>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4413      	add	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800336c:	bf00      	nop
 800336e:	f7ff ffdf 	bl	8003330 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	429a      	cmp	r2, r3
 800337c:	d8f7      	bhi.n	800336e <HAL_Delay+0x26>
  {
  }
}
 800337e:	bf00      	nop
 8003380:	bf00      	nop
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	2000005c 	.word	0x2000005c

0800338c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	609a      	str	r2, [r3, #8]
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	609a      	str	r2, [r3, #8]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3360      	adds	r3, #96	@ 0x60
 8003406:	461a      	mov	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	4b08      	ldr	r3, [pc, #32]	@ (8003438 <LL_ADC_SetOffset+0x44>)
 8003416:	4013      	ands	r3, r2
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	4313      	orrs	r3, r2
 8003424:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800342c:	bf00      	nop
 800342e:	371c      	adds	r7, #28
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	03fff000 	.word	0x03fff000

0800343c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3360      	adds	r3, #96	@ 0x60
 800344a:	461a      	mov	r2, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003468:	b480      	push	{r7}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3360      	adds	r3, #96	@ 0x60
 8003478:	461a      	mov	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	431a      	orrs	r2, r3
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800349e:	b480      	push	{r7}
 80034a0:	b087      	sub	sp, #28
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	3360      	adds	r3, #96	@ 0x60
 80034ae:	461a      	mov	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80034c8:	bf00      	nop
 80034ca:	371c      	adds	r7, #28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	3360      	adds	r3, #96	@ 0x60
 80034e4:	461a      	mov	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	431a      	orrs	r2, r3
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80034fe:	bf00      	nop
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	615a      	str	r2, [r3, #20]
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003556:	b480      	push	{r7}
 8003558:	b087      	sub	sp, #28
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	3330      	adds	r3, #48	@ 0x30
 8003566:	461a      	mov	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	0a1b      	lsrs	r3, r3, #8
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	4413      	add	r3, r2
 8003574:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	211f      	movs	r1, #31
 8003582:	fa01 f303 	lsl.w	r3, r1, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	401a      	ands	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	0e9b      	lsrs	r3, r3, #26
 800358e:	f003 011f 	and.w	r1, r3, #31
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	fa01 f303 	lsl.w	r3, r1, r3
 800359c:	431a      	orrs	r2, r3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b087      	sub	sp, #28
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	3314      	adds	r3, #20
 80035be:	461a      	mov	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	0e5b      	lsrs	r3, r3, #25
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	4413      	add	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	0d1b      	lsrs	r3, r3, #20
 80035d6:	f003 031f 	and.w	r3, r3, #31
 80035da:	2107      	movs	r1, #7
 80035dc:	fa01 f303 	lsl.w	r3, r1, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	401a      	ands	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	0d1b      	lsrs	r3, r3, #20
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	431a      	orrs	r2, r3
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80035f8:	bf00      	nop
 80035fa:	371c      	adds	r7, #28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361c:	43db      	mvns	r3, r3
 800361e:	401a      	ands	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f003 0318 	and.w	r3, r3, #24
 8003626:	4908      	ldr	r1, [pc, #32]	@ (8003648 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003628:	40d9      	lsrs	r1, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	400b      	ands	r3, r1
 800362e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003632:	431a      	orrs	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	0007ffff 	.word	0x0007ffff

0800364c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 031f 	and.w	r3, r3, #31
}
 800365c:	4618      	mov	r0, r3
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003678:	4618      	mov	r0, r3
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003694:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6093      	str	r3, [r2, #8]
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036bc:	d101      	bne.n	80036c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80036e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003708:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800370c:	d101      	bne.n	8003712 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003730:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003734:	f043 0201 	orr.w	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003758:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800375c:	f043 0202 	orr.w	r2, r3, #2
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <LL_ADC_IsEnabled+0x18>
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <LL_ADC_IsEnabled+0x1a>
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d101      	bne.n	80037ae <LL_ADC_IsDisableOngoing+0x18>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <LL_ADC_IsDisableOngoing+0x1a>
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037d0:	f043 0204 	orr.w	r2, r3, #4
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037f8:	f043 0210 	orr.w	r2, r3, #16
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b04      	cmp	r3, #4
 800381e:	d101      	bne.n	8003824 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003842:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003846:	f043 0220 	orr.w	r2, r3, #32
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b08      	cmp	r3, #8
 800386c:	d101      	bne.n	8003872 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b089      	sub	sp, #36	@ 0x24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e167      	b.n	8003b6a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d109      	bne.n	80038bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7fe fbc3 	bl	8002034 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fef1 	bl	80036a8 <LL_ADC_IsDeepPowerDownEnabled>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d004      	beq.n	80038d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff fed7 	bl	8003684 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff ff0c 	bl	80036f8 <LL_ADC_IsInternalRegulatorEnabled>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d115      	bne.n	8003912 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff fef0 	bl	80036d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038f0:	4ba0      	ldr	r3, [pc, #640]	@ (8003b74 <HAL_ADC_Init+0x2f4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	099b      	lsrs	r3, r3, #6
 80038f6:	4aa0      	ldr	r2, [pc, #640]	@ (8003b78 <HAL_ADC_Init+0x2f8>)
 80038f8:	fba2 2303 	umull	r2, r3, r2, r3
 80038fc:	099b      	lsrs	r3, r3, #6
 80038fe:	3301      	adds	r3, #1
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003904:	e002      	b.n	800390c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	3b01      	subs	r3, #1
 800390a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f9      	bne.n	8003906 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff feee 	bl	80036f8 <LL_ADC_IsInternalRegulatorEnabled>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10d      	bne.n	800393e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003926:	f043 0210 	orr.w	r2, r3, #16
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003932:	f043 0201 	orr.w	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff ff62 	bl	800380c <LL_ADC_REG_IsConversionOngoing>
 8003948:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	2b00      	cmp	r3, #0
 8003954:	f040 8100 	bne.w	8003b58 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2b00      	cmp	r3, #0
 800395c:	f040 80fc 	bne.w	8003b58 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003964:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003968:	f043 0202 	orr.w	r2, r3, #2
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fefb 	bl	8003770 <LL_ADC_IsEnabled>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d111      	bne.n	80039a4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003980:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003984:	f7ff fef4 	bl	8003770 <LL_ADC_IsEnabled>
 8003988:	4604      	mov	r4, r0
 800398a:	487c      	ldr	r0, [pc, #496]	@ (8003b7c <HAL_ADC_Init+0x2fc>)
 800398c:	f7ff fef0 	bl	8003770 <LL_ADC_IsEnabled>
 8003990:	4603      	mov	r3, r0
 8003992:	4323      	orrs	r3, r4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d105      	bne.n	80039a4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4619      	mov	r1, r3
 800399e:	4878      	ldr	r0, [pc, #480]	@ (8003b80 <HAL_ADC_Init+0x300>)
 80039a0:	f7ff fcf4 	bl	800338c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	7f5b      	ldrb	r3, [r3, #29]
 80039a8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039ae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80039b4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80039ba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039c2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d106      	bne.n	80039e0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d6:	3b01      	subs	r3, #1
 80039d8:	045b      	lsls	r3, r3, #17
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d009      	beq.n	80039fc <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ec:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	4b60      	ldr	r3, [pc, #384]	@ (8003b84 <HAL_ADC_Init+0x304>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6812      	ldr	r2, [r2, #0]
 8003a0a:	69b9      	ldr	r1, [r7, #24]
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff ff15 	bl	800385a <LL_ADC_INJ_IsConversionOngoing>
 8003a30:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d16d      	bne.n	8003b14 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d16a      	bne.n	8003b14 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a42:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a4a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a5a:	f023 0302 	bic.w	r3, r3, #2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6812      	ldr	r2, [r2, #0]
 8003a62:	69b9      	ldr	r1, [r7, #24]
 8003a64:	430b      	orrs	r3, r1
 8003a66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d017      	beq.n	8003aa0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003a7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003a88:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003a8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6911      	ldr	r1, [r2, #16]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003a9e:	e013      	b.n	8003ac8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003aae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003ac0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ac4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d118      	bne.n	8003b04 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003adc:	f023 0304 	bic.w	r3, r3, #4
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ae8:	4311      	orrs	r1, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003aee:	4311      	orrs	r1, r2
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003af4:	430a      	orrs	r2, r1
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0201 	orr.w	r2, r2, #1
 8003b00:	611a      	str	r2, [r3, #16]
 8003b02:	e007      	b.n	8003b14 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0201 	bic.w	r2, r2, #1
 8003b12:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d10c      	bne.n	8003b36 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b22:	f023 010f 	bic.w	r1, r3, #15
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	1e5a      	subs	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b34:	e007      	b.n	8003b46 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 020f 	bic.w	r2, r2, #15
 8003b44:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4a:	f023 0303 	bic.w	r3, r3, #3
 8003b4e:	f043 0201 	orr.w	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b56:	e007      	b.n	8003b68 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5c:	f043 0210 	orr.w	r2, r3, #16
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b68:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3724      	adds	r7, #36	@ 0x24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd90      	pop	{r4, r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000054 	.word	0x20000054
 8003b78:	053e2d63 	.word	0x053e2d63
 8003b7c:	50000100 	.word	0x50000100
 8003b80:	50000300 	.word	0x50000300
 8003b84:	fff04007 	.word	0xfff04007

08003b88 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b90:	4859      	ldr	r0, [pc, #356]	@ (8003cf8 <HAL_ADC_Start+0x170>)
 8003b92:	f7ff fd5b 	bl	800364c <LL_ADC_GetMultimode>
 8003b96:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff fe35 	bl	800380c <LL_ADC_REG_IsConversionOngoing>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f040 809f 	bne.w	8003ce8 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_ADC_Start+0x30>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e09a      	b.n	8003cee <HAL_ADC_Start+0x166>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fe63 	bl	800488c <ADC_Enable>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f040 8086 	bne.w	8003cde <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a44      	ldr	r2, [pc, #272]	@ (8003cfc <HAL_ADC_Start+0x174>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d002      	beq.n	8003bf6 <HAL_ADC_Start+0x6e>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	e001      	b.n	8003bfa <HAL_ADC_Start+0x72>
 8003bf6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6812      	ldr	r2, [r2, #0]
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d002      	beq.n	8003c08 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d105      	bne.n	8003c14 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c0c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c20:	d106      	bne.n	8003c30 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c26:	f023 0206 	bic.w	r2, r3, #6
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	661a      	str	r2, [r3, #96]	@ 0x60
 8003c2e:	e002      	b.n	8003c36 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	221c      	movs	r2, #28
 8003c3c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a2c      	ldr	r2, [pc, #176]	@ (8003cfc <HAL_ADC_Start+0x174>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d002      	beq.n	8003c56 <HAL_ADC_Start+0xce>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	e001      	b.n	8003c5a <HAL_ADC_Start+0xd2>
 8003c56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6812      	ldr	r2, [r2, #0]
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d008      	beq.n	8003c74 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b05      	cmp	r3, #5
 8003c6c:	d002      	beq.n	8003c74 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	2b09      	cmp	r3, #9
 8003c72:	d114      	bne.n	8003c9e <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c86:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c8a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff fd90 	bl	80037bc <LL_ADC_REG_StartConversion>
 8003c9c:	e026      	b.n	8003cec <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a13      	ldr	r2, [pc, #76]	@ (8003cfc <HAL_ADC_Start+0x174>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d002      	beq.n	8003cba <HAL_ADC_Start+0x132>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	e001      	b.n	8003cbe <HAL_ADC_Start+0x136>
 8003cba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003cbe:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00f      	beq.n	8003cec <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003cd4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cdc:	e006      	b.n	8003cec <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003ce6:	e001      	b.n	8003cec <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	50000300 	.word	0x50000300
 8003cfc:	50000100 	.word	0x50000100

08003d00 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_ADC_Stop+0x16>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e023      	b.n	8003d5e <HAL_ADC_Stop+0x5e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003d1e:	2103      	movs	r1, #3
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fcf7 	bl	8004714 <ADC_ConversionStop>
 8003d26:	4603      	mov	r3, r0
 8003d28:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d111      	bne.n	8003d54 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 fe31 	bl	8004998 <ADC_Disable>
 8003d36:	4603      	mov	r3, r0
 8003d38:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d109      	bne.n	8003d54 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d44:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	f043 0201 	orr.w	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d72:	4867      	ldr	r0, [pc, #412]	@ (8003f10 <HAL_ADC_PollForConversion+0x1a8>)
 8003d74:	f7ff fc6a 	bl	800364c <LL_ADC_GetMultimode>
 8003d78:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d102      	bne.n	8003d88 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003d82:	2308      	movs	r3, #8
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	e02a      	b.n	8003dde <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2b05      	cmp	r3, #5
 8003d92:	d002      	beq.n	8003d9a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2b09      	cmp	r3, #9
 8003d98:	d111      	bne.n	8003dbe <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dac:	f043 0220 	orr.w	r2, r3, #32
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0a6      	b.n	8003f06 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003db8:	2304      	movs	r3, #4
 8003dba:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003dbc:	e00f      	b.n	8003dde <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003dbe:	4854      	ldr	r0, [pc, #336]	@ (8003f10 <HAL_ADC_PollForConversion+0x1a8>)
 8003dc0:	f7ff fc52 	bl	8003668 <LL_ADC_GetMultiDMATransfer>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d007      	beq.n	8003dda <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dce:	f043 0220 	orr.w	r2, r3, #32
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e095      	b.n	8003f06 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003dda:	2304      	movs	r3, #4
 8003ddc:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003dde:	f7ff faa7 	bl	8003330 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003de4:	e021      	b.n	8003e2a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dec:	d01d      	beq.n	8003e2a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003dee:	f7ff fa9f 	bl	8003330 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d302      	bcc.n	8003e04 <HAL_ADC_PollForConversion+0x9c>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d112      	bne.n	8003e2a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10b      	bne.n	8003e2a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e16:	f043 0204 	orr.w	r2, r3, #4
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e06d      	b.n	8003f06 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0d6      	beq.n	8003de6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fb71 	bl	8003530 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01c      	beq.n	8003e8e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	7f5b      	ldrb	r3, [r3, #29]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d118      	bne.n	8003e8e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d111      	bne.n	8003e8e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d105      	bne.n	8003e8e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e86:	f043 0201 	orr.w	r2, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a20      	ldr	r2, [pc, #128]	@ (8003f14 <HAL_ADC_PollForConversion+0x1ac>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d002      	beq.n	8003e9e <HAL_ADC_PollForConversion+0x136>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	e001      	b.n	8003ea2 <HAL_ADC_PollForConversion+0x13a>
 8003e9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6812      	ldr	r2, [r2, #0]
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d008      	beq.n	8003ebc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d002      	beq.n	8003ebc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b09      	cmp	r3, #9
 8003eba:	d104      	bne.n	8003ec6 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	e00d      	b.n	8003ee2 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a12      	ldr	r2, [pc, #72]	@ (8003f14 <HAL_ADC_PollForConversion+0x1ac>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d002      	beq.n	8003ed6 <HAL_ADC_PollForConversion+0x16e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	e001      	b.n	8003eda <HAL_ADC_PollForConversion+0x172>
 8003ed6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003eda:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d104      	bne.n	8003ef2 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2208      	movs	r2, #8
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	e008      	b.n	8003f04 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d103      	bne.n	8003f04 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	220c      	movs	r2, #12
 8003f02:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3720      	adds	r7, #32
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	50000300 	.word	0x50000300
 8003f14:	50000100 	.word	0x50000100

08003f18 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
	...

08003f34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b0b6      	sub	sp, #216	@ 0xd8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x22>
 8003f52:	2302      	movs	r3, #2
 8003f54:	e3c8      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x7b4>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff fc52 	bl	800380c <LL_ADC_REG_IsConversionOngoing>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f040 83ad 	bne.w	80046ca <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	6859      	ldr	r1, [r3, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	f7ff faea 	bl	8003556 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff fc40 	bl	800380c <LL_ADC_REG_IsConversionOngoing>
 8003f8c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff fc60 	bl	800385a <LL_ADC_INJ_IsConversionOngoing>
 8003f9a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f040 81d9 	bne.w	800435a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f040 81d4 	bne.w	800435a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fba:	d10f      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	f7ff faf1 	bl	80035ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fa98 	bl	800350a <LL_ADC_SetSamplingTimeCommonConfig>
 8003fda:	e00e      	b.n	8003ffa <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	6819      	ldr	r1, [r3, #0]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	f7ff fae0 	bl	80035ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fa88 	bl	800350a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	08db      	lsrs	r3, r3, #3
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	2b04      	cmp	r3, #4
 800401a:	d022      	beq.n	8004062 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	6919      	ldr	r1, [r3, #16]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800402c:	f7ff f9e2 	bl	80033f4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6818      	ldr	r0, [r3, #0]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	6919      	ldr	r1, [r3, #16]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	461a      	mov	r2, r3
 800403e:	f7ff fa2e 	bl	800349e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800404e:	2b01      	cmp	r3, #1
 8004050:	d102      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x124>
 8004052:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004056:	e000      	b.n	800405a <HAL_ADC_ConfigChannel+0x126>
 8004058:	2300      	movs	r3, #0
 800405a:	461a      	mov	r2, r3
 800405c:	f7ff fa3a 	bl	80034d4 <LL_ADC_SetOffsetSaturation>
 8004060:	e17b      	b.n	800435a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2100      	movs	r1, #0
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff f9e7 	bl	800343c <LL_ADC_GetOffsetChannel>
 800406e:	4603      	mov	r3, r0
 8004070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <HAL_ADC_ConfigChannel+0x15a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2100      	movs	r1, #0
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff f9dc 	bl	800343c <LL_ADC_GetOffsetChannel>
 8004084:	4603      	mov	r3, r0
 8004086:	0e9b      	lsrs	r3, r3, #26
 8004088:	f003 021f 	and.w	r2, r3, #31
 800408c:	e01e      	b.n	80040cc <HAL_ADC_ConfigChannel+0x198>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2100      	movs	r1, #0
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff f9d1 	bl	800343c <LL_ADC_GetOffsetChannel>
 800409a:	4603      	mov	r3, r0
 800409c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80040a4:	fa93 f3a3 	rbit	r3, r3
 80040a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80040b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80040bc:	2320      	movs	r3, #32
 80040be:	e004      	b.n	80040ca <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80040c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80040c4:	fab3 f383 	clz	r3, r3
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d105      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x1b0>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	0e9b      	lsrs	r3, r3, #26
 80040de:	f003 031f 	and.w	r3, r3, #31
 80040e2:	e018      	b.n	8004116 <HAL_ADC_ConfigChannel+0x1e2>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80040f0:	fa93 f3a3 	rbit	r3, r3
 80040f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80040f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004100:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004108:	2320      	movs	r3, #32
 800410a:	e004      	b.n	8004116 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800410c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004110:	fab3 f383 	clz	r3, r3
 8004114:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004116:	429a      	cmp	r2, r3
 8004118:	d106      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2200      	movs	r2, #0
 8004120:	2100      	movs	r1, #0
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff f9a0 	bl	8003468 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2101      	movs	r1, #1
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff f984 	bl	800343c <LL_ADC_GetOffsetChannel>
 8004134:	4603      	mov	r3, r0
 8004136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <HAL_ADC_ConfigChannel+0x220>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2101      	movs	r1, #1
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff f979 	bl	800343c <LL_ADC_GetOffsetChannel>
 800414a:	4603      	mov	r3, r0
 800414c:	0e9b      	lsrs	r3, r3, #26
 800414e:	f003 021f 	and.w	r2, r3, #31
 8004152:	e01e      	b.n	8004192 <HAL_ADC_ConfigChannel+0x25e>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2101      	movs	r1, #1
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff f96e 	bl	800343c <LL_ADC_GetOffsetChannel>
 8004160:	4603      	mov	r3, r0
 8004162:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004166:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800416a:	fa93 f3a3 	rbit	r3, r3
 800416e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004172:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004176:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800417a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004182:	2320      	movs	r3, #32
 8004184:	e004      	b.n	8004190 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004186:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800419a:	2b00      	cmp	r3, #0
 800419c:	d105      	bne.n	80041aa <HAL_ADC_ConfigChannel+0x276>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	0e9b      	lsrs	r3, r3, #26
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	e018      	b.n	80041dc <HAL_ADC_ConfigChannel+0x2a8>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041b6:	fa93 f3a3 	rbit	r3, r3
 80041ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80041be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80041c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80041ce:	2320      	movs	r3, #32
 80041d0:	e004      	b.n	80041dc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80041d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041d6:	fab3 f383 	clz	r3, r3
 80041da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041dc:	429a      	cmp	r2, r3
 80041de:	d106      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2200      	movs	r2, #0
 80041e6:	2101      	movs	r1, #1
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff f93d 	bl	8003468 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2102      	movs	r1, #2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff f921 	bl	800343c <LL_ADC_GetOffsetChannel>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <HAL_ADC_ConfigChannel+0x2e6>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2102      	movs	r1, #2
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff f916 	bl	800343c <LL_ADC_GetOffsetChannel>
 8004210:	4603      	mov	r3, r0
 8004212:	0e9b      	lsrs	r3, r3, #26
 8004214:	f003 021f 	and.w	r2, r3, #31
 8004218:	e01e      	b.n	8004258 <HAL_ADC_ConfigChannel+0x324>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2102      	movs	r1, #2
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff f90b 	bl	800343c <LL_ADC_GetOffsetChannel>
 8004226:	4603      	mov	r3, r0
 8004228:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004230:	fa93 f3a3 	rbit	r3, r3
 8004234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004238:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800423c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004240:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004248:	2320      	movs	r3, #32
 800424a:	e004      	b.n	8004256 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800424c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004250:	fab3 f383 	clz	r3, r3
 8004254:	b2db      	uxtb	r3, r3
 8004256:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004260:	2b00      	cmp	r3, #0
 8004262:	d105      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x33c>
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	0e9b      	lsrs	r3, r3, #26
 800426a:	f003 031f 	and.w	r3, r3, #31
 800426e:	e016      	b.n	800429e <HAL_ADC_ConfigChannel+0x36a>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004278:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800427c:	fa93 f3a3 	rbit	r3, r3
 8004280:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004282:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004284:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004288:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004290:	2320      	movs	r3, #32
 8004292:	e004      	b.n	800429e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004294:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004298:	fab3 f383 	clz	r3, r3
 800429c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800429e:	429a      	cmp	r2, r3
 80042a0:	d106      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2200      	movs	r2, #0
 80042a8:	2102      	movs	r1, #2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff f8dc 	bl	8003468 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2103      	movs	r1, #3
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff f8c0 	bl	800343c <LL_ADC_GetOffsetChannel>
 80042bc:	4603      	mov	r3, r0
 80042be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10a      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x3a8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2103      	movs	r1, #3
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff f8b5 	bl	800343c <LL_ADC_GetOffsetChannel>
 80042d2:	4603      	mov	r3, r0
 80042d4:	0e9b      	lsrs	r3, r3, #26
 80042d6:	f003 021f 	and.w	r2, r3, #31
 80042da:	e017      	b.n	800430c <HAL_ADC_ConfigChannel+0x3d8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2103      	movs	r1, #3
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff f8aa 	bl	800343c <LL_ADC_GetOffsetChannel>
 80042e8:	4603      	mov	r3, r0
 80042ea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042ee:	fa93 f3a3 	rbit	r3, r3
 80042f2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80042f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042f6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80042f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80042fe:	2320      	movs	r3, #32
 8004300:	e003      	b.n	800430a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004302:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004304:	fab3 f383 	clz	r3, r3
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004314:	2b00      	cmp	r3, #0
 8004316:	d105      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x3f0>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	0e9b      	lsrs	r3, r3, #26
 800431e:	f003 031f 	and.w	r3, r3, #31
 8004322:	e011      	b.n	8004348 <HAL_ADC_ConfigChannel+0x414>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800432c:	fa93 f3a3 	rbit	r3, r3
 8004330:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004332:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004334:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004336:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800433c:	2320      	movs	r3, #32
 800433e:	e003      	b.n	8004348 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004340:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004342:	fab3 f383 	clz	r3, r3
 8004346:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004348:	429a      	cmp	r2, r3
 800434a:	d106      	bne.n	800435a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2200      	movs	r2, #0
 8004352:	2103      	movs	r1, #3
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff f887 	bl	8003468 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff fa06 	bl	8003770 <LL_ADC_IsEnabled>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	f040 8140 	bne.w	80045ec <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	6819      	ldr	r1, [r3, #0]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	461a      	mov	r2, r3
 800437a:	f7ff f943 	bl	8003604 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	4a8f      	ldr	r2, [pc, #572]	@ (80045c0 <HAL_ADC_ConfigChannel+0x68c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	f040 8131 	bne.w	80045ec <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10b      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0x47e>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	0e9b      	lsrs	r3, r3, #26
 80043a0:	3301      	adds	r3, #1
 80043a2:	f003 031f 	and.w	r3, r3, #31
 80043a6:	2b09      	cmp	r3, #9
 80043a8:	bf94      	ite	ls
 80043aa:	2301      	movls	r3, #1
 80043ac:	2300      	movhi	r3, #0
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	e019      	b.n	80043e6 <HAL_ADC_ConfigChannel+0x4b2>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043ba:	fa93 f3a3 	rbit	r3, r3
 80043be:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80043c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043c2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80043c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80043ca:	2320      	movs	r3, #32
 80043cc:	e003      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80043ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043d0:	fab3 f383 	clz	r3, r3
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	3301      	adds	r3, #1
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	2b09      	cmp	r3, #9
 80043de:	bf94      	ite	ls
 80043e0:	2301      	movls	r3, #1
 80043e2:	2300      	movhi	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d079      	beq.n	80044de <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d107      	bne.n	8004406 <HAL_ADC_ConfigChannel+0x4d2>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	0e9b      	lsrs	r3, r3, #26
 80043fc:	3301      	adds	r3, #1
 80043fe:	069b      	lsls	r3, r3, #26
 8004400:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004404:	e015      	b.n	8004432 <HAL_ADC_ConfigChannel+0x4fe>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800440e:	fa93 f3a3 	rbit	r3, r3
 8004412:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004416:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800441e:	2320      	movs	r3, #32
 8004420:	e003      	b.n	800442a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004424:	fab3 f383 	clz	r3, r3
 8004428:	b2db      	uxtb	r3, r3
 800442a:	3301      	adds	r3, #1
 800442c:	069b      	lsls	r3, r3, #26
 800442e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800443a:	2b00      	cmp	r3, #0
 800443c:	d109      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x51e>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	0e9b      	lsrs	r3, r3, #26
 8004444:	3301      	adds	r3, #1
 8004446:	f003 031f 	and.w	r3, r3, #31
 800444a:	2101      	movs	r1, #1
 800444c:	fa01 f303 	lsl.w	r3, r1, r3
 8004450:	e017      	b.n	8004482 <HAL_ADC_ConfigChannel+0x54e>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800445a:	fa93 f3a3 	rbit	r3, r3
 800445e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004462:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800446a:	2320      	movs	r3, #32
 800446c:	e003      	b.n	8004476 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800446e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004470:	fab3 f383 	clz	r3, r3
 8004474:	b2db      	uxtb	r3, r3
 8004476:	3301      	adds	r3, #1
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	2101      	movs	r1, #1
 800447e:	fa01 f303 	lsl.w	r3, r1, r3
 8004482:	ea42 0103 	orr.w	r1, r2, r3
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10a      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x574>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	0e9b      	lsrs	r3, r3, #26
 8004498:	3301      	adds	r3, #1
 800449a:	f003 021f 	and.w	r2, r3, #31
 800449e:	4613      	mov	r3, r2
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	4413      	add	r3, r2
 80044a4:	051b      	lsls	r3, r3, #20
 80044a6:	e018      	b.n	80044da <HAL_ADC_ConfigChannel+0x5a6>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b0:	fa93 f3a3 	rbit	r3, r3
 80044b4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80044b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80044ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80044c0:	2320      	movs	r3, #32
 80044c2:	e003      	b.n	80044cc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80044c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044c6:	fab3 f383 	clz	r3, r3
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	3301      	adds	r3, #1
 80044ce:	f003 021f 	and.w	r2, r3, #31
 80044d2:	4613      	mov	r3, r2
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	4413      	add	r3, r2
 80044d8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044da:	430b      	orrs	r3, r1
 80044dc:	e081      	b.n	80045e2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d107      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x5c6>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	0e9b      	lsrs	r3, r3, #26
 80044f0:	3301      	adds	r3, #1
 80044f2:	069b      	lsls	r3, r3, #26
 80044f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044f8:	e015      	b.n	8004526 <HAL_ADC_ConfigChannel+0x5f2>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004502:	fa93 f3a3 	rbit	r3, r3
 8004506:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800450c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004512:	2320      	movs	r3, #32
 8004514:	e003      	b.n	800451e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004518:	fab3 f383 	clz	r3, r3
 800451c:	b2db      	uxtb	r3, r3
 800451e:	3301      	adds	r3, #1
 8004520:	069b      	lsls	r3, r3, #26
 8004522:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800452e:	2b00      	cmp	r3, #0
 8004530:	d109      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x612>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	0e9b      	lsrs	r3, r3, #26
 8004538:	3301      	adds	r3, #1
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	2101      	movs	r1, #1
 8004540:	fa01 f303 	lsl.w	r3, r1, r3
 8004544:	e017      	b.n	8004576 <HAL_ADC_ConfigChannel+0x642>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	fa93 f3a3 	rbit	r3, r3
 8004552:	61fb      	str	r3, [r7, #28]
  return result;
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800455e:	2320      	movs	r3, #32
 8004560:	e003      	b.n	800456a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	fab3 f383 	clz	r3, r3
 8004568:	b2db      	uxtb	r3, r3
 800456a:	3301      	adds	r3, #1
 800456c:	f003 031f 	and.w	r3, r3, #31
 8004570:	2101      	movs	r1, #1
 8004572:	fa01 f303 	lsl.w	r3, r1, r3
 8004576:	ea42 0103 	orr.w	r1, r2, r3
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10d      	bne.n	80045a2 <HAL_ADC_ConfigChannel+0x66e>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	0e9b      	lsrs	r3, r3, #26
 800458c:	3301      	adds	r3, #1
 800458e:	f003 021f 	and.w	r2, r3, #31
 8004592:	4613      	mov	r3, r2
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	4413      	add	r3, r2
 8004598:	3b1e      	subs	r3, #30
 800459a:	051b      	lsls	r3, r3, #20
 800459c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045a0:	e01e      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x6ac>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	fa93 f3a3 	rbit	r3, r3
 80045ae:	613b      	str	r3, [r7, #16]
  return result;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d104      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80045ba:	2320      	movs	r3, #32
 80045bc:	e006      	b.n	80045cc <HAL_ADC_ConfigChannel+0x698>
 80045be:	bf00      	nop
 80045c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	fab3 f383 	clz	r3, r3
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	3301      	adds	r3, #1
 80045ce:	f003 021f 	and.w	r2, r3, #31
 80045d2:	4613      	mov	r3, r2
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	4413      	add	r3, r2
 80045d8:	3b1e      	subs	r3, #30
 80045da:	051b      	lsls	r3, r3, #20
 80045dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045e0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045e6:	4619      	mov	r1, r3
 80045e8:	f7fe ffe1 	bl	80035ae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	4b3f      	ldr	r3, [pc, #252]	@ (80046f0 <HAL_ADC_ConfigChannel+0x7bc>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d071      	beq.n	80046dc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045f8:	483e      	ldr	r0, [pc, #248]	@ (80046f4 <HAL_ADC_ConfigChannel+0x7c0>)
 80045fa:	f7fe feed 	bl	80033d8 <LL_ADC_GetCommonPathInternalCh>
 80045fe:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a3c      	ldr	r2, [pc, #240]	@ (80046f8 <HAL_ADC_ConfigChannel+0x7c4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d004      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x6e2>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a3a      	ldr	r2, [pc, #232]	@ (80046fc <HAL_ADC_ConfigChannel+0x7c8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d127      	bne.n	8004666 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004616:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800461a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d121      	bne.n	8004666 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800462a:	d157      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800462c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004630:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004634:	4619      	mov	r1, r3
 8004636:	482f      	ldr	r0, [pc, #188]	@ (80046f4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004638:	f7fe febb 	bl	80033b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800463c:	4b30      	ldr	r3, [pc, #192]	@ (8004700 <HAL_ADC_ConfigChannel+0x7cc>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	099b      	lsrs	r3, r3, #6
 8004642:	4a30      	ldr	r2, [pc, #192]	@ (8004704 <HAL_ADC_ConfigChannel+0x7d0>)
 8004644:	fba2 2303 	umull	r2, r3, r2, r3
 8004648:	099b      	lsrs	r3, r3, #6
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	4613      	mov	r3, r2
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004656:	e002      	b.n	800465e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3b01      	subs	r3, #1
 800465c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f9      	bne.n	8004658 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004664:	e03a      	b.n	80046dc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a27      	ldr	r2, [pc, #156]	@ (8004708 <HAL_ADC_ConfigChannel+0x7d4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d113      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004670:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004674:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10d      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a22      	ldr	r2, [pc, #136]	@ (800470c <HAL_ADC_ConfigChannel+0x7d8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d02a      	beq.n	80046dc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004686:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800468a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800468e:	4619      	mov	r1, r3
 8004690:	4818      	ldr	r0, [pc, #96]	@ (80046f4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004692:	f7fe fe8e 	bl	80033b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004696:	e021      	b.n	80046dc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a1c      	ldr	r2, [pc, #112]	@ (8004710 <HAL_ADC_ConfigChannel+0x7dc>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d11c      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d116      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a16      	ldr	r2, [pc, #88]	@ (800470c <HAL_ADC_ConfigChannel+0x7d8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d011      	beq.n	80046dc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80046c0:	4619      	mov	r1, r3
 80046c2:	480c      	ldr	r0, [pc, #48]	@ (80046f4 <HAL_ADC_ConfigChannel+0x7c0>)
 80046c4:	f7fe fe75 	bl	80033b2 <LL_ADC_SetCommonPathInternalCh>
 80046c8:	e008      	b.n	80046dc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ce:	f043 0220 	orr.w	r2, r3, #32
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80046e4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	37d8      	adds	r7, #216	@ 0xd8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	80080000 	.word	0x80080000
 80046f4:	50000300 	.word	0x50000300
 80046f8:	c3210000 	.word	0xc3210000
 80046fc:	90c00010 	.word	0x90c00010
 8004700:	20000054 	.word	0x20000054
 8004704:	053e2d63 	.word	0x053e2d63
 8004708:	c7520000 	.word	0xc7520000
 800470c:	50000100 	.word	0x50000100
 8004710:	cb840000 	.word	0xcb840000

08004714 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff f86e 	bl	800380c <LL_ADC_REG_IsConversionOngoing>
 8004730:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff f88f 	bl	800385a <LL_ADC_INJ_IsConversionOngoing>
 800473c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d103      	bne.n	800474c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 8098 	beq.w	800487c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d02a      	beq.n	80047b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	7f5b      	ldrb	r3, [r3, #29]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d126      	bne.n	80047b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	7f1b      	ldrb	r3, [r3, #28]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d122      	bne.n	80047b0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800476a:	2301      	movs	r3, #1
 800476c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800476e:	e014      	b.n	800479a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	4a45      	ldr	r2, [pc, #276]	@ (8004888 <ADC_ConversionStop+0x174>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d90d      	bls.n	8004794 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800477c:	f043 0210 	orr.w	r2, r3, #16
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004788:	f043 0201 	orr.w	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e074      	b.n	800487e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	3301      	adds	r3, #1
 8004798:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a4:	2b40      	cmp	r3, #64	@ 0x40
 80047a6:	d1e3      	bne.n	8004770 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2240      	movs	r2, #64	@ 0x40
 80047ae:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d014      	beq.n	80047e0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff f826 	bl	800380c <LL_ADC_REG_IsConversionOngoing>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00c      	beq.n	80047e0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe ffe3 	bl	8003796 <LL_ADC_IsDisableOngoing>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d104      	bne.n	80047e0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff f802 	bl	80037e4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d014      	beq.n	8004810 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff f835 	bl	800385a <LL_ADC_INJ_IsConversionOngoing>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00c      	beq.n	8004810 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fe ffcb 	bl	8003796 <LL_ADC_IsDisableOngoing>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d104      	bne.n	8004810 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff f811 	bl	8003832 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d005      	beq.n	8004822 <ADC_ConversionStop+0x10e>
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b03      	cmp	r3, #3
 800481a:	d105      	bne.n	8004828 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800481c:	230c      	movs	r3, #12
 800481e:	617b      	str	r3, [r7, #20]
        break;
 8004820:	e005      	b.n	800482e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004822:	2308      	movs	r3, #8
 8004824:	617b      	str	r3, [r7, #20]
        break;
 8004826:	e002      	b.n	800482e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004828:	2304      	movs	r3, #4
 800482a:	617b      	str	r3, [r7, #20]
        break;
 800482c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800482e:	f7fe fd7f 	bl	8003330 <HAL_GetTick>
 8004832:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004834:	e01b      	b.n	800486e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004836:	f7fe fd7b 	bl	8003330 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b05      	cmp	r3, #5
 8004842:	d914      	bls.n	800486e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	4013      	ands	r3, r2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00d      	beq.n	800486e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004856:	f043 0210 	orr.w	r2, r3, #16
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004862:	f043 0201 	orr.w	r2, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e007      	b.n	800487e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	4013      	ands	r3, r2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1dc      	bne.n	8004836 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3720      	adds	r7, #32
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	a33fffff 	.word	0xa33fffff

0800488c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004894:	2300      	movs	r3, #0
 8004896:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f7fe ff67 	bl	8003770 <LL_ADC_IsEnabled>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d169      	bne.n	800497c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	4b36      	ldr	r3, [pc, #216]	@ (8004988 <ADC_Enable+0xfc>)
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00d      	beq.n	80048d2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ba:	f043 0210 	orr.w	r2, r3, #16
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048c6:	f043 0201 	orr.w	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e055      	b.n	800497e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe ff22 	bl	8003720 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80048dc:	482b      	ldr	r0, [pc, #172]	@ (800498c <ADC_Enable+0x100>)
 80048de:	f7fe fd7b 	bl	80033d8 <LL_ADC_GetCommonPathInternalCh>
 80048e2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80048e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d013      	beq.n	8004914 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048ec:	4b28      	ldr	r3, [pc, #160]	@ (8004990 <ADC_Enable+0x104>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	099b      	lsrs	r3, r3, #6
 80048f2:	4a28      	ldr	r2, [pc, #160]	@ (8004994 <ADC_Enable+0x108>)
 80048f4:	fba2 2303 	umull	r2, r3, r2, r3
 80048f8:	099b      	lsrs	r3, r3, #6
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	4613      	mov	r3, r2
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	4413      	add	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004906:	e002      	b.n	800490e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	3b01      	subs	r3, #1
 800490c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1f9      	bne.n	8004908 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004914:	f7fe fd0c 	bl	8003330 <HAL_GetTick>
 8004918:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800491a:	e028      	b.n	800496e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f7fe ff25 	bl	8003770 <LL_ADC_IsEnabled>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d104      	bne.n	8004936 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f7fe fef5 	bl	8003720 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004936:	f7fe fcfb 	bl	8003330 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d914      	bls.n	800496e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b01      	cmp	r3, #1
 8004950:	d00d      	beq.n	800496e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004956:	f043 0210 	orr.w	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004962:	f043 0201 	orr.w	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e007      	b.n	800497e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b01      	cmp	r3, #1
 800497a:	d1cf      	bne.n	800491c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	8000003f 	.word	0x8000003f
 800498c:	50000300 	.word	0x50000300
 8004990:	20000054 	.word	0x20000054
 8004994:	053e2d63 	.word	0x053e2d63

08004998 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fe fef6 	bl	8003796 <LL_ADC_IsDisableOngoing>
 80049aa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fe fedd 	bl	8003770 <LL_ADC_IsEnabled>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d047      	beq.n	8004a4c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d144      	bne.n	8004a4c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f003 030d 	and.w	r3, r3, #13
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d10c      	bne.n	80049ea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fe feb7 	bl	8003748 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2203      	movs	r2, #3
 80049e0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049e2:	f7fe fca5 	bl	8003330 <HAL_GetTick>
 80049e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049e8:	e029      	b.n	8004a3e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ee:	f043 0210 	orr.w	r2, r3, #16
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049fa:	f043 0201 	orr.w	r2, r3, #1
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e023      	b.n	8004a4e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004a06:	f7fe fc93 	bl	8003330 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d914      	bls.n	8004a3e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00d      	beq.n	8004a3e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a26:	f043 0210 	orr.w	r2, r3, #16
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a32:	f043 0201 	orr.w	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e007      	b.n	8004a4e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1dc      	bne.n	8004a06 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <LL_ADC_IsEnabled>:
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <LL_ADC_IsEnabled+0x18>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <LL_ADC_IsEnabled+0x1a>
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <LL_ADC_REG_IsConversionOngoing>:
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d101      	bne.n	8004a94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a90:	2301      	movs	r3, #1
 8004a92:	e000      	b.n	8004a96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004aa4:	b590      	push	{r4, r7, lr}
 8004aa6:	b0a1      	sub	sp, #132	@ 0x84
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e08b      	b.n	8004bda <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004aca:	2300      	movs	r3, #0
 8004acc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004ace:	2300      	movs	r3, #0
 8004ad0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ada:	d102      	bne.n	8004ae2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004adc:	4b41      	ldr	r3, [pc, #260]	@ (8004be4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	e001      	b.n	8004ae6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10b      	bne.n	8004b04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af0:	f043 0220 	orr.w	r2, r3, #32
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e06a      	b.n	8004bda <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff ffb8 	bl	8004a7c <LL_ADC_REG_IsConversionOngoing>
 8004b0c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff ffb2 	bl	8004a7c <LL_ADC_REG_IsConversionOngoing>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d14c      	bne.n	8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004b1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d149      	bne.n	8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004b24:	4b30      	ldr	r3, [pc, #192]	@ (8004be8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004b26:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d028      	beq.n	8004b82 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004b30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	6859      	ldr	r1, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004b42:	035b      	lsls	r3, r3, #13
 8004b44:	430b      	orrs	r3, r1
 8004b46:	431a      	orrs	r2, r3
 8004b48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b4a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b4c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004b50:	f7ff ff81 	bl	8004a56 <LL_ADC_IsEnabled>
 8004b54:	4604      	mov	r4, r0
 8004b56:	4823      	ldr	r0, [pc, #140]	@ (8004be4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004b58:	f7ff ff7d 	bl	8004a56 <LL_ADC_IsEnabled>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	4323      	orrs	r3, r4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d133      	bne.n	8004bcc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004b64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004b6c:	f023 030f 	bic.w	r3, r3, #15
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	6811      	ldr	r1, [r2, #0]
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	6892      	ldr	r2, [r2, #8]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b7e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b80:	e024      	b.n	8004bcc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004b82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b8c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b8e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004b92:	f7ff ff60 	bl	8004a56 <LL_ADC_IsEnabled>
 8004b96:	4604      	mov	r4, r0
 8004b98:	4812      	ldr	r0, [pc, #72]	@ (8004be4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004b9a:	f7ff ff5c 	bl	8004a56 <LL_ADC_IsEnabled>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4323      	orrs	r3, r4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d112      	bne.n	8004bcc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ba6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004bae:	f023 030f 	bic.w	r3, r3, #15
 8004bb2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004bb4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004bb6:	e009      	b.n	8004bcc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bbc:	f043 0220 	orr.w	r2, r3, #32
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004bca:	e000      	b.n	8004bce <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004bcc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004bd6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3784      	adds	r7, #132	@ 0x84
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd90      	pop	{r4, r7, pc}
 8004be2:	bf00      	nop
 8004be4:	50000100 	.word	0x50000100
 8004be8:	50000300 	.word	0x50000300

08004bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8004c30 <__NVIC_SetPriorityGrouping+0x44>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c08:	4013      	ands	r3, r2
 8004c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c1e:	4a04      	ldr	r2, [pc, #16]	@ (8004c30 <__NVIC_SetPriorityGrouping+0x44>)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	60d3      	str	r3, [r2, #12]
}
 8004c24:	bf00      	nop
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	e000ed00 	.word	0xe000ed00

08004c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c38:	4b04      	ldr	r3, [pc, #16]	@ (8004c4c <__NVIC_GetPriorityGrouping+0x18>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	0a1b      	lsrs	r3, r3, #8
 8004c3e:	f003 0307 	and.w	r3, r3, #7
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	e000ed00 	.word	0xe000ed00

08004c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	4603      	mov	r3, r0
 8004c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	db0b      	blt.n	8004c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c62:	79fb      	ldrb	r3, [r7, #7]
 8004c64:	f003 021f 	and.w	r2, r3, #31
 8004c68:	4907      	ldr	r1, [pc, #28]	@ (8004c88 <__NVIC_EnableIRQ+0x38>)
 8004c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	2001      	movs	r0, #1
 8004c72:	fa00 f202 	lsl.w	r2, r0, r2
 8004c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	e000e100 	.word	0xe000e100

08004c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	6039      	str	r1, [r7, #0]
 8004c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	db0a      	blt.n	8004cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	490c      	ldr	r1, [pc, #48]	@ (8004cd8 <__NVIC_SetPriority+0x4c>)
 8004ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004caa:	0112      	lsls	r2, r2, #4
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	440b      	add	r3, r1
 8004cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cb4:	e00a      	b.n	8004ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	4908      	ldr	r1, [pc, #32]	@ (8004cdc <__NVIC_SetPriority+0x50>)
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	3b04      	subs	r3, #4
 8004cc4:	0112      	lsls	r2, r2, #4
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	440b      	add	r3, r1
 8004cca:	761a      	strb	r2, [r3, #24]
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	e000e100 	.word	0xe000e100
 8004cdc:	e000ed00 	.word	0xe000ed00

08004ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b089      	sub	sp, #36	@ 0x24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f1c3 0307 	rsb	r3, r3, #7
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	bf28      	it	cs
 8004cfe:	2304      	movcs	r3, #4
 8004d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	3304      	adds	r3, #4
 8004d06:	2b06      	cmp	r3, #6
 8004d08:	d902      	bls.n	8004d10 <NVIC_EncodePriority+0x30>
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	3b03      	subs	r3, #3
 8004d0e:	e000      	b.n	8004d12 <NVIC_EncodePriority+0x32>
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d14:	f04f 32ff 	mov.w	r2, #4294967295
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1e:	43da      	mvns	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	401a      	ands	r2, r3
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d28:	f04f 31ff 	mov.w	r1, #4294967295
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d32:	43d9      	mvns	r1, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d38:	4313      	orrs	r3, r2
         );
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3724      	adds	r7, #36	@ 0x24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
	...

08004d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3b01      	subs	r3, #1
 8004d54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d58:	d301      	bcc.n	8004d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e00f      	b.n	8004d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004d88 <SysTick_Config+0x40>)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d66:	210f      	movs	r1, #15
 8004d68:	f04f 30ff 	mov.w	r0, #4294967295
 8004d6c:	f7ff ff8e 	bl	8004c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d70:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <SysTick_Config+0x40>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d76:	4b04      	ldr	r3, [pc, #16]	@ (8004d88 <SysTick_Config+0x40>)
 8004d78:	2207      	movs	r2, #7
 8004d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	e000e010 	.word	0xe000e010

08004d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff ff29 	bl	8004bec <__NVIC_SetPriorityGrouping>
}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b086      	sub	sp, #24
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	4603      	mov	r3, r0
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004db0:	f7ff ff40 	bl	8004c34 <__NVIC_GetPriorityGrouping>
 8004db4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	6978      	ldr	r0, [r7, #20]
 8004dbc:	f7ff ff90 	bl	8004ce0 <NVIC_EncodePriority>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff ff5f 	bl	8004c8c <__NVIC_SetPriority>
}
 8004dce:	bf00      	nop
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	4603      	mov	r3, r0
 8004dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff ff33 	bl	8004c50 <__NVIC_EnableIRQ>
}
 8004dea:	bf00      	nop
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7ff ffa4 	bl	8004d48 <SysTick_Config>
 8004e00:	4603      	mov	r3, r0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b082      	sub	sp, #8
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e014      	b.n	8004e46 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	791b      	ldrb	r3, [r3, #4]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d105      	bne.n	8004e32 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7fd f955 	bl	80020dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2202      	movs	r2, #2
 8004e36:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e056      	b.n	8004f12 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	795b      	ldrb	r3, [r3, #5]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_DAC_Start+0x20>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e050      	b.n	8004f12 <HAL_DAC_Start+0xc2>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2202      	movs	r2, #2
 8004e7a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6819      	ldr	r1, [r3, #0]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	f003 0310 	and.w	r3, r3, #16
 8004e88:	2201      	movs	r2, #1
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e94:	4b22      	ldr	r3, [pc, #136]	@ (8004f20 <HAL_DAC_Start+0xd0>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	099b      	lsrs	r3, r3, #6
 8004e9a:	4a22      	ldr	r2, [pc, #136]	@ (8004f24 <HAL_DAC_Start+0xd4>)
 8004e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea0:	099b      	lsrs	r3, r3, #6
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004ea6:	e002      	b.n	8004eae <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1f9      	bne.n	8004ea8 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10f      	bne.n	8004eda <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d11d      	bne.n	8004f04 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0201 	orr.w	r2, r2, #1
 8004ed6:	605a      	str	r2, [r3, #4]
 8004ed8:	e014      	b.n	8004f04 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	f003 0310 	and.w	r3, r3, #16
 8004eea:	2102      	movs	r1, #2
 8004eec:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d107      	bne.n	8004f04 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0202 	orr.w	r2, r2, #2
 8004f02:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	20000054 	.word	0x20000054
 8004f24:	053e2d63 	.word	0x053e2d63

08004f28 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004f36:	2300      	movs	r3, #0
 8004f38:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e018      	b.n	8004f76 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d105      	bne.n	8004f62 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e004      	b.n	8004f6c <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4413      	add	r3, r2
 8004f68:	3314      	adds	r3, #20
 8004f6a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
	...

08004f84 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08a      	sub	sp, #40	@ 0x28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <HAL_DAC_ConfigChannel+0x1c>
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e1a1      	b.n	80052e8 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	795b      	ldrb	r3, [r3, #5]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d101      	bne.n	8004fb6 <HAL_DAC_ConfigChannel+0x32>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e198      	b.n	80052e8 <HAL_DAC_ConfigChannel+0x364>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d17a      	bne.n	80050c0 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004fca:	f7fe f9b1 	bl	8003330 <HAL_GetTick>
 8004fce:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d13d      	bne.n	8005052 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004fd6:	e018      	b.n	800500a <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004fd8:	f7fe f9aa 	bl	8003330 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d911      	bls.n	800500a <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f043 0208 	orr.w	r2, r3, #8
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2203      	movs	r2, #3
 8005004:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e16e      	b.n	80052e8 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1df      	bne.n	8004fd8 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005020:	641a      	str	r2, [r3, #64]	@ 0x40
 8005022:	e020      	b.n	8005066 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005024:	f7fe f984 	bl	8003330 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b01      	cmp	r3, #1
 8005030:	d90f      	bls.n	8005052 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005038:	2b00      	cmp	r3, #0
 800503a:	da0a      	bge.n	8005052 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	f043 0208 	orr.w	r2, r3, #8
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2203      	movs	r2, #3
 800504c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e14a      	b.n	80052e8 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005058:	2b00      	cmp	r3, #0
 800505a:	dbe3      	blt.n	8005024 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005064:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f003 0310 	and.w	r3, r3, #16
 8005072:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005076:	fa01 f303 	lsl.w	r3, r1, r3
 800507a:	43db      	mvns	r3, r3
 800507c:	ea02 0103 	and.w	r1, r2, r3
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	409a      	lsls	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	21ff      	movs	r1, #255	@ 0xff
 80050a2:	fa01 f303 	lsl.w	r3, r1, r3
 80050a6:	43db      	mvns	r3, r3
 80050a8:	ea02 0103 	and.w	r1, r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	409a      	lsls	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d11d      	bne.n	8005104 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ce:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f003 0310 	and.w	r3, r3, #16
 80050d6:	221f      	movs	r2, #31
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	43db      	mvns	r3, r3
 80050de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e0:	4013      	ands	r3, r2
 80050e2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f003 0310 	and.w	r3, r3, #16
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f8:	4313      	orrs	r3, r2
 80050fa:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005102:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800510a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	2207      	movs	r2, #7
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	43db      	mvns	r3, r3
 800511a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800511c:	4013      	ands	r3, r2
 800511e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d102      	bne.n	800512e <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8005128:	2300      	movs	r3, #0
 800512a:	623b      	str	r3, [r7, #32]
 800512c:	e00f      	b.n	800514e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d102      	bne.n	800513c <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005136:	2301      	movs	r3, #1
 8005138:	623b      	str	r3, [r7, #32]
 800513a:	e008      	b.n	800514e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005144:	2301      	movs	r3, #1
 8005146:	623b      	str	r3, [r7, #32]
 8005148:	e001      	b.n	800514e <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800514a:	2300      	movs	r3, #0
 800514c:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	6a3a      	ldr	r2, [r7, #32]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f003 0310 	and.w	r3, r3, #16
 8005164:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	43db      	mvns	r3, r3
 800516e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005170:	4013      	ands	r3, r2
 8005172:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	791b      	ldrb	r3, [r3, #4]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d102      	bne.n	8005182 <HAL_DAC_ConfigChannel+0x1fe>
 800517c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005180:	e000      	b.n	8005184 <HAL_DAC_ConfigChannel+0x200>
 8005182:	2300      	movs	r3, #0
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f003 0310 	and.w	r3, r3, #16
 8005190:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	43db      	mvns	r3, r3
 800519a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800519c:	4013      	ands	r3, r2
 800519e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	795b      	ldrb	r3, [r3, #5]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d102      	bne.n	80051ae <HAL_DAC_ConfigChannel+0x22a>
 80051a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051ac:	e000      	b.n	80051b0 <HAL_DAC_ConfigChannel+0x22c>
 80051ae:	2300      	movs	r3, #0
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80051bc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d114      	bne.n	80051f0 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80051c6:	f001 f971 	bl	80064ac <HAL_RCC_GetHCLKFreq>
 80051ca:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	4a48      	ldr	r2, [pc, #288]	@ (80052f0 <HAL_DAC_ConfigChannel+0x36c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d904      	bls.n	80051de <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051da:	627b      	str	r3, [r7, #36]	@ 0x24
 80051dc:	e00f      	b.n	80051fe <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	4a44      	ldr	r2, [pc, #272]	@ (80052f4 <HAL_DAC_ConfigChannel+0x370>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d90a      	bls.n	80051fc <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80051ee:	e006      	b.n	80051fe <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f6:	4313      	orrs	r3, r2
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80051fa:	e000      	b.n	80051fe <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80051fc:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800520c:	4313      	orrs	r3, r2
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005216:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6819      	ldr	r1, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	43da      	mvns	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	400a      	ands	r2, r1
 8005234:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	43db      	mvns	r3, r3
 800524e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005250:	4013      	ands	r3, r2
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005268:	4313      	orrs	r3, r2
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005272:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6819      	ldr	r1, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	22c0      	movs	r2, #192	@ 0xc0
 8005282:	fa02 f303 	lsl.w	r3, r2, r3
 8005286:	43da      	mvns	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	400a      	ands	r2, r1
 800528e:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	089b      	lsrs	r3, r3, #2
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	089b      	lsrs	r3, r3, #2
 80052a2:	021b      	lsls	r3, r3, #8
 80052a4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f003 0310 	and.w	r3, r3, #16
 80052ba:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80052be:	fa01 f303 	lsl.w	r3, r1, r3
 80052c2:	43db      	mvns	r3, r3
 80052c4:	ea02 0103 	and.w	r1, r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f003 0310 	and.w	r3, r3, #16
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	409a      	lsls	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80052e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3728      	adds	r7, #40	@ 0x28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	09896800 	.word	0x09896800
 80052f4:	04c4b400 	.word	0x04c4b400

080052f8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d005      	beq.n	800531c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2204      	movs	r2, #4
 8005314:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	73fb      	strb	r3, [r7, #15]
 800531a:	e037      	b.n	800538c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 020e 	bic.w	r2, r2, #14
 800532a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005336:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800533a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 0201 	bic.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005350:	f003 021f 	and.w	r2, r3, #31
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005358:	2101      	movs	r1, #1
 800535a:	fa01 f202 	lsl.w	r2, r1, r2
 800535e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005368:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00c      	beq.n	800538c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800537c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005380:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800538a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800539c:	7bfb      	ldrb	r3, [r7, #15]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d00d      	beq.n	80053de <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2204      	movs	r2, #4
 80053c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	73fb      	strb	r3, [r7, #15]
 80053dc:	e047      	b.n	800546e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 020e 	bic.w	r2, r2, #14
 80053ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0201 	bic.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005408:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800540c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005412:	f003 021f 	and.w	r2, r3, #31
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541a:	2101      	movs	r1, #1
 800541c:	fa01 f202 	lsl.w	r2, r1, r2
 8005420:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800542a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00c      	beq.n	800544e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800543e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005442:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800544c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	4798      	blx	r3
    }
  }
  return status;
 800546e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005482:	2300      	movs	r3, #0
 8005484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005486:	e15a      	b.n	800573e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	2101      	movs	r1, #1
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	fa01 f303 	lsl.w	r3, r1, r3
 8005494:	4013      	ands	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 814c 	beq.w	8005738 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f003 0303 	and.w	r3, r3, #3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d005      	beq.n	80054b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d130      	bne.n	800551a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	2203      	movs	r2, #3
 80054c4:	fa02 f303 	lsl.w	r3, r2, r3
 80054c8:	43db      	mvns	r3, r3
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4013      	ands	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054ee:	2201      	movs	r2, #1
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	43db      	mvns	r3, r3
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4013      	ands	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	091b      	lsrs	r3, r3, #4
 8005504:	f003 0201 	and.w	r2, r3, #1
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	2b03      	cmp	r3, #3
 8005524:	d017      	beq.n	8005556 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	2203      	movs	r2, #3
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	43db      	mvns	r3, r3
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4013      	ands	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d123      	bne.n	80055aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	08da      	lsrs	r2, r3, #3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3208      	adds	r2, #8
 800556a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800556e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	220f      	movs	r2, #15
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	43db      	mvns	r3, r3
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4013      	ands	r3, r2
 8005584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	4313      	orrs	r3, r2
 800559a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	08da      	lsrs	r2, r3, #3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3208      	adds	r2, #8
 80055a4:	6939      	ldr	r1, [r7, #16]
 80055a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	2203      	movs	r2, #3
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	43db      	mvns	r3, r3
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4013      	ands	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f003 0203 	and.w	r2, r3, #3
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 80a6 	beq.w	8005738 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055ec:	4b5b      	ldr	r3, [pc, #364]	@ (800575c <HAL_GPIO_Init+0x2e4>)
 80055ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055f0:	4a5a      	ldr	r2, [pc, #360]	@ (800575c <HAL_GPIO_Init+0x2e4>)
 80055f2:	f043 0301 	orr.w	r3, r3, #1
 80055f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80055f8:	4b58      	ldr	r3, [pc, #352]	@ (800575c <HAL_GPIO_Init+0x2e4>)
 80055fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	60bb      	str	r3, [r7, #8]
 8005602:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005604:	4a56      	ldr	r2, [pc, #344]	@ (8005760 <HAL_GPIO_Init+0x2e8>)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	089b      	lsrs	r3, r3, #2
 800560a:	3302      	adds	r3, #2
 800560c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005610:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f003 0303 	and.w	r3, r3, #3
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	220f      	movs	r2, #15
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	43db      	mvns	r3, r3
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4013      	ands	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800562e:	d01f      	beq.n	8005670 <HAL_GPIO_Init+0x1f8>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a4c      	ldr	r2, [pc, #304]	@ (8005764 <HAL_GPIO_Init+0x2ec>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d019      	beq.n	800566c <HAL_GPIO_Init+0x1f4>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a4b      	ldr	r2, [pc, #300]	@ (8005768 <HAL_GPIO_Init+0x2f0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d013      	beq.n	8005668 <HAL_GPIO_Init+0x1f0>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a4a      	ldr	r2, [pc, #296]	@ (800576c <HAL_GPIO_Init+0x2f4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00d      	beq.n	8005664 <HAL_GPIO_Init+0x1ec>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a49      	ldr	r2, [pc, #292]	@ (8005770 <HAL_GPIO_Init+0x2f8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d007      	beq.n	8005660 <HAL_GPIO_Init+0x1e8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a48      	ldr	r2, [pc, #288]	@ (8005774 <HAL_GPIO_Init+0x2fc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d101      	bne.n	800565c <HAL_GPIO_Init+0x1e4>
 8005658:	2305      	movs	r3, #5
 800565a:	e00a      	b.n	8005672 <HAL_GPIO_Init+0x1fa>
 800565c:	2306      	movs	r3, #6
 800565e:	e008      	b.n	8005672 <HAL_GPIO_Init+0x1fa>
 8005660:	2304      	movs	r3, #4
 8005662:	e006      	b.n	8005672 <HAL_GPIO_Init+0x1fa>
 8005664:	2303      	movs	r3, #3
 8005666:	e004      	b.n	8005672 <HAL_GPIO_Init+0x1fa>
 8005668:	2302      	movs	r3, #2
 800566a:	e002      	b.n	8005672 <HAL_GPIO_Init+0x1fa>
 800566c:	2301      	movs	r3, #1
 800566e:	e000      	b.n	8005672 <HAL_GPIO_Init+0x1fa>
 8005670:	2300      	movs	r3, #0
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	f002 0203 	and.w	r2, r2, #3
 8005678:	0092      	lsls	r2, r2, #2
 800567a:	4093      	lsls	r3, r2
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005682:	4937      	ldr	r1, [pc, #220]	@ (8005760 <HAL_GPIO_Init+0x2e8>)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	089b      	lsrs	r3, r3, #2
 8005688:	3302      	adds	r3, #2
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005690:	4b39      	ldr	r3, [pc, #228]	@ (8005778 <HAL_GPIO_Init+0x300>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	43db      	mvns	r3, r3
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4013      	ands	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80056b4:	4a30      	ldr	r2, [pc, #192]	@ (8005778 <HAL_GPIO_Init+0x300>)
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80056ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005778 <HAL_GPIO_Init+0x300>)
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	43db      	mvns	r3, r3
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4013      	ands	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80056de:	4a26      	ldr	r2, [pc, #152]	@ (8005778 <HAL_GPIO_Init+0x300>)
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80056e4:	4b24      	ldr	r3, [pc, #144]	@ (8005778 <HAL_GPIO_Init+0x300>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	43db      	mvns	r3, r3
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4013      	ands	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005708:	4a1b      	ldr	r2, [pc, #108]	@ (8005778 <HAL_GPIO_Init+0x300>)
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800570e:	4b1a      	ldr	r3, [pc, #104]	@ (8005778 <HAL_GPIO_Init+0x300>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	43db      	mvns	r3, r3
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4013      	ands	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005732:	4a11      	ldr	r2, [pc, #68]	@ (8005778 <HAL_GPIO_Init+0x300>)
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	3301      	adds	r3, #1
 800573c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	fa22 f303 	lsr.w	r3, r2, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	f47f ae9d 	bne.w	8005488 <HAL_GPIO_Init+0x10>
  }
}
 800574e:	bf00      	nop
 8005750:	bf00      	nop
 8005752:	371c      	adds	r7, #28
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	40021000 	.word	0x40021000
 8005760:	40010000 	.word	0x40010000
 8005764:	48000400 	.word	0x48000400
 8005768:	48000800 	.word	0x48000800
 800576c:	48000c00 	.word	0x48000c00
 8005770:	48001000 	.word	0x48001000
 8005774:	48001400 	.word	0x48001400
 8005778:	40010400 	.word	0x40010400

0800577c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	460b      	mov	r3, r1
 8005786:	807b      	strh	r3, [r7, #2]
 8005788:	4613      	mov	r3, r2
 800578a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800578c:	787b      	ldrb	r3, [r7, #1]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005792:	887a      	ldrh	r2, [r7, #2]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005798:	e002      	b.n	80057a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800579a:	887a      	ldrh	r2, [r7, #2]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057be:	887a      	ldrh	r2, [r7, #2]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4013      	ands	r3, r2
 80057c4:	041a      	lsls	r2, r3, #16
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	43d9      	mvns	r1, r3
 80057ca:	887b      	ldrh	r3, [r7, #2]
 80057cc:	400b      	ands	r3, r1
 80057ce:	431a      	orrs	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	619a      	str	r2, [r3, #24]
}
 80057d4:	bf00      	nop
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e0bb      	b.n	800596e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b05      	cmp	r3, #5
 8005800:	d101      	bne.n	8005806 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e0b3      	b.n	800596e <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d101      	bne.n	8005816 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e0ab      	b.n	800596e <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005816:	4b58      	ldr	r3, [pc, #352]	@ (8005978 <HAL_OPAMP_Init+0x198>)
 8005818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800581a:	4a57      	ldr	r2, [pc, #348]	@ (8005978 <HAL_OPAMP_Init+0x198>)
 800581c:	f043 0301 	orr.w	r3, r3, #1
 8005820:	6613      	str	r3, [r2, #96]	@ 0x60
 8005822:	4b55      	ldr	r3, [pc, #340]	@ (8005978 <HAL_OPAMP_Init+0x198>)
 8005824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	60bb      	str	r3, [r7, #8]
 800582c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d103      	bne.n	8005842 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fc fc88 	bl	8002158 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2b40      	cmp	r3, #64	@ 0x40
 800584e:	d003      	beq.n	8005858 <HAL_OPAMP_Init+0x78>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	2b60      	cmp	r3, #96	@ 0x60
 8005856:	d133      	bne.n	80058c0 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f023 0110 	bic.w	r1, r3, #16
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	4b41      	ldr	r3, [pc, #260]	@ (800597c <HAL_OPAMP_Init+0x19c>)
 8005876:	4013      	ands	r3, r2
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6851      	ldr	r1, [r2, #4]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6892      	ldr	r2, [r2, #8]
 8005880:	4311      	orrs	r1, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6912      	ldr	r2, [r2, #16]
 8005886:	430a      	orrs	r2, r1
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	7d09      	ldrb	r1, [r1, #20]
 800588c:	2901      	cmp	r1, #1
 800588e:	d102      	bne.n	8005896 <HAL_OPAMP_Init+0xb6>
 8005890:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005894:	e000      	b.n	8005898 <HAL_OPAMP_Init+0xb8>
 8005896:	2100      	movs	r1, #0
 8005898:	4311      	orrs	r1, r2
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800589e:	4311      	orrs	r1, r2
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80058a4:	4311      	orrs	r1, r2
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80058aa:	04d2      	lsls	r2, r2, #19
 80058ac:	4311      	orrs	r1, r2
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80058b2:	0612      	lsls	r2, r2, #24
 80058b4:	4311      	orrs	r1, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	430b      	orrs	r3, r1
 80058bc:	6013      	str	r3, [r2, #0]
 80058be:	e035      	b.n	800592c <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f023 0110 	bic.w	r1, r3, #16
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	4b27      	ldr	r3, [pc, #156]	@ (800597c <HAL_OPAMP_Init+0x19c>)
 80058de:	4013      	ands	r3, r2
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6851      	ldr	r1, [r2, #4]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6892      	ldr	r2, [r2, #8]
 80058e8:	4311      	orrs	r1, r2
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	68d2      	ldr	r2, [r2, #12]
 80058ee:	4311      	orrs	r1, r2
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6912      	ldr	r2, [r2, #16]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	7d09      	ldrb	r1, [r1, #20]
 80058fa:	2901      	cmp	r1, #1
 80058fc:	d102      	bne.n	8005904 <HAL_OPAMP_Init+0x124>
 80058fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005902:	e000      	b.n	8005906 <HAL_OPAMP_Init+0x126>
 8005904:	2100      	movs	r1, #0
 8005906:	4311      	orrs	r1, r2
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800590c:	4311      	orrs	r1, r2
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005912:	4311      	orrs	r1, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005918:	04d2      	lsls	r2, r2, #19
 800591a:	4311      	orrs	r1, r2
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005920:	0612      	lsls	r2, r2, #24
 8005922:	4311      	orrs	r1, r2
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6812      	ldr	r2, [r2, #0]
 8005928:	430b      	orrs	r3, r1
 800592a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	2b00      	cmp	r3, #0
 8005934:	db10      	blt.n	8005958 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699a      	ldr	r2, [r3, #24]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d103      	bne.n	800596c <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40021000 	.word	0x40021000
 800597c:	e0003e11 	.word	0xe0003e11

08005980 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	73fb      	strb	r3, [r7, #15]
 8005996:	e01d      	b.n	80059d4 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b05      	cmp	r3, #5
 80059a2:	d102      	bne.n	80059aa <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	73fb      	strb	r3, [r7, #15]
 80059a8:	e014      	b.n	80059d4 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d10c      	bne.n	80059d0 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0201 	orr.w	r2, r2, #1
 80059c4:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2204      	movs	r2, #4
 80059ca:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80059ce:	e001      	b.n	80059d4 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
	...

080059e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d141      	bne.n	8005a76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80059f2:	4b4b      	ldr	r3, [pc, #300]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059fe:	d131      	bne.n	8005a64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a00:	4b47      	ldr	r3, [pc, #284]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a06:	4a46      	ldr	r2, [pc, #280]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a10:	4b43      	ldr	r3, [pc, #268]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005a18:	4a41      	ldr	r2, [pc, #260]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a20:	4b40      	ldr	r3, [pc, #256]	@ (8005b24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2232      	movs	r2, #50	@ 0x32
 8005a26:	fb02 f303 	mul.w	r3, r2, r3
 8005a2a:	4a3f      	ldr	r2, [pc, #252]	@ (8005b28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a30:	0c9b      	lsrs	r3, r3, #18
 8005a32:	3301      	adds	r3, #1
 8005a34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a36:	e002      	b.n	8005a3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a3e:	4b38      	ldr	r3, [pc, #224]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a4a:	d102      	bne.n	8005a52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f2      	bne.n	8005a38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a52:	4b33      	ldr	r3, [pc, #204]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a5e:	d158      	bne.n	8005b12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e057      	b.n	8005b14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a64:	4b2e      	ldr	r3, [pc, #184]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a6a:	4a2d      	ldr	r2, [pc, #180]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005a74:	e04d      	b.n	8005b12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a7c:	d141      	bne.n	8005b02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a7e:	4b28      	ldr	r3, [pc, #160]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005a86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a8a:	d131      	bne.n	8005af0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a8c:	4b24      	ldr	r3, [pc, #144]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a92:	4a23      	ldr	r2, [pc, #140]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a9c:	4b20      	ldr	r3, [pc, #128]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005aa4:	4a1e      	ldr	r2, [pc, #120]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aa6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005aaa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005aac:	4b1d      	ldr	r3, [pc, #116]	@ (8005b24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2232      	movs	r2, #50	@ 0x32
 8005ab2:	fb02 f303 	mul.w	r3, r2, r3
 8005ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8005b28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8005abc:	0c9b      	lsrs	r3, r3, #18
 8005abe:	3301      	adds	r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ac2:	e002      	b.n	8005aca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005aca:	4b15      	ldr	r3, [pc, #84]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ad6:	d102      	bne.n	8005ade <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1f2      	bne.n	8005ac4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ade:	4b10      	ldr	r3, [pc, #64]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ae6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005aea:	d112      	bne.n	8005b12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e011      	b.n	8005b14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005af0:	4b0b      	ldr	r3, [pc, #44]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005af6:	4a0a      	ldr	r2, [pc, #40]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005afc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005b00:	e007      	b.n	8005b12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b02:	4b07      	ldr	r3, [pc, #28]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005b0a:	4a05      	ldr	r2, [pc, #20]	@ (8005b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	40007000 	.word	0x40007000
 8005b24:	20000054 	.word	0x20000054
 8005b28:	431bde83 	.word	0x431bde83

08005b2c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005b30:	4b05      	ldr	r3, [pc, #20]	@ (8005b48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	4a04      	ldr	r2, [pc, #16]	@ (8005b48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005b36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b3a:	6093      	str	r3, [r2, #8]
}
 8005b3c:	bf00      	nop
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	40007000 	.word	0x40007000

08005b4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e2fe      	b.n	800615c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d075      	beq.n	8005c56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b6a:	4b97      	ldr	r3, [pc, #604]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 030c 	and.w	r3, r3, #12
 8005b72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b74:	4b94      	ldr	r3, [pc, #592]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 0303 	and.w	r3, r3, #3
 8005b7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2b0c      	cmp	r3, #12
 8005b82:	d102      	bne.n	8005b8a <HAL_RCC_OscConfig+0x3e>
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2b03      	cmp	r3, #3
 8005b88:	d002      	beq.n	8005b90 <HAL_RCC_OscConfig+0x44>
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d10b      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b90:	4b8d      	ldr	r3, [pc, #564]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d05b      	beq.n	8005c54 <HAL_RCC_OscConfig+0x108>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d157      	bne.n	8005c54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e2d9      	b.n	800615c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bb0:	d106      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x74>
 8005bb2:	4b85      	ldr	r3, [pc, #532]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a84      	ldr	r2, [pc, #528]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	e01d      	b.n	8005bfc <HAL_RCC_OscConfig+0xb0>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bc8:	d10c      	bne.n	8005be4 <HAL_RCC_OscConfig+0x98>
 8005bca:	4b7f      	ldr	r3, [pc, #508]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a7e      	ldr	r2, [pc, #504]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005bd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	4b7c      	ldr	r3, [pc, #496]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a7b      	ldr	r2, [pc, #492]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	e00b      	b.n	8005bfc <HAL_RCC_OscConfig+0xb0>
 8005be4:	4b78      	ldr	r3, [pc, #480]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a77      	ldr	r2, [pc, #476]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005bea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	4b75      	ldr	r3, [pc, #468]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a74      	ldr	r2, [pc, #464]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005bf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d013      	beq.n	8005c2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c04:	f7fd fb94 	bl	8003330 <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c0c:	f7fd fb90 	bl	8003330 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b64      	cmp	r3, #100	@ 0x64
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e29e      	b.n	800615c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c1e:	4b6a      	ldr	r3, [pc, #424]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0f0      	beq.n	8005c0c <HAL_RCC_OscConfig+0xc0>
 8005c2a:	e014      	b.n	8005c56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2c:	f7fd fb80 	bl	8003330 <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c34:	f7fd fb7c 	bl	8003330 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b64      	cmp	r3, #100	@ 0x64
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e28a      	b.n	800615c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c46:	4b60      	ldr	r3, [pc, #384]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1f0      	bne.n	8005c34 <HAL_RCC_OscConfig+0xe8>
 8005c52:	e000      	b.n	8005c56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d075      	beq.n	8005d4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c62:	4b59      	ldr	r3, [pc, #356]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 030c 	and.w	r3, r3, #12
 8005c6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c6c:	4b56      	ldr	r3, [pc, #344]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f003 0303 	and.w	r3, r3, #3
 8005c74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b0c      	cmp	r3, #12
 8005c7a:	d102      	bne.n	8005c82 <HAL_RCC_OscConfig+0x136>
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d002      	beq.n	8005c88 <HAL_RCC_OscConfig+0x13c>
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d11f      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c88:	4b4f      	ldr	r3, [pc, #316]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x154>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e25d      	b.n	800615c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ca0:	4b49      	ldr	r3, [pc, #292]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	061b      	lsls	r3, r3, #24
 8005cae:	4946      	ldr	r1, [pc, #280]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005cb4:	4b45      	ldr	r3, [pc, #276]	@ (8005dcc <HAL_RCC_OscConfig+0x280>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fd faed 	bl	8003298 <HAL_InitTick>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d043      	beq.n	8005d4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e249      	b.n	800615c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d023      	beq.n	8005d18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cd0:	4b3d      	ldr	r3, [pc, #244]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a3c      	ldr	r2, [pc, #240]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cdc:	f7fd fb28 	bl	8003330 <HAL_GetTick>
 8005ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ce4:	f7fd fb24 	bl	8003330 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e232      	b.n	800615c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cf6:	4b34      	ldr	r3, [pc, #208]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0f0      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d02:	4b31      	ldr	r3, [pc, #196]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	061b      	lsls	r3, r3, #24
 8005d10:	492d      	ldr	r1, [pc, #180]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	604b      	str	r3, [r1, #4]
 8005d16:	e01a      	b.n	8005d4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d18:	4b2b      	ldr	r3, [pc, #172]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005d1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d24:	f7fd fb04 	bl	8003330 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d2c:	f7fd fb00 	bl	8003330 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e20e      	b.n	800615c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d3e:	4b22      	ldr	r3, [pc, #136]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1f0      	bne.n	8005d2c <HAL_RCC_OscConfig+0x1e0>
 8005d4a:	e000      	b.n	8005d4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0308 	and.w	r3, r3, #8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d041      	beq.n	8005dde <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d01c      	beq.n	8005d9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d62:	4b19      	ldr	r3, [pc, #100]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d68:	4a17      	ldr	r2, [pc, #92]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005d6a:	f043 0301 	orr.w	r3, r3, #1
 8005d6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d72:	f7fd fadd 	bl	8003330 <HAL_GetTick>
 8005d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d78:	e008      	b.n	8005d8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d7a:	f7fd fad9 	bl	8003330 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d901      	bls.n	8005d8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e1e7      	b.n	800615c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0ef      	beq.n	8005d7a <HAL_RCC_OscConfig+0x22e>
 8005d9a:	e020      	b.n	8005dde <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005da2:	4a09      	ldr	r2, [pc, #36]	@ (8005dc8 <HAL_RCC_OscConfig+0x27c>)
 8005da4:	f023 0301 	bic.w	r3, r3, #1
 8005da8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dac:	f7fd fac0 	bl	8003330 <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005db2:	e00d      	b.n	8005dd0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005db4:	f7fd fabc 	bl	8003330 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d906      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e1ca      	b.n	800615c <HAL_RCC_OscConfig+0x610>
 8005dc6:	bf00      	nop
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	20000058 	.word	0x20000058
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005dd0:	4b8c      	ldr	r3, [pc, #560]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1ea      	bne.n	8005db4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0304 	and.w	r3, r3, #4
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 80a6 	beq.w	8005f38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dec:	2300      	movs	r3, #0
 8005dee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005df0:	4b84      	ldr	r3, [pc, #528]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <HAL_RCC_OscConfig+0x2b4>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <HAL_RCC_OscConfig+0x2b6>
 8005e00:	2300      	movs	r3, #0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00d      	beq.n	8005e22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e06:	4b7f      	ldr	r3, [pc, #508]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e0a:	4a7e      	ldr	r2, [pc, #504]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e10:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e12:	4b7c      	ldr	r3, [pc, #496]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e22:	4b79      	ldr	r3, [pc, #484]	@ (8006008 <HAL_RCC_OscConfig+0x4bc>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d118      	bne.n	8005e60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e2e:	4b76      	ldr	r3, [pc, #472]	@ (8006008 <HAL_RCC_OscConfig+0x4bc>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a75      	ldr	r2, [pc, #468]	@ (8006008 <HAL_RCC_OscConfig+0x4bc>)
 8005e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e3a:	f7fd fa79 	bl	8003330 <HAL_GetTick>
 8005e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e42:	f7fd fa75 	bl	8003330 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e183      	b.n	800615c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e54:	4b6c      	ldr	r3, [pc, #432]	@ (8006008 <HAL_RCC_OscConfig+0x4bc>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0f0      	beq.n	8005e42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d108      	bne.n	8005e7a <HAL_RCC_OscConfig+0x32e>
 8005e68:	4b66      	ldr	r3, [pc, #408]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e6e:	4a65      	ldr	r2, [pc, #404]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005e70:	f043 0301 	orr.w	r3, r3, #1
 8005e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005e78:	e024      	b.n	8005ec4 <HAL_RCC_OscConfig+0x378>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	2b05      	cmp	r3, #5
 8005e80:	d110      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x358>
 8005e82:	4b60      	ldr	r3, [pc, #384]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e88:	4a5e      	ldr	r2, [pc, #376]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005e8a:	f043 0304 	orr.w	r3, r3, #4
 8005e8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005e92:	4b5c      	ldr	r3, [pc, #368]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e98:	4a5a      	ldr	r2, [pc, #360]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005e9a:	f043 0301 	orr.w	r3, r3, #1
 8005e9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ea2:	e00f      	b.n	8005ec4 <HAL_RCC_OscConfig+0x378>
 8005ea4:	4b57      	ldr	r3, [pc, #348]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eaa:	4a56      	ldr	r2, [pc, #344]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005eac:	f023 0301 	bic.w	r3, r3, #1
 8005eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005eb4:	4b53      	ldr	r3, [pc, #332]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eba:	4a52      	ldr	r2, [pc, #328]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005ebc:	f023 0304 	bic.w	r3, r3, #4
 8005ec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d016      	beq.n	8005efa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ecc:	f7fd fa30 	bl	8003330 <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ed2:	e00a      	b.n	8005eea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ed4:	f7fd fa2c 	bl	8003330 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e138      	b.n	800615c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eea:	4b46      	ldr	r3, [pc, #280]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0ed      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x388>
 8005ef8:	e015      	b.n	8005f26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005efa:	f7fd fa19 	bl	8003330 <HAL_GetTick>
 8005efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f00:	e00a      	b.n	8005f18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f02:	f7fd fa15 	bl	8003330 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e121      	b.n	800615c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f18:	4b3a      	ldr	r3, [pc, #232]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1ed      	bne.n	8005f02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f26:	7ffb      	ldrb	r3, [r7, #31]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d105      	bne.n	8005f38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f2c:	4b35      	ldr	r3, [pc, #212]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f30:	4a34      	ldr	r2, [pc, #208]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005f32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f36:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d03c      	beq.n	8005fbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d01c      	beq.n	8005f86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f52:	4a2c      	ldr	r2, [pc, #176]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005f54:	f043 0301 	orr.w	r3, r3, #1
 8005f58:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f5c:	f7fd f9e8 	bl	8003330 <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f64:	f7fd f9e4 	bl	8003330 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e0f2      	b.n	800615c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f76:	4b23      	ldr	r3, [pc, #140]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005f78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0ef      	beq.n	8005f64 <HAL_RCC_OscConfig+0x418>
 8005f84:	e01b      	b.n	8005fbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f86:	4b1f      	ldr	r3, [pc, #124]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005f88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005f8e:	f023 0301 	bic.w	r3, r3, #1
 8005f92:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f96:	f7fd f9cb 	bl	8003330 <HAL_GetTick>
 8005f9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f9c:	e008      	b.n	8005fb0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f9e:	f7fd f9c7 	bl	8003330 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e0d5      	b.n	800615c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fb0:	4b14      	ldr	r3, [pc, #80]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1ef      	bne.n	8005f9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 80c9 	beq.w	800615a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f003 030c 	and.w	r3, r3, #12
 8005fd0:	2b0c      	cmp	r3, #12
 8005fd2:	f000 8083 	beq.w	80060dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d15e      	bne.n	800609c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fde:	4b09      	ldr	r3, [pc, #36]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a08      	ldr	r2, [pc, #32]	@ (8006004 <HAL_RCC_OscConfig+0x4b8>)
 8005fe4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fea:	f7fd f9a1 	bl	8003330 <HAL_GetTick>
 8005fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ff0:	e00c      	b.n	800600c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ff2:	f7fd f99d 	bl	8003330 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d905      	bls.n	800600c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e0ab      	b.n	800615c <HAL_RCC_OscConfig+0x610>
 8006004:	40021000 	.word	0x40021000
 8006008:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800600c:	4b55      	ldr	r3, [pc, #340]	@ (8006164 <HAL_RCC_OscConfig+0x618>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1ec      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006018:	4b52      	ldr	r3, [pc, #328]	@ (8006164 <HAL_RCC_OscConfig+0x618>)
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	4b52      	ldr	r3, [pc, #328]	@ (8006168 <HAL_RCC_OscConfig+0x61c>)
 800601e:	4013      	ands	r3, r2
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6a11      	ldr	r1, [r2, #32]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006028:	3a01      	subs	r2, #1
 800602a:	0112      	lsls	r2, r2, #4
 800602c:	4311      	orrs	r1, r2
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006032:	0212      	lsls	r2, r2, #8
 8006034:	4311      	orrs	r1, r2
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800603a:	0852      	lsrs	r2, r2, #1
 800603c:	3a01      	subs	r2, #1
 800603e:	0552      	lsls	r2, r2, #21
 8006040:	4311      	orrs	r1, r2
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006046:	0852      	lsrs	r2, r2, #1
 8006048:	3a01      	subs	r2, #1
 800604a:	0652      	lsls	r2, r2, #25
 800604c:	4311      	orrs	r1, r2
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006052:	06d2      	lsls	r2, r2, #27
 8006054:	430a      	orrs	r2, r1
 8006056:	4943      	ldr	r1, [pc, #268]	@ (8006164 <HAL_RCC_OscConfig+0x618>)
 8006058:	4313      	orrs	r3, r2
 800605a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800605c:	4b41      	ldr	r3, [pc, #260]	@ (8006164 <HAL_RCC_OscConfig+0x618>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a40      	ldr	r2, [pc, #256]	@ (8006164 <HAL_RCC_OscConfig+0x618>)
 8006062:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006066:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006068:	4b3e      	ldr	r3, [pc, #248]	@ (8006164 <HAL_RCC_OscConfig+0x618>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	4a3d      	ldr	r2, [pc, #244]	@ (8006164 <HAL_RCC_OscConfig+0x618>)
 800606e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006072:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006074:	f7fd f95c 	bl	8003330 <HAL_GetTick>
 8006078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800607c:	f7fd f958 	bl	8003330 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e066      	b.n	800615c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800608e:	4b35      	ldr	r3, [pc, #212]	@ (8006164 <HAL_RCC_OscConfig+0x618>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d0f0      	beq.n	800607c <HAL_RCC_OscConfig+0x530>
 800609a:	e05e      	b.n	800615a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800609c:	4b31      	ldr	r3, [pc, #196]	@ (8006164 <HAL_RCC_OscConfig+0x618>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a30      	ldr	r2, [pc, #192]	@ (8006164 <HAL_RCC_OscConfig+0x618>)
 80060a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a8:	f7fd f942 	bl	8003330 <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b0:	f7fd f93e 	bl	8003330 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e04c      	b.n	800615c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060c2:	4b28      	ldr	r3, [pc, #160]	@ (8006164 <HAL_RCC_OscConfig+0x618>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1f0      	bne.n	80060b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80060ce:	4b25      	ldr	r3, [pc, #148]	@ (8006164 <HAL_RCC_OscConfig+0x618>)
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	4924      	ldr	r1, [pc, #144]	@ (8006164 <HAL_RCC_OscConfig+0x618>)
 80060d4:	4b25      	ldr	r3, [pc, #148]	@ (800616c <HAL_RCC_OscConfig+0x620>)
 80060d6:	4013      	ands	r3, r2
 80060d8:	60cb      	str	r3, [r1, #12]
 80060da:	e03e      	b.n	800615a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e039      	b.n	800615c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80060e8:	4b1e      	ldr	r3, [pc, #120]	@ (8006164 <HAL_RCC_OscConfig+0x618>)
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f003 0203 	and.w	r2, r3, #3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d12c      	bne.n	8006156 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006106:	3b01      	subs	r3, #1
 8006108:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800610a:	429a      	cmp	r2, r3
 800610c:	d123      	bne.n	8006156 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006118:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800611a:	429a      	cmp	r2, r3
 800611c:	d11b      	bne.n	8006156 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006128:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800612a:	429a      	cmp	r2, r3
 800612c:	d113      	bne.n	8006156 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006138:	085b      	lsrs	r3, r3, #1
 800613a:	3b01      	subs	r3, #1
 800613c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800613e:	429a      	cmp	r2, r3
 8006140:	d109      	bne.n	8006156 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800614c:	085b      	lsrs	r3, r3, #1
 800614e:	3b01      	subs	r3, #1
 8006150:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006152:	429a      	cmp	r2, r3
 8006154:	d001      	beq.n	800615a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e000      	b.n	800615c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3720      	adds	r7, #32
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	40021000 	.word	0x40021000
 8006168:	019f800c 	.word	0x019f800c
 800616c:	feeefffc 	.word	0xfeeefffc

08006170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800617a:	2300      	movs	r3, #0
 800617c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e11e      	b.n	80063c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006188:	4b91      	ldr	r3, [pc, #580]	@ (80063d0 <HAL_RCC_ClockConfig+0x260>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 030f 	and.w	r3, r3, #15
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	429a      	cmp	r2, r3
 8006194:	d910      	bls.n	80061b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006196:	4b8e      	ldr	r3, [pc, #568]	@ (80063d0 <HAL_RCC_ClockConfig+0x260>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f023 020f 	bic.w	r2, r3, #15
 800619e:	498c      	ldr	r1, [pc, #560]	@ (80063d0 <HAL_RCC_ClockConfig+0x260>)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061a6:	4b8a      	ldr	r3, [pc, #552]	@ (80063d0 <HAL_RCC_ClockConfig+0x260>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d001      	beq.n	80061b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e106      	b.n	80063c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d073      	beq.n	80062ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d129      	bne.n	8006220 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061cc:	4b81      	ldr	r3, [pc, #516]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e0f4      	b.n	80063c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80061dc:	f000 f99e 	bl	800651c <RCC_GetSysClockFreqFromPLLSource>
 80061e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	4a7c      	ldr	r2, [pc, #496]	@ (80063d8 <HAL_RCC_ClockConfig+0x268>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d93f      	bls.n	800626a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80061ea:	4b7a      	ldr	r3, [pc, #488]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d009      	beq.n	800620a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d033      	beq.n	800626a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006206:	2b00      	cmp	r3, #0
 8006208:	d12f      	bne.n	800626a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800620a:	4b72      	ldr	r3, [pc, #456]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006212:	4a70      	ldr	r2, [pc, #448]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 8006214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006218:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800621a:	2380      	movs	r3, #128	@ 0x80
 800621c:	617b      	str	r3, [r7, #20]
 800621e:	e024      	b.n	800626a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	2b02      	cmp	r3, #2
 8006226:	d107      	bne.n	8006238 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006228:	4b6a      	ldr	r3, [pc, #424]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d109      	bne.n	8006248 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e0c6      	b.n	80063c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006238:	4b66      	ldr	r3, [pc, #408]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e0be      	b.n	80063c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006248:	f000 f8ce 	bl	80063e8 <HAL_RCC_GetSysClockFreq>
 800624c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	4a61      	ldr	r2, [pc, #388]	@ (80063d8 <HAL_RCC_ClockConfig+0x268>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d909      	bls.n	800626a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006256:	4b5f      	ldr	r3, [pc, #380]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800625e:	4a5d      	ldr	r2, [pc, #372]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 8006260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006264:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006266:	2380      	movs	r3, #128	@ 0x80
 8006268:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800626a:	4b5a      	ldr	r3, [pc, #360]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f023 0203 	bic.w	r2, r3, #3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	4957      	ldr	r1, [pc, #348]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 8006278:	4313      	orrs	r3, r2
 800627a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800627c:	f7fd f858 	bl	8003330 <HAL_GetTick>
 8006280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006282:	e00a      	b.n	800629a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006284:	f7fd f854 	bl	8003330 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006292:	4293      	cmp	r3, r2
 8006294:	d901      	bls.n	800629a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e095      	b.n	80063c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800629a:	4b4e      	ldr	r3, [pc, #312]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f003 020c 	and.w	r2, r3, #12
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d1eb      	bne.n	8006284 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d023      	beq.n	8006300 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d005      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062c4:	4b43      	ldr	r3, [pc, #268]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	4a42      	ldr	r2, [pc, #264]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 80062ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80062ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d007      	beq.n	80062ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80062dc:	4b3d      	ldr	r3, [pc, #244]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062e4:	4a3b      	ldr	r2, [pc, #236]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 80062e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80062ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062ec:	4b39      	ldr	r3, [pc, #228]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	4936      	ldr	r1, [pc, #216]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	608b      	str	r3, [r1, #8]
 80062fe:	e008      	b.n	8006312 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2b80      	cmp	r3, #128	@ 0x80
 8006304:	d105      	bne.n	8006312 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006306:	4b33      	ldr	r3, [pc, #204]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	4a32      	ldr	r2, [pc, #200]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 800630c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006310:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006312:	4b2f      	ldr	r3, [pc, #188]	@ (80063d0 <HAL_RCC_ClockConfig+0x260>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 030f 	and.w	r3, r3, #15
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	429a      	cmp	r2, r3
 800631e:	d21d      	bcs.n	800635c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006320:	4b2b      	ldr	r3, [pc, #172]	@ (80063d0 <HAL_RCC_ClockConfig+0x260>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f023 020f 	bic.w	r2, r3, #15
 8006328:	4929      	ldr	r1, [pc, #164]	@ (80063d0 <HAL_RCC_ClockConfig+0x260>)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	4313      	orrs	r3, r2
 800632e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006330:	f7fc fffe 	bl	8003330 <HAL_GetTick>
 8006334:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006336:	e00a      	b.n	800634e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006338:	f7fc fffa 	bl	8003330 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006346:	4293      	cmp	r3, r2
 8006348:	d901      	bls.n	800634e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e03b      	b.n	80063c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800634e:	4b20      	ldr	r3, [pc, #128]	@ (80063d0 <HAL_RCC_ClockConfig+0x260>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	d1ed      	bne.n	8006338 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d008      	beq.n	800637a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006368:	4b1a      	ldr	r3, [pc, #104]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	4917      	ldr	r1, [pc, #92]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 8006376:	4313      	orrs	r3, r2
 8006378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0308 	and.w	r3, r3, #8
 8006382:	2b00      	cmp	r3, #0
 8006384:	d009      	beq.n	800639a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006386:	4b13      	ldr	r3, [pc, #76]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	490f      	ldr	r1, [pc, #60]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 8006396:	4313      	orrs	r3, r2
 8006398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800639a:	f000 f825 	bl	80063e8 <HAL_RCC_GetSysClockFreq>
 800639e:	4602      	mov	r2, r0
 80063a0:	4b0c      	ldr	r3, [pc, #48]	@ (80063d4 <HAL_RCC_ClockConfig+0x264>)
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	091b      	lsrs	r3, r3, #4
 80063a6:	f003 030f 	and.w	r3, r3, #15
 80063aa:	490c      	ldr	r1, [pc, #48]	@ (80063dc <HAL_RCC_ClockConfig+0x26c>)
 80063ac:	5ccb      	ldrb	r3, [r1, r3]
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	fa22 f303 	lsr.w	r3, r2, r3
 80063b6:	4a0a      	ldr	r2, [pc, #40]	@ (80063e0 <HAL_RCC_ClockConfig+0x270>)
 80063b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80063ba:	4b0a      	ldr	r3, [pc, #40]	@ (80063e4 <HAL_RCC_ClockConfig+0x274>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fc ff6a 	bl	8003298 <HAL_InitTick>
 80063c4:	4603      	mov	r3, r0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40022000 	.word	0x40022000
 80063d4:	40021000 	.word	0x40021000
 80063d8:	04c4b400 	.word	0x04c4b400
 80063dc:	0800cccc 	.word	0x0800cccc
 80063e0:	20000054 	.word	0x20000054
 80063e4:	20000058 	.word	0x20000058

080063e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80063ee:	4b2c      	ldr	r3, [pc, #176]	@ (80064a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f003 030c 	and.w	r3, r3, #12
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d102      	bne.n	8006400 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80063fa:	4b2a      	ldr	r3, [pc, #168]	@ (80064a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80063fc:	613b      	str	r3, [r7, #16]
 80063fe:	e047      	b.n	8006490 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006400:	4b27      	ldr	r3, [pc, #156]	@ (80064a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f003 030c 	and.w	r3, r3, #12
 8006408:	2b08      	cmp	r3, #8
 800640a:	d102      	bne.n	8006412 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800640c:	4b26      	ldr	r3, [pc, #152]	@ (80064a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	e03e      	b.n	8006490 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006412:	4b23      	ldr	r3, [pc, #140]	@ (80064a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f003 030c 	and.w	r3, r3, #12
 800641a:	2b0c      	cmp	r3, #12
 800641c:	d136      	bne.n	800648c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800641e:	4b20      	ldr	r3, [pc, #128]	@ (80064a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006428:	4b1d      	ldr	r3, [pc, #116]	@ (80064a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	091b      	lsrs	r3, r3, #4
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	3301      	adds	r3, #1
 8006434:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b03      	cmp	r3, #3
 800643a:	d10c      	bne.n	8006456 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800643c:	4a1a      	ldr	r2, [pc, #104]	@ (80064a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	fbb2 f3f3 	udiv	r3, r2, r3
 8006444:	4a16      	ldr	r2, [pc, #88]	@ (80064a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006446:	68d2      	ldr	r2, [r2, #12]
 8006448:	0a12      	lsrs	r2, r2, #8
 800644a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800644e:	fb02 f303 	mul.w	r3, r2, r3
 8006452:	617b      	str	r3, [r7, #20]
      break;
 8006454:	e00c      	b.n	8006470 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006456:	4a13      	ldr	r2, [pc, #76]	@ (80064a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	fbb2 f3f3 	udiv	r3, r2, r3
 800645e:	4a10      	ldr	r2, [pc, #64]	@ (80064a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006460:	68d2      	ldr	r2, [r2, #12]
 8006462:	0a12      	lsrs	r2, r2, #8
 8006464:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006468:	fb02 f303 	mul.w	r3, r2, r3
 800646c:	617b      	str	r3, [r7, #20]
      break;
 800646e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006470:	4b0b      	ldr	r3, [pc, #44]	@ (80064a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	0e5b      	lsrs	r3, r3, #25
 8006476:	f003 0303 	and.w	r3, r3, #3
 800647a:	3301      	adds	r3, #1
 800647c:	005b      	lsls	r3, r3, #1
 800647e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	fbb2 f3f3 	udiv	r3, r2, r3
 8006488:	613b      	str	r3, [r7, #16]
 800648a:	e001      	b.n	8006490 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800648c:	2300      	movs	r3, #0
 800648e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006490:	693b      	ldr	r3, [r7, #16]
}
 8006492:	4618      	mov	r0, r3
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40021000 	.word	0x40021000
 80064a4:	00f42400 	.word	0x00f42400
 80064a8:	007a1200 	.word	0x007a1200

080064ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064b0:	4b03      	ldr	r3, [pc, #12]	@ (80064c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80064b2:	681b      	ldr	r3, [r3, #0]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20000054 	.word	0x20000054

080064c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80064c8:	f7ff fff0 	bl	80064ac <HAL_RCC_GetHCLKFreq>
 80064cc:	4602      	mov	r2, r0
 80064ce:	4b06      	ldr	r3, [pc, #24]	@ (80064e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	0a1b      	lsrs	r3, r3, #8
 80064d4:	f003 0307 	and.w	r3, r3, #7
 80064d8:	4904      	ldr	r1, [pc, #16]	@ (80064ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80064da:	5ccb      	ldrb	r3, [r1, r3]
 80064dc:	f003 031f 	and.w	r3, r3, #31
 80064e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	40021000 	.word	0x40021000
 80064ec:	0800ccdc 	.word	0x0800ccdc

080064f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80064f4:	f7ff ffda 	bl	80064ac <HAL_RCC_GetHCLKFreq>
 80064f8:	4602      	mov	r2, r0
 80064fa:	4b06      	ldr	r3, [pc, #24]	@ (8006514 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	0adb      	lsrs	r3, r3, #11
 8006500:	f003 0307 	and.w	r3, r3, #7
 8006504:	4904      	ldr	r1, [pc, #16]	@ (8006518 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006506:	5ccb      	ldrb	r3, [r1, r3]
 8006508:	f003 031f 	and.w	r3, r3, #31
 800650c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006510:	4618      	mov	r0, r3
 8006512:	bd80      	pop	{r7, pc}
 8006514:	40021000 	.word	0x40021000
 8006518:	0800ccdc 	.word	0x0800ccdc

0800651c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006522:	4b1e      	ldr	r3, [pc, #120]	@ (800659c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f003 0303 	and.w	r3, r3, #3
 800652a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800652c:	4b1b      	ldr	r3, [pc, #108]	@ (800659c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	091b      	lsrs	r3, r3, #4
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	3301      	adds	r3, #1
 8006538:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b03      	cmp	r3, #3
 800653e:	d10c      	bne.n	800655a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006540:	4a17      	ldr	r2, [pc, #92]	@ (80065a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	fbb2 f3f3 	udiv	r3, r2, r3
 8006548:	4a14      	ldr	r2, [pc, #80]	@ (800659c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800654a:	68d2      	ldr	r2, [r2, #12]
 800654c:	0a12      	lsrs	r2, r2, #8
 800654e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006552:	fb02 f303 	mul.w	r3, r2, r3
 8006556:	617b      	str	r3, [r7, #20]
    break;
 8006558:	e00c      	b.n	8006574 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800655a:	4a12      	ldr	r2, [pc, #72]	@ (80065a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006562:	4a0e      	ldr	r2, [pc, #56]	@ (800659c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006564:	68d2      	ldr	r2, [r2, #12]
 8006566:	0a12      	lsrs	r2, r2, #8
 8006568:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800656c:	fb02 f303 	mul.w	r3, r2, r3
 8006570:	617b      	str	r3, [r7, #20]
    break;
 8006572:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006574:	4b09      	ldr	r3, [pc, #36]	@ (800659c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	0e5b      	lsrs	r3, r3, #25
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	3301      	adds	r3, #1
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	fbb2 f3f3 	udiv	r3, r2, r3
 800658c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800658e:	687b      	ldr	r3, [r7, #4]
}
 8006590:	4618      	mov	r0, r3
 8006592:	371c      	adds	r7, #28
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	40021000 	.word	0x40021000
 80065a0:	007a1200 	.word	0x007a1200
 80065a4:	00f42400 	.word	0x00f42400

080065a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065b0:	2300      	movs	r3, #0
 80065b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065b4:	2300      	movs	r3, #0
 80065b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 8098 	beq.w	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065c6:	2300      	movs	r3, #0
 80065c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065ca:	4b43      	ldr	r3, [pc, #268]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10d      	bne.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065d6:	4b40      	ldr	r3, [pc, #256]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065da:	4a3f      	ldr	r2, [pc, #252]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80065e2:	4b3d      	ldr	r3, [pc, #244]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065ea:	60bb      	str	r3, [r7, #8]
 80065ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ee:	2301      	movs	r3, #1
 80065f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065f2:	4b3a      	ldr	r3, [pc, #232]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a39      	ldr	r2, [pc, #228]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80065f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065fe:	f7fc fe97 	bl	8003330 <HAL_GetTick>
 8006602:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006604:	e009      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006606:	f7fc fe93 	bl	8003330 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d902      	bls.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	74fb      	strb	r3, [r7, #19]
        break;
 8006618:	e005      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800661a:	4b30      	ldr	r3, [pc, #192]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0ef      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006626:	7cfb      	ldrb	r3, [r7, #19]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d159      	bne.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800662c:	4b2a      	ldr	r3, [pc, #168]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800662e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006636:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d01e      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	429a      	cmp	r2, r3
 8006646:	d019      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006648:	4b23      	ldr	r3, [pc, #140]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800664a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800664e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006652:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006654:	4b20      	ldr	r3, [pc, #128]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800665a:	4a1f      	ldr	r2, [pc, #124]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800665c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006660:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006664:	4b1c      	ldr	r3, [pc, #112]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800666a:	4a1b      	ldr	r2, [pc, #108]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800666c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006670:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006674:	4a18      	ldr	r2, [pc, #96]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d016      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006686:	f7fc fe53 	bl	8003330 <HAL_GetTick>
 800668a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800668c:	e00b      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800668e:	f7fc fe4f 	bl	8003330 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800669c:	4293      	cmp	r3, r2
 800669e:	d902      	bls.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	74fb      	strb	r3, [r7, #19]
            break;
 80066a4:	e006      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066a6:	4b0c      	ldr	r3, [pc, #48]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0ec      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80066b4:	7cfb      	ldrb	r3, [r7, #19]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10b      	bne.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066ba:	4b07      	ldr	r3, [pc, #28]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c8:	4903      	ldr	r1, [pc, #12]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80066d0:	e008      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066d2:	7cfb      	ldrb	r3, [r7, #19]
 80066d4:	74bb      	strb	r3, [r7, #18]
 80066d6:	e005      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80066d8:	40021000 	.word	0x40021000
 80066dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e0:	7cfb      	ldrb	r3, [r7, #19]
 80066e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066e4:	7c7b      	ldrb	r3, [r7, #17]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d105      	bne.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066ea:	4ba6      	ldr	r3, [pc, #664]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ee:	4aa5      	ldr	r2, [pc, #660]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006702:	4ba0      	ldr	r3, [pc, #640]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006708:	f023 0203 	bic.w	r2, r3, #3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	499c      	ldr	r1, [pc, #624]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006712:	4313      	orrs	r3, r2
 8006714:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00a      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006724:	4b97      	ldr	r3, [pc, #604]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800672a:	f023 020c 	bic.w	r2, r3, #12
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	4994      	ldr	r1, [pc, #592]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006734:	4313      	orrs	r3, r2
 8006736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0304 	and.w	r3, r3, #4
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00a      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006746:	4b8f      	ldr	r3, [pc, #572]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800674c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	498b      	ldr	r1, [pc, #556]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006756:	4313      	orrs	r3, r2
 8006758:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0308 	and.w	r3, r3, #8
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00a      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006768:	4b86      	ldr	r3, [pc, #536]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800676a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800676e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	4983      	ldr	r1, [pc, #524]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006778:	4313      	orrs	r3, r2
 800677a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800678a:	4b7e      	ldr	r3, [pc, #504]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800678c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006790:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	497a      	ldr	r1, [pc, #488]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800679a:	4313      	orrs	r3, r2
 800679c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00a      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067ac:	4b75      	ldr	r3, [pc, #468]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	4972      	ldr	r1, [pc, #456]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067ce:	4b6d      	ldr	r3, [pc, #436]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	4969      	ldr	r1, [pc, #420]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00a      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067f0:	4b64      	ldr	r3, [pc, #400]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	4961      	ldr	r1, [pc, #388]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006800:	4313      	orrs	r3, r2
 8006802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006812:	4b5c      	ldr	r3, [pc, #368]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006818:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006820:	4958      	ldr	r1, [pc, #352]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006822:	4313      	orrs	r3, r2
 8006824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006830:	2b00      	cmp	r3, #0
 8006832:	d015      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006834:	4b53      	ldr	r3, [pc, #332]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800683a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006842:	4950      	ldr	r1, [pc, #320]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006844:	4313      	orrs	r3, r2
 8006846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006852:	d105      	bne.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006854:	4b4b      	ldr	r3, [pc, #300]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	4a4a      	ldr	r2, [pc, #296]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800685a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800685e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006868:	2b00      	cmp	r3, #0
 800686a:	d015      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800686c:	4b45      	ldr	r3, [pc, #276]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800686e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006872:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687a:	4942      	ldr	r1, [pc, #264]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006886:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800688a:	d105      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800688c:	4b3d      	ldr	r3, [pc, #244]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	4a3c      	ldr	r2, [pc, #240]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006892:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006896:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d015      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80068a4:	4b37      	ldr	r3, [pc, #220]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b2:	4934      	ldr	r1, [pc, #208]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068c2:	d105      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068c4:	4b2f      	ldr	r3, [pc, #188]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	4a2e      	ldr	r2, [pc, #184]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d015      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068dc:	4b29      	ldr	r3, [pc, #164]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ea:	4926      	ldr	r1, [pc, #152]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068fa:	d105      	bne.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068fc:	4b21      	ldr	r3, [pc, #132]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	4a20      	ldr	r2, [pc, #128]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006906:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d015      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006914:	4b1b      	ldr	r3, [pc, #108]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800691a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006922:	4918      	ldr	r1, [pc, #96]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006924:	4313      	orrs	r3, r2
 8006926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006932:	d105      	bne.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006934:	4b13      	ldr	r3, [pc, #76]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	4a12      	ldr	r2, [pc, #72]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800693a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800693e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d015      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800694c:	4b0d      	ldr	r3, [pc, #52]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800694e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006952:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800695a:	490a      	ldr	r1, [pc, #40]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800695c:	4313      	orrs	r3, r2
 800695e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006966:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800696a:	d105      	bne.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800696c:	4b05      	ldr	r3, [pc, #20]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	4a04      	ldr	r2, [pc, #16]	@ (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006972:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006976:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006978:	7cbb      	ldrb	r3, [r7, #18]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	40021000 	.word	0x40021000

08006988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e049      	b.n	8006a2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fb fc04 	bl	80021bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	3304      	adds	r3, #4
 80069c4:	4619      	mov	r1, r3
 80069c6:	4610      	mov	r0, r2
 80069c8:	f000 fb12 	bl	8006ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
	...

08006a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d001      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e04a      	b.n	8006ae6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a21      	ldr	r2, [pc, #132]	@ (8006af4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d018      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x6c>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a7a:	d013      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x6c>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a1d      	ldr	r2, [pc, #116]	@ (8006af8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d00e      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x6c>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8006afc <HAL_TIM_Base_Start_IT+0xc4>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d009      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x6c>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a1a      	ldr	r2, [pc, #104]	@ (8006b00 <HAL_TIM_Base_Start_IT+0xc8>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d004      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x6c>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a19      	ldr	r2, [pc, #100]	@ (8006b04 <HAL_TIM_Base_Start_IT+0xcc>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d115      	bne.n	8006ad0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689a      	ldr	r2, [r3, #8]
 8006aaa:	4b17      	ldr	r3, [pc, #92]	@ (8006b08 <HAL_TIM_Base_Start_IT+0xd0>)
 8006aac:	4013      	ands	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b06      	cmp	r3, #6
 8006ab4:	d015      	beq.n	8006ae2 <HAL_TIM_Base_Start_IT+0xaa>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006abc:	d011      	beq.n	8006ae2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f042 0201 	orr.w	r2, r2, #1
 8006acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ace:	e008      	b.n	8006ae2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f042 0201 	orr.w	r2, r2, #1
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	e000      	b.n	8006ae4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	40012c00 	.word	0x40012c00
 8006af8:	40000400 	.word	0x40000400
 8006afc:	40000800 	.word	0x40000800
 8006b00:	40013400 	.word	0x40013400
 8006b04:	40014000 	.word	0x40014000
 8006b08:	00010007 	.word	0x00010007

08006b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d020      	beq.n	8006b70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d01b      	beq.n	8006b70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f06f 0202 	mvn.w	r2, #2
 8006b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fa2c 	bl	8006fb4 <HAL_TIM_IC_CaptureCallback>
 8006b5c:	e005      	b.n	8006b6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fa1e 	bl	8006fa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fa2f 	bl	8006fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	f003 0304 	and.w	r3, r3, #4
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d020      	beq.n	8006bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d01b      	beq.n	8006bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f06f 0204 	mvn.w	r2, #4
 8006b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2202      	movs	r2, #2
 8006b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fa06 	bl	8006fb4 <HAL_TIM_IC_CaptureCallback>
 8006ba8:	e005      	b.n	8006bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f9f8 	bl	8006fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fa09 	bl	8006fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d020      	beq.n	8006c08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f003 0308 	and.w	r3, r3, #8
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01b      	beq.n	8006c08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f06f 0208 	mvn.w	r2, #8
 8006bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2204      	movs	r2, #4
 8006bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f9e0 	bl	8006fb4 <HAL_TIM_IC_CaptureCallback>
 8006bf4:	e005      	b.n	8006c02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f9d2 	bl	8006fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f9e3 	bl	8006fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f003 0310 	and.w	r3, r3, #16
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d020      	beq.n	8006c54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f003 0310 	and.w	r3, r3, #16
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01b      	beq.n	8006c54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f06f 0210 	mvn.w	r2, #16
 8006c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2208      	movs	r2, #8
 8006c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f9ba 	bl	8006fb4 <HAL_TIM_IC_CaptureCallback>
 8006c40:	e005      	b.n	8006c4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f9ac 	bl	8006fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f9bd 	bl	8006fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00c      	beq.n	8006c78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d007      	beq.n	8006c78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0201 	mvn.w	r2, #1
 8006c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fa fa24 	bl	80010c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d104      	bne.n	8006c8c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00c      	beq.n	8006ca6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d007      	beq.n	8006ca6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fb69 	bl	8007378 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00c      	beq.n	8006cca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d007      	beq.n	8006cca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fb61 	bl	800738c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00c      	beq.n	8006cee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d007      	beq.n	8006cee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f977 	bl	8006fdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f003 0320 	and.w	r3, r3, #32
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00c      	beq.n	8006d12 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d007      	beq.n	8006d12 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f06f 0220 	mvn.w	r2, #32
 8006d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fb29 	bl	8007364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00c      	beq.n	8006d36 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d007      	beq.n	8006d36 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fb35 	bl	80073a0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00c      	beq.n	8006d5a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d007      	beq.n	8006d5a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fb2d 	bl	80073b4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00c      	beq.n	8006d7e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d007      	beq.n	8006d7e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fb25 	bl	80073c8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00c      	beq.n	8006da2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d007      	beq.n	8006da2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fb1d 	bl	80073dc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006da2:	bf00      	nop
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d101      	bne.n	8006dc8 <HAL_TIM_ConfigClockSource+0x1c>
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	e0de      	b.n	8006f86 <HAL_TIM_ConfigClockSource+0x1da>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006de6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006df2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a63      	ldr	r2, [pc, #396]	@ (8006f90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	f000 80a9 	beq.w	8006f5a <HAL_TIM_ConfigClockSource+0x1ae>
 8006e08:	4a61      	ldr	r2, [pc, #388]	@ (8006f90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	f200 80ae 	bhi.w	8006f6c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e10:	4a60      	ldr	r2, [pc, #384]	@ (8006f94 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	f000 80a1 	beq.w	8006f5a <HAL_TIM_ConfigClockSource+0x1ae>
 8006e18:	4a5e      	ldr	r2, [pc, #376]	@ (8006f94 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	f200 80a6 	bhi.w	8006f6c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e20:	4a5d      	ldr	r2, [pc, #372]	@ (8006f98 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	f000 8099 	beq.w	8006f5a <HAL_TIM_ConfigClockSource+0x1ae>
 8006e28:	4a5b      	ldr	r2, [pc, #364]	@ (8006f98 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	f200 809e 	bhi.w	8006f6c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e30:	4a5a      	ldr	r2, [pc, #360]	@ (8006f9c <HAL_TIM_ConfigClockSource+0x1f0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	f000 8091 	beq.w	8006f5a <HAL_TIM_ConfigClockSource+0x1ae>
 8006e38:	4a58      	ldr	r2, [pc, #352]	@ (8006f9c <HAL_TIM_ConfigClockSource+0x1f0>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	f200 8096 	bhi.w	8006f6c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006e44:	f000 8089 	beq.w	8006f5a <HAL_TIM_ConfigClockSource+0x1ae>
 8006e48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006e4c:	f200 808e 	bhi.w	8006f6c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e54:	d03e      	beq.n	8006ed4 <HAL_TIM_ConfigClockSource+0x128>
 8006e56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e5a:	f200 8087 	bhi.w	8006f6c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e62:	f000 8086 	beq.w	8006f72 <HAL_TIM_ConfigClockSource+0x1c6>
 8006e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e6a:	d87f      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e6c:	2b70      	cmp	r3, #112	@ 0x70
 8006e6e:	d01a      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0xfa>
 8006e70:	2b70      	cmp	r3, #112	@ 0x70
 8006e72:	d87b      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e74:	2b60      	cmp	r3, #96	@ 0x60
 8006e76:	d050      	beq.n	8006f1a <HAL_TIM_ConfigClockSource+0x16e>
 8006e78:	2b60      	cmp	r3, #96	@ 0x60
 8006e7a:	d877      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e7c:	2b50      	cmp	r3, #80	@ 0x50
 8006e7e:	d03c      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0x14e>
 8006e80:	2b50      	cmp	r3, #80	@ 0x50
 8006e82:	d873      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e84:	2b40      	cmp	r3, #64	@ 0x40
 8006e86:	d058      	beq.n	8006f3a <HAL_TIM_ConfigClockSource+0x18e>
 8006e88:	2b40      	cmp	r3, #64	@ 0x40
 8006e8a:	d86f      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e8c:	2b30      	cmp	r3, #48	@ 0x30
 8006e8e:	d064      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x1ae>
 8006e90:	2b30      	cmp	r3, #48	@ 0x30
 8006e92:	d86b      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	d060      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x1ae>
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	d867      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x1c0>
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d05c      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x1ae>
 8006ea0:	2b10      	cmp	r3, #16
 8006ea2:	d05a      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x1ae>
 8006ea4:	e062      	b.n	8006f6c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006eb6:	f000 f9b3 	bl	8007220 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ec8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	609a      	str	r2, [r3, #8]
      break;
 8006ed2:	e04f      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ee4:	f000 f99c 	bl	8007220 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689a      	ldr	r2, [r3, #8]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ef6:	609a      	str	r2, [r3, #8]
      break;
 8006ef8:	e03c      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f06:	461a      	mov	r2, r3
 8006f08:	f000 f90e 	bl	8007128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2150      	movs	r1, #80	@ 0x50
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 f967 	bl	80071e6 <TIM_ITRx_SetConfig>
      break;
 8006f18:	e02c      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f26:	461a      	mov	r2, r3
 8006f28:	f000 f92d 	bl	8007186 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2160      	movs	r1, #96	@ 0x60
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 f957 	bl	80071e6 <TIM_ITRx_SetConfig>
      break;
 8006f38:	e01c      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f46:	461a      	mov	r2, r3
 8006f48:	f000 f8ee 	bl	8007128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2140      	movs	r1, #64	@ 0x40
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 f947 	bl	80071e6 <TIM_ITRx_SetConfig>
      break;
 8006f58:	e00c      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4619      	mov	r1, r3
 8006f64:	4610      	mov	r0, r2
 8006f66:	f000 f93e 	bl	80071e6 <TIM_ITRx_SetConfig>
      break;
 8006f6a:	e003      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f70:	e000      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006f72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	00100070 	.word	0x00100070
 8006f94:	00100040 	.word	0x00100040
 8006f98:	00100030 	.word	0x00100030
 8006f9c:	00100020 	.word	0x00100020

08006fa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a42      	ldr	r2, [pc, #264]	@ (800710c <TIM_Base_SetConfig+0x11c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d00f      	beq.n	8007028 <TIM_Base_SetConfig+0x38>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800700e:	d00b      	beq.n	8007028 <TIM_Base_SetConfig+0x38>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a3f      	ldr	r2, [pc, #252]	@ (8007110 <TIM_Base_SetConfig+0x120>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d007      	beq.n	8007028 <TIM_Base_SetConfig+0x38>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a3e      	ldr	r2, [pc, #248]	@ (8007114 <TIM_Base_SetConfig+0x124>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d003      	beq.n	8007028 <TIM_Base_SetConfig+0x38>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a3d      	ldr	r2, [pc, #244]	@ (8007118 <TIM_Base_SetConfig+0x128>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d108      	bne.n	800703a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800702e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a33      	ldr	r2, [pc, #204]	@ (800710c <TIM_Base_SetConfig+0x11c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d01b      	beq.n	800707a <TIM_Base_SetConfig+0x8a>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007048:	d017      	beq.n	800707a <TIM_Base_SetConfig+0x8a>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a30      	ldr	r2, [pc, #192]	@ (8007110 <TIM_Base_SetConfig+0x120>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d013      	beq.n	800707a <TIM_Base_SetConfig+0x8a>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a2f      	ldr	r2, [pc, #188]	@ (8007114 <TIM_Base_SetConfig+0x124>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d00f      	beq.n	800707a <TIM_Base_SetConfig+0x8a>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a2e      	ldr	r2, [pc, #184]	@ (8007118 <TIM_Base_SetConfig+0x128>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00b      	beq.n	800707a <TIM_Base_SetConfig+0x8a>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a2d      	ldr	r2, [pc, #180]	@ (800711c <TIM_Base_SetConfig+0x12c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d007      	beq.n	800707a <TIM_Base_SetConfig+0x8a>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a2c      	ldr	r2, [pc, #176]	@ (8007120 <TIM_Base_SetConfig+0x130>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d003      	beq.n	800707a <TIM_Base_SetConfig+0x8a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a2b      	ldr	r2, [pc, #172]	@ (8007124 <TIM_Base_SetConfig+0x134>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d108      	bne.n	800708c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	4313      	orrs	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	4313      	orrs	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a16      	ldr	r2, [pc, #88]	@ (800710c <TIM_Base_SetConfig+0x11c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00f      	beq.n	80070d8 <TIM_Base_SetConfig+0xe8>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a17      	ldr	r2, [pc, #92]	@ (8007118 <TIM_Base_SetConfig+0x128>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d00b      	beq.n	80070d8 <TIM_Base_SetConfig+0xe8>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a16      	ldr	r2, [pc, #88]	@ (800711c <TIM_Base_SetConfig+0x12c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d007      	beq.n	80070d8 <TIM_Base_SetConfig+0xe8>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a15      	ldr	r2, [pc, #84]	@ (8007120 <TIM_Base_SetConfig+0x130>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d003      	beq.n	80070d8 <TIM_Base_SetConfig+0xe8>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a14      	ldr	r2, [pc, #80]	@ (8007124 <TIM_Base_SetConfig+0x134>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d103      	bne.n	80070e0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	691a      	ldr	r2, [r3, #16]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d105      	bne.n	80070fe <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	f023 0201 	bic.w	r2, r3, #1
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	611a      	str	r2, [r3, #16]
  }
}
 80070fe:	bf00      	nop
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	40012c00 	.word	0x40012c00
 8007110:	40000400 	.word	0x40000400
 8007114:	40000800 	.word	0x40000800
 8007118:	40013400 	.word	0x40013400
 800711c:	40014000 	.word	0x40014000
 8007120:	40014400 	.word	0x40014400
 8007124:	40014800 	.word	0x40014800

08007128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	f023 0201 	bic.w	r2, r3, #1
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	4313      	orrs	r3, r2
 800715c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f023 030a 	bic.w	r3, r3, #10
 8007164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4313      	orrs	r3, r2
 800716c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	621a      	str	r2, [r3, #32]
}
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007186:	b480      	push	{r7}
 8007188:	b087      	sub	sp, #28
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a1b      	ldr	r3, [r3, #32]
 800719c:	f023 0210 	bic.w	r2, r3, #16
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	031b      	lsls	r3, r3, #12
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	011b      	lsls	r3, r3, #4
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	621a      	str	r2, [r3, #32]
}
 80071da:	bf00      	nop
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b085      	sub	sp, #20
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80071fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4313      	orrs	r3, r2
 8007208:	f043 0307 	orr.w	r3, r3, #7
 800720c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	609a      	str	r2, [r3, #8]
}
 8007214:	bf00      	nop
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800723a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	021a      	lsls	r2, r3, #8
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	431a      	orrs	r2, r3
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	4313      	orrs	r3, r2
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	4313      	orrs	r3, r2
 800724c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	609a      	str	r2, [r3, #8]
}
 8007254:	bf00      	nop
 8007256:	371c      	adds	r7, #28
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007270:	2b01      	cmp	r3, #1
 8007272:	d101      	bne.n	8007278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007274:	2302      	movs	r3, #2
 8007276:	e065      	b.n	8007344 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a2c      	ldr	r2, [pc, #176]	@ (8007350 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d004      	beq.n	80072ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a2b      	ldr	r2, [pc, #172]	@ (8007354 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d108      	bne.n	80072be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80072b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80072c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a1b      	ldr	r2, [pc, #108]	@ (8007350 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d018      	beq.n	8007318 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ee:	d013      	beq.n	8007318 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a18      	ldr	r2, [pc, #96]	@ (8007358 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d00e      	beq.n	8007318 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a17      	ldr	r2, [pc, #92]	@ (800735c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d009      	beq.n	8007318 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a12      	ldr	r2, [pc, #72]	@ (8007354 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d004      	beq.n	8007318 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a13      	ldr	r2, [pc, #76]	@ (8007360 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d10c      	bne.n	8007332 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800731e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	4313      	orrs	r3, r2
 8007328:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	40012c00 	.word	0x40012c00
 8007354:	40013400 	.word	0x40013400
 8007358:	40000400 	.word	0x40000400
 800735c:	40000800 	.word	0x40000800
 8007360:	40014000 	.word	0x40014000

08007364 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e042      	b.n	8007488 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007408:	2b00      	cmp	r3, #0
 800740a:	d106      	bne.n	800741a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f7fa fef7 	bl	8002208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2224      	movs	r2, #36	@ 0x24
 800741e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 0201 	bic.w	r2, r2, #1
 8007430:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 ffb0 	bl	80083a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fce1 	bl	8007e08 <UART_SetConfig>
 8007446:	4603      	mov	r3, r0
 8007448:	2b01      	cmp	r3, #1
 800744a:	d101      	bne.n	8007450 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e01b      	b.n	8007488 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800745e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689a      	ldr	r2, [r3, #8]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800746e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f042 0201 	orr.w	r2, r2, #1
 800747e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f001 f82f 	bl	80084e4 <UART_CheckIdleState>
 8007486:	4603      	mov	r3, r0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08a      	sub	sp, #40	@ 0x28
 8007494:	af02      	add	r7, sp, #8
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	603b      	str	r3, [r7, #0]
 800749c:	4613      	mov	r3, r2
 800749e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	d17b      	bne.n	80075a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <HAL_UART_Transmit+0x26>
 80074b0:	88fb      	ldrh	r3, [r7, #6]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d101      	bne.n	80074ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e074      	b.n	80075a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2221      	movs	r2, #33	@ 0x21
 80074c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074ca:	f7fb ff31 	bl	8003330 <HAL_GetTick>
 80074ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	88fa      	ldrh	r2, [r7, #6]
 80074d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	88fa      	ldrh	r2, [r7, #6]
 80074dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074e8:	d108      	bne.n	80074fc <HAL_UART_Transmit+0x6c>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d104      	bne.n	80074fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	61bb      	str	r3, [r7, #24]
 80074fa:	e003      	b.n	8007504 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007500:	2300      	movs	r3, #0
 8007502:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007504:	e030      	b.n	8007568 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2200      	movs	r2, #0
 800750e:	2180      	movs	r1, #128	@ 0x80
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f001 f891 	bl	8008638 <UART_WaitOnFlagUntilTimeout>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2220      	movs	r2, #32
 8007520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e03d      	b.n	80075a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10b      	bne.n	8007546 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800753c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	3302      	adds	r3, #2
 8007542:	61bb      	str	r3, [r7, #24]
 8007544:	e007      	b.n	8007556 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	781a      	ldrb	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	3301      	adds	r3, #1
 8007554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800755c:	b29b      	uxth	r3, r3
 800755e:	3b01      	subs	r3, #1
 8007560:	b29a      	uxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800756e:	b29b      	uxth	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1c8      	bne.n	8007506 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	2200      	movs	r2, #0
 800757c:	2140      	movs	r1, #64	@ 0x40
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f001 f85a 	bl	8008638 <UART_WaitOnFlagUntilTimeout>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d005      	beq.n	8007596 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2220      	movs	r2, #32
 800758e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e006      	b.n	80075a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2220      	movs	r2, #32
 800759a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	e000      	b.n	80075a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80075a2:	2302      	movs	r3, #2
  }
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3720      	adds	r7, #32
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b091      	sub	sp, #68	@ 0x44
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	4613      	mov	r3, r2
 80075b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075c0:	2b20      	cmp	r3, #32
 80075c2:	d178      	bne.n	80076b6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d002      	beq.n	80075d0 <HAL_UART_Transmit_IT+0x24>
 80075ca:	88fb      	ldrh	r3, [r7, #6]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e071      	b.n	80076b8 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	88fa      	ldrh	r2, [r7, #6]
 80075de:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	88fa      	ldrh	r2, [r7, #6]
 80075e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2221      	movs	r2, #33	@ 0x21
 80075fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007604:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007608:	d12a      	bne.n	8007660 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007612:	d107      	bne.n	8007624 <HAL_UART_Transmit_IT+0x78>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d103      	bne.n	8007624 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4a29      	ldr	r2, [pc, #164]	@ (80076c4 <HAL_UART_Transmit_IT+0x118>)
 8007620:	679a      	str	r2, [r3, #120]	@ 0x78
 8007622:	e002      	b.n	800762a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4a28      	ldr	r2, [pc, #160]	@ (80076c8 <HAL_UART_Transmit_IT+0x11c>)
 8007628:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3308      	adds	r3, #8
 8007630:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800763a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007640:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3308      	adds	r3, #8
 8007648:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800764a:	637a      	str	r2, [r7, #52]	@ 0x34
 800764c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007650:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007652:	e841 2300 	strex	r3, r2, [r1]
 8007656:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1e5      	bne.n	800762a <HAL_UART_Transmit_IT+0x7e>
 800765e:	e028      	b.n	80076b2 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007668:	d107      	bne.n	800767a <HAL_UART_Transmit_IT+0xce>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d103      	bne.n	800767a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	4a15      	ldr	r2, [pc, #84]	@ (80076cc <HAL_UART_Transmit_IT+0x120>)
 8007676:	679a      	str	r2, [r3, #120]	@ 0x78
 8007678:	e002      	b.n	8007680 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4a14      	ldr	r2, [pc, #80]	@ (80076d0 <HAL_UART_Transmit_IT+0x124>)
 800767e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	e853 3f00 	ldrex	r3, [r3]
 800768c:	613b      	str	r3, [r7, #16]
   return(result);
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	461a      	mov	r2, r3
 800769c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800769e:	623b      	str	r3, [r7, #32]
 80076a0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a2:	69f9      	ldr	r1, [r7, #28]
 80076a4:	6a3a      	ldr	r2, [r7, #32]
 80076a6:	e841 2300 	strex	r3, r2, [r1]
 80076aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1e6      	bne.n	8007680 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	e000      	b.n	80076b8 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80076b6:	2302      	movs	r3, #2
  }
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3744      	adds	r7, #68	@ 0x44
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	08008ca3 	.word	0x08008ca3
 80076c8:	08008bc3 	.word	0x08008bc3
 80076cc:	08008b01 	.word	0x08008b01
 80076d0:	08008a49 	.word	0x08008a49

080076d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08a      	sub	sp, #40	@ 0x28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	4613      	mov	r3, r2
 80076e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076e8:	2b20      	cmp	r3, #32
 80076ea:	d137      	bne.n	800775c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d002      	beq.n	80076f8 <HAL_UART_Receive_IT+0x24>
 80076f2:	88fb      	ldrh	r3, [r7, #6]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e030      	b.n	800775e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a18      	ldr	r2, [pc, #96]	@ (8007768 <HAL_UART_Receive_IT+0x94>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d01f      	beq.n	800774c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d018      	beq.n	800774c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	613b      	str	r3, [r7, #16]
   return(result);
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800772e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	461a      	mov	r2, r3
 8007736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007738:	623b      	str	r3, [r7, #32]
 800773a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773c:	69f9      	ldr	r1, [r7, #28]
 800773e:	6a3a      	ldr	r2, [r7, #32]
 8007740:	e841 2300 	strex	r3, r2, [r1]
 8007744:	61bb      	str	r3, [r7, #24]
   return(result);
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e6      	bne.n	800771a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800774c:	88fb      	ldrh	r3, [r7, #6]
 800774e:	461a      	mov	r2, r3
 8007750:	68b9      	ldr	r1, [r7, #8]
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 ffde 	bl	8008714 <UART_Start_Receive_IT>
 8007758:	4603      	mov	r3, r0
 800775a:	e000      	b.n	800775e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800775c:	2302      	movs	r3, #2
  }
}
 800775e:	4618      	mov	r0, r3
 8007760:	3728      	adds	r7, #40	@ 0x28
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	40008000 	.word	0x40008000

0800776c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b0ba      	sub	sp, #232	@ 0xe8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007792:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007796:	f640 030f 	movw	r3, #2063	@ 0x80f
 800779a:	4013      	ands	r3, r2
 800779c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80077a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d11b      	bne.n	80077e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ac:	f003 0320 	and.w	r3, r3, #32
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d015      	beq.n	80077e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077b8:	f003 0320 	and.w	r3, r3, #32
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d105      	bne.n	80077cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d009      	beq.n	80077e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 8300 	beq.w	8007dd6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	4798      	blx	r3
      }
      return;
 80077de:	e2fa      	b.n	8007dd6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80077e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 8123 	beq.w	8007a30 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80077ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80077ee:	4b8d      	ldr	r3, [pc, #564]	@ (8007a24 <HAL_UART_IRQHandler+0x2b8>)
 80077f0:	4013      	ands	r3, r2
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d106      	bne.n	8007804 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80077f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80077fa:	4b8b      	ldr	r3, [pc, #556]	@ (8007a28 <HAL_UART_IRQHandler+0x2bc>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 8116 	beq.w	8007a30 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b00      	cmp	r3, #0
 800780e:	d011      	beq.n	8007834 <HAL_UART_IRQHandler+0xc8>
 8007810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00b      	beq.n	8007834 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2201      	movs	r2, #1
 8007822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800782a:	f043 0201 	orr.w	r2, r3, #1
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007838:	f003 0302 	and.w	r3, r3, #2
 800783c:	2b00      	cmp	r3, #0
 800783e:	d011      	beq.n	8007864 <HAL_UART_IRQHandler+0xf8>
 8007840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2202      	movs	r2, #2
 8007852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800785a:	f043 0204 	orr.w	r2, r3, #4
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007868:	f003 0304 	and.w	r3, r3, #4
 800786c:	2b00      	cmp	r3, #0
 800786e:	d011      	beq.n	8007894 <HAL_UART_IRQHandler+0x128>
 8007870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007874:	f003 0301 	and.w	r3, r3, #1
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00b      	beq.n	8007894 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2204      	movs	r2, #4
 8007882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800788a:	f043 0202 	orr.w	r2, r3, #2
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007898:	f003 0308 	and.w	r3, r3, #8
 800789c:	2b00      	cmp	r3, #0
 800789e:	d017      	beq.n	80078d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d105      	bne.n	80078b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80078ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80078b0:	4b5c      	ldr	r3, [pc, #368]	@ (8007a24 <HAL_UART_IRQHandler+0x2b8>)
 80078b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00b      	beq.n	80078d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2208      	movs	r2, #8
 80078be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078c6:	f043 0208 	orr.w	r2, r3, #8
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d012      	beq.n	8007902 <HAL_UART_IRQHandler+0x196>
 80078dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00c      	beq.n	8007902 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078f8:	f043 0220 	orr.w	r2, r3, #32
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 8266 	beq.w	8007dda <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800790e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007912:	f003 0320 	and.w	r3, r3, #32
 8007916:	2b00      	cmp	r3, #0
 8007918:	d013      	beq.n	8007942 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800791a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800791e:	f003 0320 	and.w	r3, r3, #32
 8007922:	2b00      	cmp	r3, #0
 8007924:	d105      	bne.n	8007932 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800792a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d007      	beq.n	8007942 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007936:	2b00      	cmp	r3, #0
 8007938:	d003      	beq.n	8007942 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007948:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007956:	2b40      	cmp	r3, #64	@ 0x40
 8007958:	d005      	beq.n	8007966 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800795a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800795e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007962:	2b00      	cmp	r3, #0
 8007964:	d054      	beq.n	8007a10 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fff6 	bl	8008958 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007976:	2b40      	cmp	r3, #64	@ 0x40
 8007978:	d146      	bne.n	8007a08 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3308      	adds	r3, #8
 8007980:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007984:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007988:	e853 3f00 	ldrex	r3, [r3]
 800798c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007990:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3308      	adds	r3, #8
 80079a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80079a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80079aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80079b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80079be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1d9      	bne.n	800797a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d017      	beq.n	8007a00 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079d6:	4a15      	ldr	r2, [pc, #84]	@ (8007a2c <HAL_UART_IRQHandler+0x2c0>)
 80079d8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fd fce2 	bl	80053aa <HAL_DMA_Abort_IT>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d019      	beq.n	8007a20 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80079fa:	4610      	mov	r0, r2
 80079fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079fe:	e00f      	b.n	8007a20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7fb fbfd 	bl	8003200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a06:	e00b      	b.n	8007a20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7fb fbf9 	bl	8003200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a0e:	e007      	b.n	8007a20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7fb fbf5 	bl	8003200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007a1e:	e1dc      	b.n	8007dda <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a20:	bf00      	nop
    return;
 8007a22:	e1da      	b.n	8007dda <HAL_UART_IRQHandler+0x66e>
 8007a24:	10000001 	.word	0x10000001
 8007a28:	04000120 	.word	0x04000120
 8007a2c:	08008a25 	.word	0x08008a25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	f040 8170 	bne.w	8007d1a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a3e:	f003 0310 	and.w	r3, r3, #16
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 8169 	beq.w	8007d1a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a4c:	f003 0310 	and.w	r3, r3, #16
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 8162 	beq.w	8007d1a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2210      	movs	r2, #16
 8007a5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a68:	2b40      	cmp	r3, #64	@ 0x40
 8007a6a:	f040 80d8 	bne.w	8007c1e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 80af 	beq.w	8007be4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a90:	429a      	cmp	r2, r3
 8007a92:	f080 80a7 	bcs.w	8007be4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0320 	and.w	r3, r3, #32
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f040 8087 	bne.w	8007bc2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007ade:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ae2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007aea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007aee:	e841 2300 	strex	r3, r2, [r1]
 8007af2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1da      	bne.n	8007ab4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3308      	adds	r3, #8
 8007b04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b08:	e853 3f00 	ldrex	r3, [r3]
 8007b0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b10:	f023 0301 	bic.w	r3, r3, #1
 8007b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	3308      	adds	r3, #8
 8007b1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e1      	bne.n	8007afe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3308      	adds	r3, #8
 8007b40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3308      	adds	r3, #8
 8007b5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b66:	e841 2300 	strex	r3, r2, [r1]
 8007b6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1e3      	bne.n	8007b3a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2220      	movs	r2, #32
 8007b76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b90:	f023 0310 	bic.w	r3, r3, #16
 8007b94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ba2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ba4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ba8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e4      	bne.n	8007b80 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7fd fb9b 	bl	80052f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f907 	bl	8007df0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007be2:	e0fc      	b.n	8007dde <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	f040 80f5 	bne.w	8007dde <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0320 	and.w	r3, r3, #32
 8007c02:	2b20      	cmp	r3, #32
 8007c04:	f040 80eb 	bne.w	8007dde <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f8ea 	bl	8007df0 <HAL_UARTEx_RxEventCallback>
      return;
 8007c1c:	e0df      	b.n	8007dde <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 80d1 	beq.w	8007de2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007c40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 80cc 	beq.w	8007de2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c52:	e853 3f00 	ldrex	r3, [r3]
 8007c56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c74:	e841 2300 	strex	r3, r2, [r1]
 8007c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e4      	bne.n	8007c4a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3308      	adds	r3, #8
 8007c86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8a:	e853 3f00 	ldrex	r3, [r3]
 8007c8e:	623b      	str	r3, [r7, #32]
   return(result);
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c96:	f023 0301 	bic.w	r3, r3, #1
 8007c9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3308      	adds	r3, #8
 8007ca4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007ca8:	633a      	str	r2, [r7, #48]	@ 0x30
 8007caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e1      	bne.n	8007c80 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f023 0310 	bic.w	r3, r3, #16
 8007ce4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	461a      	mov	r2, r3
 8007cee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007cf2:	61fb      	str	r3, [r7, #28]
 8007cf4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf6:	69b9      	ldr	r1, [r7, #24]
 8007cf8:	69fa      	ldr	r2, [r7, #28]
 8007cfa:	e841 2300 	strex	r3, r2, [r1]
 8007cfe:	617b      	str	r3, [r7, #20]
   return(result);
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1e4      	bne.n	8007cd0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2202      	movs	r2, #2
 8007d0a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f86c 	bl	8007df0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d18:	e063      	b.n	8007de2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00e      	beq.n	8007d44 <HAL_UART_IRQHandler+0x5d8>
 8007d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d008      	beq.n	8007d44 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007d3a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f001 fd71 	bl	8009824 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d42:	e051      	b.n	8007de8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d014      	beq.n	8007d7a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d105      	bne.n	8007d68 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d008      	beq.n	8007d7a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d03a      	beq.n	8007de6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	4798      	blx	r3
    }
    return;
 8007d78:	e035      	b.n	8007de6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d009      	beq.n	8007d9a <HAL_UART_IRQHandler+0x62e>
 8007d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fffa 	bl	8008d8c <UART_EndTransmit_IT>
    return;
 8007d98:	e026      	b.n	8007de8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d009      	beq.n	8007dba <HAL_UART_IRQHandler+0x64e>
 8007da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007daa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f001 fd4a 	bl	800984c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007db8:	e016      	b.n	8007de8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d010      	beq.n	8007de8 <HAL_UART_IRQHandler+0x67c>
 8007dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	da0c      	bge.n	8007de8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f001 fd32 	bl	8009838 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dd4:	e008      	b.n	8007de8 <HAL_UART_IRQHandler+0x67c>
      return;
 8007dd6:	bf00      	nop
 8007dd8:	e006      	b.n	8007de8 <HAL_UART_IRQHandler+0x67c>
    return;
 8007dda:	bf00      	nop
 8007ddc:	e004      	b.n	8007de8 <HAL_UART_IRQHandler+0x67c>
      return;
 8007dde:	bf00      	nop
 8007de0:	e002      	b.n	8007de8 <HAL_UART_IRQHandler+0x67c>
      return;
 8007de2:	bf00      	nop
 8007de4:	e000      	b.n	8007de8 <HAL_UART_IRQHandler+0x67c>
    return;
 8007de6:	bf00      	nop
  }
}
 8007de8:	37e8      	adds	r7, #232	@ 0xe8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop

08007df0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e0c:	b08c      	sub	sp, #48	@ 0x30
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	689a      	ldr	r2, [r3, #8]
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	431a      	orrs	r2, r3
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	431a      	orrs	r2, r3
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	69db      	ldr	r3, [r3, #28]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	4bab      	ldr	r3, [pc, #684]	@ (80080e4 <UART_SetConfig+0x2dc>)
 8007e38:	4013      	ands	r3, r2
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	6812      	ldr	r2, [r2, #0]
 8007e3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e40:	430b      	orrs	r3, r1
 8007e42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4aa0      	ldr	r2, [pc, #640]	@ (80080e8 <UART_SetConfig+0x2e0>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d004      	beq.n	8007e74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e70:	4313      	orrs	r3, r2
 8007e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007e7e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	6812      	ldr	r2, [r2, #0]
 8007e86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e88:	430b      	orrs	r3, r1
 8007e8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e92:	f023 010f 	bic.w	r1, r3, #15
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a91      	ldr	r2, [pc, #580]	@ (80080ec <UART_SetConfig+0x2e4>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d125      	bne.n	8007ef8 <UART_SetConfig+0xf0>
 8007eac:	4b90      	ldr	r3, [pc, #576]	@ (80080f0 <UART_SetConfig+0x2e8>)
 8007eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eb2:	f003 0303 	and.w	r3, r3, #3
 8007eb6:	2b03      	cmp	r3, #3
 8007eb8:	d81a      	bhi.n	8007ef0 <UART_SetConfig+0xe8>
 8007eba:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec0 <UART_SetConfig+0xb8>)
 8007ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec0:	08007ed1 	.word	0x08007ed1
 8007ec4:	08007ee1 	.word	0x08007ee1
 8007ec8:	08007ed9 	.word	0x08007ed9
 8007ecc:	08007ee9 	.word	0x08007ee9
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ed6:	e0d6      	b.n	8008086 <UART_SetConfig+0x27e>
 8007ed8:	2302      	movs	r3, #2
 8007eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ede:	e0d2      	b.n	8008086 <UART_SetConfig+0x27e>
 8007ee0:	2304      	movs	r3, #4
 8007ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ee6:	e0ce      	b.n	8008086 <UART_SetConfig+0x27e>
 8007ee8:	2308      	movs	r3, #8
 8007eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eee:	e0ca      	b.n	8008086 <UART_SetConfig+0x27e>
 8007ef0:	2310      	movs	r3, #16
 8007ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ef6:	e0c6      	b.n	8008086 <UART_SetConfig+0x27e>
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a7d      	ldr	r2, [pc, #500]	@ (80080f4 <UART_SetConfig+0x2ec>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d138      	bne.n	8007f74 <UART_SetConfig+0x16c>
 8007f02:	4b7b      	ldr	r3, [pc, #492]	@ (80080f0 <UART_SetConfig+0x2e8>)
 8007f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f08:	f003 030c 	and.w	r3, r3, #12
 8007f0c:	2b0c      	cmp	r3, #12
 8007f0e:	d82d      	bhi.n	8007f6c <UART_SetConfig+0x164>
 8007f10:	a201      	add	r2, pc, #4	@ (adr r2, 8007f18 <UART_SetConfig+0x110>)
 8007f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f16:	bf00      	nop
 8007f18:	08007f4d 	.word	0x08007f4d
 8007f1c:	08007f6d 	.word	0x08007f6d
 8007f20:	08007f6d 	.word	0x08007f6d
 8007f24:	08007f6d 	.word	0x08007f6d
 8007f28:	08007f5d 	.word	0x08007f5d
 8007f2c:	08007f6d 	.word	0x08007f6d
 8007f30:	08007f6d 	.word	0x08007f6d
 8007f34:	08007f6d 	.word	0x08007f6d
 8007f38:	08007f55 	.word	0x08007f55
 8007f3c:	08007f6d 	.word	0x08007f6d
 8007f40:	08007f6d 	.word	0x08007f6d
 8007f44:	08007f6d 	.word	0x08007f6d
 8007f48:	08007f65 	.word	0x08007f65
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f52:	e098      	b.n	8008086 <UART_SetConfig+0x27e>
 8007f54:	2302      	movs	r3, #2
 8007f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f5a:	e094      	b.n	8008086 <UART_SetConfig+0x27e>
 8007f5c:	2304      	movs	r3, #4
 8007f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f62:	e090      	b.n	8008086 <UART_SetConfig+0x27e>
 8007f64:	2308      	movs	r3, #8
 8007f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f6a:	e08c      	b.n	8008086 <UART_SetConfig+0x27e>
 8007f6c:	2310      	movs	r3, #16
 8007f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f72:	e088      	b.n	8008086 <UART_SetConfig+0x27e>
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a5f      	ldr	r2, [pc, #380]	@ (80080f8 <UART_SetConfig+0x2f0>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d125      	bne.n	8007fca <UART_SetConfig+0x1c2>
 8007f7e:	4b5c      	ldr	r3, [pc, #368]	@ (80080f0 <UART_SetConfig+0x2e8>)
 8007f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f88:	2b30      	cmp	r3, #48	@ 0x30
 8007f8a:	d016      	beq.n	8007fba <UART_SetConfig+0x1b2>
 8007f8c:	2b30      	cmp	r3, #48	@ 0x30
 8007f8e:	d818      	bhi.n	8007fc2 <UART_SetConfig+0x1ba>
 8007f90:	2b20      	cmp	r3, #32
 8007f92:	d00a      	beq.n	8007faa <UART_SetConfig+0x1a2>
 8007f94:	2b20      	cmp	r3, #32
 8007f96:	d814      	bhi.n	8007fc2 <UART_SetConfig+0x1ba>
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d002      	beq.n	8007fa2 <UART_SetConfig+0x19a>
 8007f9c:	2b10      	cmp	r3, #16
 8007f9e:	d008      	beq.n	8007fb2 <UART_SetConfig+0x1aa>
 8007fa0:	e00f      	b.n	8007fc2 <UART_SetConfig+0x1ba>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fa8:	e06d      	b.n	8008086 <UART_SetConfig+0x27e>
 8007faa:	2302      	movs	r3, #2
 8007fac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fb0:	e069      	b.n	8008086 <UART_SetConfig+0x27e>
 8007fb2:	2304      	movs	r3, #4
 8007fb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fb8:	e065      	b.n	8008086 <UART_SetConfig+0x27e>
 8007fba:	2308      	movs	r3, #8
 8007fbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fc0:	e061      	b.n	8008086 <UART_SetConfig+0x27e>
 8007fc2:	2310      	movs	r3, #16
 8007fc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fc8:	e05d      	b.n	8008086 <UART_SetConfig+0x27e>
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a4b      	ldr	r2, [pc, #300]	@ (80080fc <UART_SetConfig+0x2f4>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d125      	bne.n	8008020 <UART_SetConfig+0x218>
 8007fd4:	4b46      	ldr	r3, [pc, #280]	@ (80080f0 <UART_SetConfig+0x2e8>)
 8007fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fda:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007fde:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fe0:	d016      	beq.n	8008010 <UART_SetConfig+0x208>
 8007fe2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fe4:	d818      	bhi.n	8008018 <UART_SetConfig+0x210>
 8007fe6:	2b80      	cmp	r3, #128	@ 0x80
 8007fe8:	d00a      	beq.n	8008000 <UART_SetConfig+0x1f8>
 8007fea:	2b80      	cmp	r3, #128	@ 0x80
 8007fec:	d814      	bhi.n	8008018 <UART_SetConfig+0x210>
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d002      	beq.n	8007ff8 <UART_SetConfig+0x1f0>
 8007ff2:	2b40      	cmp	r3, #64	@ 0x40
 8007ff4:	d008      	beq.n	8008008 <UART_SetConfig+0x200>
 8007ff6:	e00f      	b.n	8008018 <UART_SetConfig+0x210>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ffe:	e042      	b.n	8008086 <UART_SetConfig+0x27e>
 8008000:	2302      	movs	r3, #2
 8008002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008006:	e03e      	b.n	8008086 <UART_SetConfig+0x27e>
 8008008:	2304      	movs	r3, #4
 800800a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800800e:	e03a      	b.n	8008086 <UART_SetConfig+0x27e>
 8008010:	2308      	movs	r3, #8
 8008012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008016:	e036      	b.n	8008086 <UART_SetConfig+0x27e>
 8008018:	2310      	movs	r3, #16
 800801a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800801e:	e032      	b.n	8008086 <UART_SetConfig+0x27e>
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a30      	ldr	r2, [pc, #192]	@ (80080e8 <UART_SetConfig+0x2e0>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d12a      	bne.n	8008080 <UART_SetConfig+0x278>
 800802a:	4b31      	ldr	r3, [pc, #196]	@ (80080f0 <UART_SetConfig+0x2e8>)
 800802c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008030:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008034:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008038:	d01a      	beq.n	8008070 <UART_SetConfig+0x268>
 800803a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800803e:	d81b      	bhi.n	8008078 <UART_SetConfig+0x270>
 8008040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008044:	d00c      	beq.n	8008060 <UART_SetConfig+0x258>
 8008046:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800804a:	d815      	bhi.n	8008078 <UART_SetConfig+0x270>
 800804c:	2b00      	cmp	r3, #0
 800804e:	d003      	beq.n	8008058 <UART_SetConfig+0x250>
 8008050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008054:	d008      	beq.n	8008068 <UART_SetConfig+0x260>
 8008056:	e00f      	b.n	8008078 <UART_SetConfig+0x270>
 8008058:	2300      	movs	r3, #0
 800805a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800805e:	e012      	b.n	8008086 <UART_SetConfig+0x27e>
 8008060:	2302      	movs	r3, #2
 8008062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008066:	e00e      	b.n	8008086 <UART_SetConfig+0x27e>
 8008068:	2304      	movs	r3, #4
 800806a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800806e:	e00a      	b.n	8008086 <UART_SetConfig+0x27e>
 8008070:	2308      	movs	r3, #8
 8008072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008076:	e006      	b.n	8008086 <UART_SetConfig+0x27e>
 8008078:	2310      	movs	r3, #16
 800807a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800807e:	e002      	b.n	8008086 <UART_SetConfig+0x27e>
 8008080:	2310      	movs	r3, #16
 8008082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a17      	ldr	r2, [pc, #92]	@ (80080e8 <UART_SetConfig+0x2e0>)
 800808c:	4293      	cmp	r3, r2
 800808e:	f040 80a8 	bne.w	80081e2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008092:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008096:	2b08      	cmp	r3, #8
 8008098:	d834      	bhi.n	8008104 <UART_SetConfig+0x2fc>
 800809a:	a201      	add	r2, pc, #4	@ (adr r2, 80080a0 <UART_SetConfig+0x298>)
 800809c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a0:	080080c5 	.word	0x080080c5
 80080a4:	08008105 	.word	0x08008105
 80080a8:	080080cd 	.word	0x080080cd
 80080ac:	08008105 	.word	0x08008105
 80080b0:	080080d3 	.word	0x080080d3
 80080b4:	08008105 	.word	0x08008105
 80080b8:	08008105 	.word	0x08008105
 80080bc:	08008105 	.word	0x08008105
 80080c0:	080080db 	.word	0x080080db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080c4:	f7fe f9fe 	bl	80064c4 <HAL_RCC_GetPCLK1Freq>
 80080c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080ca:	e021      	b.n	8008110 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008100 <UART_SetConfig+0x2f8>)
 80080ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080d0:	e01e      	b.n	8008110 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080d2:	f7fe f989 	bl	80063e8 <HAL_RCC_GetSysClockFreq>
 80080d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080d8:	e01a      	b.n	8008110 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080e0:	e016      	b.n	8008110 <UART_SetConfig+0x308>
 80080e2:	bf00      	nop
 80080e4:	cfff69f3 	.word	0xcfff69f3
 80080e8:	40008000 	.word	0x40008000
 80080ec:	40013800 	.word	0x40013800
 80080f0:	40021000 	.word	0x40021000
 80080f4:	40004400 	.word	0x40004400
 80080f8:	40004800 	.word	0x40004800
 80080fc:	40004c00 	.word	0x40004c00
 8008100:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800810e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 812a 	beq.w	800836c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800811c:	4a9e      	ldr	r2, [pc, #632]	@ (8008398 <UART_SetConfig+0x590>)
 800811e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008122:	461a      	mov	r2, r3
 8008124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008126:	fbb3 f3f2 	udiv	r3, r3, r2
 800812a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	4613      	mov	r3, r2
 8008132:	005b      	lsls	r3, r3, #1
 8008134:	4413      	add	r3, r2
 8008136:	69ba      	ldr	r2, [r7, #24]
 8008138:	429a      	cmp	r2, r3
 800813a:	d305      	bcc.n	8008148 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008142:	69ba      	ldr	r2, [r7, #24]
 8008144:	429a      	cmp	r2, r3
 8008146:	d903      	bls.n	8008150 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800814e:	e10d      	b.n	800836c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008152:	2200      	movs	r2, #0
 8008154:	60bb      	str	r3, [r7, #8]
 8008156:	60fa      	str	r2, [r7, #12]
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800815c:	4a8e      	ldr	r2, [pc, #568]	@ (8008398 <UART_SetConfig+0x590>)
 800815e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008162:	b29b      	uxth	r3, r3
 8008164:	2200      	movs	r2, #0
 8008166:	603b      	str	r3, [r7, #0]
 8008168:	607a      	str	r2, [r7, #4]
 800816a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800816e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008172:	f7f8 fd73 	bl	8000c5c <__aeabi_uldivmod>
 8008176:	4602      	mov	r2, r0
 8008178:	460b      	mov	r3, r1
 800817a:	4610      	mov	r0, r2
 800817c:	4619      	mov	r1, r3
 800817e:	f04f 0200 	mov.w	r2, #0
 8008182:	f04f 0300 	mov.w	r3, #0
 8008186:	020b      	lsls	r3, r1, #8
 8008188:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800818c:	0202      	lsls	r2, r0, #8
 800818e:	6979      	ldr	r1, [r7, #20]
 8008190:	6849      	ldr	r1, [r1, #4]
 8008192:	0849      	lsrs	r1, r1, #1
 8008194:	2000      	movs	r0, #0
 8008196:	460c      	mov	r4, r1
 8008198:	4605      	mov	r5, r0
 800819a:	eb12 0804 	adds.w	r8, r2, r4
 800819e:	eb43 0905 	adc.w	r9, r3, r5
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	469a      	mov	sl, r3
 80081aa:	4693      	mov	fp, r2
 80081ac:	4652      	mov	r2, sl
 80081ae:	465b      	mov	r3, fp
 80081b0:	4640      	mov	r0, r8
 80081b2:	4649      	mov	r1, r9
 80081b4:	f7f8 fd52 	bl	8000c5c <__aeabi_uldivmod>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	4613      	mov	r3, r2
 80081be:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081c6:	d308      	bcc.n	80081da <UART_SetConfig+0x3d2>
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081ce:	d204      	bcs.n	80081da <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6a3a      	ldr	r2, [r7, #32]
 80081d6:	60da      	str	r2, [r3, #12]
 80081d8:	e0c8      	b.n	800836c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80081e0:	e0c4      	b.n	800836c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081ea:	d167      	bne.n	80082bc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80081ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80081f0:	2b08      	cmp	r3, #8
 80081f2:	d828      	bhi.n	8008246 <UART_SetConfig+0x43e>
 80081f4:	a201      	add	r2, pc, #4	@ (adr r2, 80081fc <UART_SetConfig+0x3f4>)
 80081f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fa:	bf00      	nop
 80081fc:	08008221 	.word	0x08008221
 8008200:	08008229 	.word	0x08008229
 8008204:	08008231 	.word	0x08008231
 8008208:	08008247 	.word	0x08008247
 800820c:	08008237 	.word	0x08008237
 8008210:	08008247 	.word	0x08008247
 8008214:	08008247 	.word	0x08008247
 8008218:	08008247 	.word	0x08008247
 800821c:	0800823f 	.word	0x0800823f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008220:	f7fe f950 	bl	80064c4 <HAL_RCC_GetPCLK1Freq>
 8008224:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008226:	e014      	b.n	8008252 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008228:	f7fe f962 	bl	80064f0 <HAL_RCC_GetPCLK2Freq>
 800822c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800822e:	e010      	b.n	8008252 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008230:	4b5a      	ldr	r3, [pc, #360]	@ (800839c <UART_SetConfig+0x594>)
 8008232:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008234:	e00d      	b.n	8008252 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008236:	f7fe f8d7 	bl	80063e8 <HAL_RCC_GetSysClockFreq>
 800823a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800823c:	e009      	b.n	8008252 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800823e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008242:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008244:	e005      	b.n	8008252 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008246:	2300      	movs	r3, #0
 8008248:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008250:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008254:	2b00      	cmp	r3, #0
 8008256:	f000 8089 	beq.w	800836c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825e:	4a4e      	ldr	r2, [pc, #312]	@ (8008398 <UART_SetConfig+0x590>)
 8008260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008264:	461a      	mov	r2, r3
 8008266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008268:	fbb3 f3f2 	udiv	r3, r3, r2
 800826c:	005a      	lsls	r2, r3, #1
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	085b      	lsrs	r3, r3, #1
 8008274:	441a      	add	r2, r3
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	fbb2 f3f3 	udiv	r3, r2, r3
 800827e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	2b0f      	cmp	r3, #15
 8008284:	d916      	bls.n	80082b4 <UART_SetConfig+0x4ac>
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800828c:	d212      	bcs.n	80082b4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800828e:	6a3b      	ldr	r3, [r7, #32]
 8008290:	b29b      	uxth	r3, r3
 8008292:	f023 030f 	bic.w	r3, r3, #15
 8008296:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008298:	6a3b      	ldr	r3, [r7, #32]
 800829a:	085b      	lsrs	r3, r3, #1
 800829c:	b29b      	uxth	r3, r3
 800829e:	f003 0307 	and.w	r3, r3, #7
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	8bfb      	ldrh	r3, [r7, #30]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	8bfa      	ldrh	r2, [r7, #30]
 80082b0:	60da      	str	r2, [r3, #12]
 80082b2:	e05b      	b.n	800836c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80082ba:	e057      	b.n	800836c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80082c0:	2b08      	cmp	r3, #8
 80082c2:	d828      	bhi.n	8008316 <UART_SetConfig+0x50e>
 80082c4:	a201      	add	r2, pc, #4	@ (adr r2, 80082cc <UART_SetConfig+0x4c4>)
 80082c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ca:	bf00      	nop
 80082cc:	080082f1 	.word	0x080082f1
 80082d0:	080082f9 	.word	0x080082f9
 80082d4:	08008301 	.word	0x08008301
 80082d8:	08008317 	.word	0x08008317
 80082dc:	08008307 	.word	0x08008307
 80082e0:	08008317 	.word	0x08008317
 80082e4:	08008317 	.word	0x08008317
 80082e8:	08008317 	.word	0x08008317
 80082ec:	0800830f 	.word	0x0800830f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082f0:	f7fe f8e8 	bl	80064c4 <HAL_RCC_GetPCLK1Freq>
 80082f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082f6:	e014      	b.n	8008322 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082f8:	f7fe f8fa 	bl	80064f0 <HAL_RCC_GetPCLK2Freq>
 80082fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082fe:	e010      	b.n	8008322 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008300:	4b26      	ldr	r3, [pc, #152]	@ (800839c <UART_SetConfig+0x594>)
 8008302:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008304:	e00d      	b.n	8008322 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008306:	f7fe f86f 	bl	80063e8 <HAL_RCC_GetSysClockFreq>
 800830a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800830c:	e009      	b.n	8008322 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800830e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008312:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008314:	e005      	b.n	8008322 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008316:	2300      	movs	r3, #0
 8008318:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008320:	bf00      	nop
    }

    if (pclk != 0U)
 8008322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008324:	2b00      	cmp	r3, #0
 8008326:	d021      	beq.n	800836c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800832c:	4a1a      	ldr	r2, [pc, #104]	@ (8008398 <UART_SetConfig+0x590>)
 800832e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008332:	461a      	mov	r2, r3
 8008334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008336:	fbb3 f2f2 	udiv	r2, r3, r2
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	085b      	lsrs	r3, r3, #1
 8008340:	441a      	add	r2, r3
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	fbb2 f3f3 	udiv	r3, r2, r3
 800834a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800834c:	6a3b      	ldr	r3, [r7, #32]
 800834e:	2b0f      	cmp	r3, #15
 8008350:	d909      	bls.n	8008366 <UART_SetConfig+0x55e>
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008358:	d205      	bcs.n	8008366 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	b29a      	uxth	r2, r3
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	60da      	str	r2, [r3, #12]
 8008364:	e002      	b.n	800836c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	2201      	movs	r2, #1
 8008370:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	2201      	movs	r2, #1
 8008378:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	2200      	movs	r2, #0
 8008380:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2200      	movs	r2, #0
 8008386:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008388:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800838c:	4618      	mov	r0, r3
 800838e:	3730      	adds	r7, #48	@ 0x30
 8008390:	46bd      	mov	sp, r7
 8008392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008396:	bf00      	nop
 8008398:	0800cce4 	.word	0x0800cce4
 800839c:	00f42400 	.word	0x00f42400

080083a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ac:	f003 0308 	and.w	r3, r3, #8
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00a      	beq.n	80083ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00a      	beq.n	80083ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f0:	f003 0302 	and.w	r3, r3, #2
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00a      	beq.n	800840e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	430a      	orrs	r2, r1
 800840c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008412:	f003 0304 	and.w	r3, r3, #4
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	430a      	orrs	r2, r1
 800842e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008434:	f003 0310 	and.w	r3, r3, #16
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00a      	beq.n	8008452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008456:	f003 0320 	and.w	r3, r3, #32
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00a      	beq.n	8008474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	430a      	orrs	r2, r1
 8008472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800847c:	2b00      	cmp	r3, #0
 800847e:	d01a      	beq.n	80084b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	430a      	orrs	r2, r1
 8008494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800849a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800849e:	d10a      	bne.n	80084b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	430a      	orrs	r2, r1
 80084b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	430a      	orrs	r2, r1
 80084d6:	605a      	str	r2, [r3, #4]
  }
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b098      	sub	sp, #96	@ 0x60
 80084e8:	af02      	add	r7, sp, #8
 80084ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084f4:	f7fa ff1c 	bl	8003330 <HAL_GetTick>
 80084f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0308 	and.w	r3, r3, #8
 8008504:	2b08      	cmp	r3, #8
 8008506:	d12f      	bne.n	8008568 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008508:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008510:	2200      	movs	r2, #0
 8008512:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f88e 	bl	8008638 <UART_WaitOnFlagUntilTimeout>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d022      	beq.n	8008568 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800852a:	e853 3f00 	ldrex	r3, [r3]
 800852e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008532:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008536:	653b      	str	r3, [r7, #80]	@ 0x50
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	461a      	mov	r2, r3
 800853e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008540:	647b      	str	r3, [r7, #68]	@ 0x44
 8008542:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008546:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008548:	e841 2300 	strex	r3, r2, [r1]
 800854c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800854e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e6      	bne.n	8008522 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2220      	movs	r2, #32
 8008558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e063      	b.n	8008630 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0304 	and.w	r3, r3, #4
 8008572:	2b04      	cmp	r3, #4
 8008574:	d149      	bne.n	800860a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008576:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800857e:	2200      	movs	r2, #0
 8008580:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f857 	bl	8008638 <UART_WaitOnFlagUntilTimeout>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d03c      	beq.n	800860a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008598:	e853 3f00 	ldrex	r3, [r3]
 800859c:	623b      	str	r3, [r7, #32]
   return(result);
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	461a      	mov	r2, r3
 80085ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80085b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085b6:	e841 2300 	strex	r3, r2, [r1]
 80085ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1e6      	bne.n	8008590 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3308      	adds	r3, #8
 80085c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	e853 3f00 	ldrex	r3, [r3]
 80085d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f023 0301 	bic.w	r3, r3, #1
 80085d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3308      	adds	r3, #8
 80085e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085e2:	61fa      	str	r2, [r7, #28]
 80085e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e6:	69b9      	ldr	r1, [r7, #24]
 80085e8:	69fa      	ldr	r2, [r7, #28]
 80085ea:	e841 2300 	strex	r3, r2, [r1]
 80085ee:	617b      	str	r3, [r7, #20]
   return(result);
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1e5      	bne.n	80085c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2220      	movs	r2, #32
 80085fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e012      	b.n	8008630 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2220      	movs	r2, #32
 800860e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2220      	movs	r2, #32
 8008616:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3758      	adds	r7, #88	@ 0x58
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	603b      	str	r3, [r7, #0]
 8008644:	4613      	mov	r3, r2
 8008646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008648:	e04f      	b.n	80086ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008650:	d04b      	beq.n	80086ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008652:	f7fa fe6d 	bl	8003330 <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	69ba      	ldr	r2, [r7, #24]
 800865e:	429a      	cmp	r2, r3
 8008660:	d302      	bcc.n	8008668 <UART_WaitOnFlagUntilTimeout+0x30>
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d101      	bne.n	800866c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e04e      	b.n	800870a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0304 	and.w	r3, r3, #4
 8008676:	2b00      	cmp	r3, #0
 8008678:	d037      	beq.n	80086ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	2b80      	cmp	r3, #128	@ 0x80
 800867e:	d034      	beq.n	80086ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2b40      	cmp	r3, #64	@ 0x40
 8008684:	d031      	beq.n	80086ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	f003 0308 	and.w	r3, r3, #8
 8008690:	2b08      	cmp	r3, #8
 8008692:	d110      	bne.n	80086b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2208      	movs	r2, #8
 800869a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f000 f95b 	bl	8008958 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2208      	movs	r2, #8
 80086a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e029      	b.n	800870a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	69db      	ldr	r3, [r3, #28]
 80086bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086c4:	d111      	bne.n	80086ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 f941 	bl	8008958 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2220      	movs	r2, #32
 80086da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e00f      	b.n	800870a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	69da      	ldr	r2, [r3, #28]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	4013      	ands	r3, r2
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	bf0c      	ite	eq
 80086fa:	2301      	moveq	r3, #1
 80086fc:	2300      	movne	r3, #0
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	461a      	mov	r2, r3
 8008702:	79fb      	ldrb	r3, [r7, #7]
 8008704:	429a      	cmp	r2, r3
 8008706:	d0a0      	beq.n	800864a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
	...

08008714 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008714:	b480      	push	{r7}
 8008716:	b0a3      	sub	sp, #140	@ 0x8c
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	4613      	mov	r3, r2
 8008720:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	88fa      	ldrh	r2, [r7, #6]
 800872c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	88fa      	ldrh	r2, [r7, #6]
 8008734:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008746:	d10e      	bne.n	8008766 <UART_Start_Receive_IT+0x52>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d105      	bne.n	800875c <UART_Start_Receive_IT+0x48>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008756:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800875a:	e02d      	b.n	80087b8 <UART_Start_Receive_IT+0xa4>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	22ff      	movs	r2, #255	@ 0xff
 8008760:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008764:	e028      	b.n	80087b8 <UART_Start_Receive_IT+0xa4>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10d      	bne.n	800878a <UART_Start_Receive_IT+0x76>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d104      	bne.n	8008780 <UART_Start_Receive_IT+0x6c>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	22ff      	movs	r2, #255	@ 0xff
 800877a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800877e:	e01b      	b.n	80087b8 <UART_Start_Receive_IT+0xa4>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	227f      	movs	r2, #127	@ 0x7f
 8008784:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008788:	e016      	b.n	80087b8 <UART_Start_Receive_IT+0xa4>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008792:	d10d      	bne.n	80087b0 <UART_Start_Receive_IT+0x9c>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d104      	bne.n	80087a6 <UART_Start_Receive_IT+0x92>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	227f      	movs	r2, #127	@ 0x7f
 80087a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087a4:	e008      	b.n	80087b8 <UART_Start_Receive_IT+0xa4>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	223f      	movs	r2, #63	@ 0x3f
 80087aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087ae:	e003      	b.n	80087b8 <UART_Start_Receive_IT+0xa4>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2222      	movs	r2, #34	@ 0x22
 80087c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3308      	adds	r3, #8
 80087ce:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087d2:	e853 3f00 	ldrex	r3, [r3]
 80087d6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80087d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087da:	f043 0301 	orr.w	r3, r3, #1
 80087de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3308      	adds	r3, #8
 80087e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80087ec:	673a      	str	r2, [r7, #112]	@ 0x70
 80087ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80087f2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80087f4:	e841 2300 	strex	r3, r2, [r1]
 80087f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80087fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1e3      	bne.n	80087c8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008804:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008808:	d14f      	bne.n	80088aa <UART_Start_Receive_IT+0x196>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008810:	88fa      	ldrh	r2, [r7, #6]
 8008812:	429a      	cmp	r2, r3
 8008814:	d349      	bcc.n	80088aa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800881e:	d107      	bne.n	8008830 <UART_Start_Receive_IT+0x11c>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d103      	bne.n	8008830 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	4a47      	ldr	r2, [pc, #284]	@ (8008948 <UART_Start_Receive_IT+0x234>)
 800882c:	675a      	str	r2, [r3, #116]	@ 0x74
 800882e:	e002      	b.n	8008836 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4a46      	ldr	r2, [pc, #280]	@ (800894c <UART_Start_Receive_IT+0x238>)
 8008834:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d01a      	beq.n	8008874 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008846:	e853 3f00 	ldrex	r3, [r3]
 800884a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800884c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800884e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008852:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	461a      	mov	r2, r3
 800885c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008860:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008862:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008864:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008866:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008868:	e841 2300 	strex	r3, r2, [r1]
 800886c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800886e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1e4      	bne.n	800883e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	3308      	adds	r3, #8
 800887a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800887e:	e853 3f00 	ldrex	r3, [r3]
 8008882:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800888a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	3308      	adds	r3, #8
 8008892:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008894:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008896:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008898:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800889a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800889c:	e841 2300 	strex	r3, r2, [r1]
 80088a0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80088a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1e5      	bne.n	8008874 <UART_Start_Receive_IT+0x160>
 80088a8:	e046      	b.n	8008938 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088b2:	d107      	bne.n	80088c4 <UART_Start_Receive_IT+0x1b0>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d103      	bne.n	80088c4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	4a24      	ldr	r2, [pc, #144]	@ (8008950 <UART_Start_Receive_IT+0x23c>)
 80088c0:	675a      	str	r2, [r3, #116]	@ 0x74
 80088c2:	e002      	b.n	80088ca <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	4a23      	ldr	r2, [pc, #140]	@ (8008954 <UART_Start_Receive_IT+0x240>)
 80088c8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d019      	beq.n	8008906 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088da:	e853 3f00 	ldrex	r3, [r3]
 80088de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80088e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	461a      	mov	r2, r3
 80088ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80088f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80088f2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80088f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088f8:	e841 2300 	strex	r3, r2, [r1]
 80088fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80088fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1e6      	bne.n	80088d2 <UART_Start_Receive_IT+0x1be>
 8008904:	e018      	b.n	8008938 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	e853 3f00 	ldrex	r3, [r3]
 8008912:	613b      	str	r3, [r7, #16]
   return(result);
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	f043 0320 	orr.w	r3, r3, #32
 800891a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	461a      	mov	r2, r3
 8008922:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008924:	623b      	str	r3, [r7, #32]
 8008926:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008928:	69f9      	ldr	r1, [r7, #28]
 800892a:	6a3a      	ldr	r2, [r7, #32]
 800892c:	e841 2300 	strex	r3, r2, [r1]
 8008930:	61bb      	str	r3, [r7, #24]
   return(result);
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e6      	bne.n	8008906 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	378c      	adds	r7, #140	@ 0x8c
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	080094b9 	.word	0x080094b9
 800894c:	08009155 	.word	0x08009155
 8008950:	08008f9d 	.word	0x08008f9d
 8008954:	08008de5 	.word	0x08008de5

08008958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008958:	b480      	push	{r7}
 800895a:	b095      	sub	sp, #84	@ 0x54
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008968:	e853 3f00 	ldrex	r3, [r3]
 800896c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800896e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008970:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008974:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	461a      	mov	r2, r3
 800897c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800897e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008980:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008982:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008984:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008986:	e841 2300 	strex	r3, r2, [r1]
 800898a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800898c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1e6      	bne.n	8008960 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	3308      	adds	r3, #8
 8008998:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	e853 3f00 	ldrex	r3, [r3]
 80089a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089a8:	f023 0301 	bic.w	r3, r3, #1
 80089ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3308      	adds	r3, #8
 80089b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089be:	e841 2300 	strex	r3, r2, [r1]
 80089c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1e3      	bne.n	8008992 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d118      	bne.n	8008a04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	e853 3f00 	ldrex	r3, [r3]
 80089de:	60bb      	str	r3, [r7, #8]
   return(result);
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	f023 0310 	bic.w	r3, r3, #16
 80089e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	461a      	mov	r2, r3
 80089ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089f0:	61bb      	str	r3, [r7, #24]
 80089f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f4:	6979      	ldr	r1, [r7, #20]
 80089f6:	69ba      	ldr	r2, [r7, #24]
 80089f8:	e841 2300 	strex	r3, r2, [r1]
 80089fc:	613b      	str	r3, [r7, #16]
   return(result);
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1e6      	bne.n	80089d2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2220      	movs	r2, #32
 8008a08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008a18:	bf00      	nop
 8008a1a:	3754      	adds	r7, #84	@ 0x54
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f7fa fbe0 	bl	8003200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a40:	bf00      	nop
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b08f      	sub	sp, #60	@ 0x3c
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a56:	2b21      	cmp	r3, #33	@ 0x21
 8008a58:	d14c      	bne.n	8008af4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d132      	bne.n	8008acc <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	e853 3f00 	ldrex	r3, [r3]
 8008a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	461a      	mov	r2, r3
 8008a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a86:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a8c:	e841 2300 	strex	r3, r2, [r1]
 8008a90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1e6      	bne.n	8008a66 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	e853 3f00 	ldrex	r3, [r3]
 8008aa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aac:	633b      	str	r3, [r7, #48]	@ 0x30
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab6:	61bb      	str	r3, [r7, #24]
 8008ab8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aba:	6979      	ldr	r1, [r7, #20]
 8008abc:	69ba      	ldr	r2, [r7, #24]
 8008abe:	e841 2300 	strex	r3, r2, [r1]
 8008ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1e6      	bne.n	8008a98 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008aca:	e013      	b.n	8008af4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ad0:	781a      	ldrb	r2, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008adc:	1c5a      	adds	r2, r3, #1
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	3b01      	subs	r3, #1
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8008af4:	bf00      	nop
 8008af6:	373c      	adds	r7, #60	@ 0x3c
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b091      	sub	sp, #68	@ 0x44
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b0e:	2b21      	cmp	r3, #33	@ 0x21
 8008b10:	d151      	bne.n	8008bb6 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d132      	bne.n	8008b84 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b26:	e853 3f00 	ldrex	r3, [r3]
 8008b2a:	623b      	str	r3, [r7, #32]
   return(result);
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b44:	e841 2300 	strex	r3, r2, [r1]
 8008b48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1e6      	bne.n	8008b1e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	e853 3f00 	ldrex	r3, [r3]
 8008b5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b64:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b6e:	61fb      	str	r3, [r7, #28]
 8008b70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b72:	69b9      	ldr	r1, [r7, #24]
 8008b74:	69fa      	ldr	r2, [r7, #28]
 8008b76:	e841 2300 	strex	r3, r2, [r1]
 8008b7a:	617b      	str	r3, [r7, #20]
   return(result);
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1e6      	bne.n	8008b50 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008b82:	e018      	b.n	8008bb6 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b8c:	881b      	ldrh	r3, [r3, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b98:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b9e:	1c9a      	adds	r2, r3, #2
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	3b01      	subs	r3, #1
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8008bb6:	bf00      	nop
 8008bb8:	3744      	adds	r7, #68	@ 0x44
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b091      	sub	sp, #68	@ 0x44
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bd0:	2b21      	cmp	r3, #33	@ 0x21
 8008bd2:	d160      	bne.n	8008c96 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bda:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008bdc:	e057      	b.n	8008c8e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d133      	bne.n	8008c52 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3308      	adds	r3, #8
 8008bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf4:	e853 3f00 	ldrex	r3, [r3]
 8008bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008c00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	3308      	adds	r3, #8
 8008c08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c12:	e841 2300 	strex	r3, r2, [r1]
 8008c16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1e5      	bne.n	8008bea <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	e853 3f00 	ldrex	r3, [r3]
 8008c2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c3c:	61fb      	str	r3, [r7, #28]
 8008c3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c40:	69b9      	ldr	r1, [r7, #24]
 8008c42:	69fa      	ldr	r2, [r7, #28]
 8008c44:	e841 2300 	strex	r3, r2, [r1]
 8008c48:	617b      	str	r3, [r7, #20]
   return(result);
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1e6      	bne.n	8008c1e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008c50:	e021      	b.n	8008c96 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	69db      	ldr	r3, [r3, #28]
 8008c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d013      	beq.n	8008c88 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c64:	781a      	ldrb	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008c88:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008c8e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1a4      	bne.n	8008bde <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008c94:	e7ff      	b.n	8008c96 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008c96:	bf00      	nop
 8008c98:	3744      	adds	r7, #68	@ 0x44
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b091      	sub	sp, #68	@ 0x44
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cb0:	2b21      	cmp	r3, #33	@ 0x21
 8008cb2:	d165      	bne.n	8008d80 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008cba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008cbc:	e05c      	b.n	8008d78 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d133      	bne.n	8008d32 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	3308      	adds	r3, #8
 8008cd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd2:	6a3b      	ldr	r3, [r7, #32]
 8008cd4:	e853 3f00 	ldrex	r3, [r3]
 8008cd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008cec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cf2:	e841 2300 	strex	r3, r2, [r1]
 8008cf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1e5      	bne.n	8008cca <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	e853 3f00 	ldrex	r3, [r3]
 8008d0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d12:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1c:	61bb      	str	r3, [r7, #24]
 8008d1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d20:	6979      	ldr	r1, [r7, #20]
 8008d22:	69ba      	ldr	r2, [r7, #24]
 8008d24:	e841 2300 	strex	r3, r2, [r1]
 8008d28:	613b      	str	r3, [r7, #16]
   return(result);
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1e6      	bne.n	8008cfe <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008d30:	e026      	b.n	8008d80 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	69db      	ldr	r3, [r3, #28]
 8008d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d018      	beq.n	8008d72 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d44:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d48:	881b      	ldrh	r3, [r3, #0]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d54:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d5a:	1c9a      	adds	r2, r3, #2
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008d72:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008d74:	3b01      	subs	r3, #1
 8008d76:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008d78:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d19f      	bne.n	8008cbe <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008d7e:	e7ff      	b.n	8008d80 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008d80:	bf00      	nop
 8008d82:	3744      	adds	r7, #68	@ 0x44
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b088      	sub	sp, #32
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	e853 3f00 	ldrex	r3, [r3]
 8008da0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008da8:	61fb      	str	r3, [r7, #28]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	61bb      	str	r3, [r7, #24]
 8008db4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db6:	6979      	ldr	r1, [r7, #20]
 8008db8:	69ba      	ldr	r2, [r7, #24]
 8008dba:	e841 2300 	strex	r3, r2, [r1]
 8008dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1e6      	bne.n	8008d94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2220      	movs	r2, #32
 8008dca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7fa fa09 	bl	80031ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dda:	bf00      	nop
 8008ddc:	3720      	adds	r7, #32
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
	...

08008de4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b09c      	sub	sp, #112	@ 0x70
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008df2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dfc:	2b22      	cmp	r3, #34	@ 0x22
 8008dfe:	f040 80be 	bne.w	8008f7e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e08:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008e10:	b2d9      	uxtb	r1, r3
 8008e12:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e1c:	400a      	ands	r2, r1
 8008e1e:	b2d2      	uxtb	r2, r2
 8008e20:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e26:	1c5a      	adds	r2, r3, #1
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	3b01      	subs	r3, #1
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f040 80a1 	bne.w	8008f8e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e54:	e853 3f00 	ldrex	r3, [r3]
 8008e58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	461a      	mov	r2, r3
 8008e68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e6      	bne.n	8008e4c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3308      	adds	r3, #8
 8008e84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e88:	e853 3f00 	ldrex	r3, [r3]
 8008e8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e90:	f023 0301 	bic.w	r3, r3, #1
 8008e94:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3308      	adds	r3, #8
 8008e9c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008e9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008ea0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ea4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ea6:	e841 2300 	strex	r3, r2, [r1]
 8008eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1e5      	bne.n	8008e7e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2220      	movs	r2, #32
 8008eb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a33      	ldr	r2, [pc, #204]	@ (8008f98 <UART_RxISR_8BIT+0x1b4>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d01f      	beq.n	8008f10 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d018      	beq.n	8008f10 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	623b      	str	r3, [r7, #32]
   return(result);
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ef2:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008efc:	633b      	str	r3, [r7, #48]	@ 0x30
 8008efe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f04:	e841 2300 	strex	r3, r2, [r1]
 8008f08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e6      	bne.n	8008ede <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d12e      	bne.n	8008f76 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	e853 3f00 	ldrex	r3, [r3]
 8008f2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f023 0310 	bic.w	r3, r3, #16
 8008f32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f3c:	61fb      	str	r3, [r7, #28]
 8008f3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f40:	69b9      	ldr	r1, [r7, #24]
 8008f42:	69fa      	ldr	r2, [r7, #28]
 8008f44:	e841 2300 	strex	r3, r2, [r1]
 8008f48:	617b      	str	r3, [r7, #20]
   return(result);
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1e6      	bne.n	8008f1e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	69db      	ldr	r3, [r3, #28]
 8008f56:	f003 0310 	and.w	r3, r3, #16
 8008f5a:	2b10      	cmp	r3, #16
 8008f5c:	d103      	bne.n	8008f66 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2210      	movs	r2, #16
 8008f64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7fe ff3e 	bl	8007df0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f74:	e00b      	b.n	8008f8e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7fa f8f0 	bl	800315c <HAL_UART_RxCpltCallback>
}
 8008f7c:	e007      	b.n	8008f8e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	699a      	ldr	r2, [r3, #24]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f042 0208 	orr.w	r2, r2, #8
 8008f8c:	619a      	str	r2, [r3, #24]
}
 8008f8e:	bf00      	nop
 8008f90:	3770      	adds	r7, #112	@ 0x70
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	40008000 	.word	0x40008000

08008f9c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b09c      	sub	sp, #112	@ 0x70
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008faa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fb4:	2b22      	cmp	r3, #34	@ 0x22
 8008fb6:	f040 80be 	bne.w	8009136 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fc8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008fca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008fce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008fd8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fde:	1c9a      	adds	r2, r3, #2
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	3b01      	subs	r3, #1
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f040 80a1 	bne.w	8009146 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800900c:	e853 3f00 	ldrex	r3, [r3]
 8009010:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009014:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009018:	667b      	str	r3, [r7, #100]	@ 0x64
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009022:	657b      	str	r3, [r7, #84]	@ 0x54
 8009024:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009026:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009028:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800902a:	e841 2300 	strex	r3, r2, [r1]
 800902e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1e6      	bne.n	8009004 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	3308      	adds	r3, #8
 800903c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009040:	e853 3f00 	ldrex	r3, [r3]
 8009044:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009048:	f023 0301 	bic.w	r3, r3, #1
 800904c:	663b      	str	r3, [r7, #96]	@ 0x60
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	3308      	adds	r3, #8
 8009054:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009056:	643a      	str	r2, [r7, #64]	@ 0x40
 8009058:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800905c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800905e:	e841 2300 	strex	r3, r2, [r1]
 8009062:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1e5      	bne.n	8009036 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2220      	movs	r2, #32
 800906e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a33      	ldr	r2, [pc, #204]	@ (8009150 <UART_RxISR_16BIT+0x1b4>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d01f      	beq.n	80090c8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009092:	2b00      	cmp	r3, #0
 8009094:	d018      	beq.n	80090c8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909c:	6a3b      	ldr	r3, [r7, #32]
 800909e:	e853 3f00 	ldrex	r3, [r3]
 80090a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80090aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	461a      	mov	r2, r3
 80090b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090b6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090bc:	e841 2300 	strex	r3, r2, [r1]
 80090c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1e6      	bne.n	8009096 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d12e      	bne.n	800912e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	e853 3f00 	ldrex	r3, [r3]
 80090e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	f023 0310 	bic.w	r3, r3, #16
 80090ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	461a      	mov	r2, r3
 80090f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090f4:	61bb      	str	r3, [r7, #24]
 80090f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f8:	6979      	ldr	r1, [r7, #20]
 80090fa:	69ba      	ldr	r2, [r7, #24]
 80090fc:	e841 2300 	strex	r3, r2, [r1]
 8009100:	613b      	str	r3, [r7, #16]
   return(result);
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d1e6      	bne.n	80090d6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	f003 0310 	and.w	r3, r3, #16
 8009112:	2b10      	cmp	r3, #16
 8009114:	d103      	bne.n	800911e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2210      	movs	r2, #16
 800911c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7fe fe62 	bl	8007df0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800912c:	e00b      	b.n	8009146 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7fa f814 	bl	800315c <HAL_UART_RxCpltCallback>
}
 8009134:	e007      	b.n	8009146 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	699a      	ldr	r2, [r3, #24]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f042 0208 	orr.w	r2, r2, #8
 8009144:	619a      	str	r2, [r3, #24]
}
 8009146:	bf00      	nop
 8009148:	3770      	adds	r7, #112	@ 0x70
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	40008000 	.word	0x40008000

08009154 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b0ac      	sub	sp, #176	@ 0xb0
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009162:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	69db      	ldr	r3, [r3, #28]
 800916c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800918a:	2b22      	cmp	r3, #34	@ 0x22
 800918c:	f040 8183 	bne.w	8009496 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009196:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800919a:	e126      	b.n	80093ea <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80091a6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80091aa:	b2d9      	uxtb	r1, r3
 80091ac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091b6:	400a      	ands	r2, r1
 80091b8:	b2d2      	uxtb	r2, r2
 80091ba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091c0:	1c5a      	adds	r2, r3, #1
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	3b01      	subs	r3, #1
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80091e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091e6:	f003 0307 	and.w	r3, r3, #7
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d053      	beq.n	8009296 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d011      	beq.n	800921e <UART_RxISR_8BIT_FIFOEN+0xca>
 80091fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80091fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00b      	beq.n	800921e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2201      	movs	r2, #1
 800920c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009214:	f043 0201 	orr.w	r2, r3, #1
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800921e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009222:	f003 0302 	and.w	r3, r3, #2
 8009226:	2b00      	cmp	r3, #0
 8009228:	d011      	beq.n	800924e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800922a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00b      	beq.n	800924e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2202      	movs	r2, #2
 800923c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009244:	f043 0204 	orr.w	r2, r3, #4
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800924e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009252:	f003 0304 	and.w	r3, r3, #4
 8009256:	2b00      	cmp	r3, #0
 8009258:	d011      	beq.n	800927e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800925a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00b      	beq.n	800927e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2204      	movs	r2, #4
 800926c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009274:	f043 0202 	orr.w	r2, r3, #2
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009284:	2b00      	cmp	r3, #0
 8009286:	d006      	beq.n	8009296 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7f9 ffb9 	bl	8003200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800929c:	b29b      	uxth	r3, r3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f040 80a3 	bne.w	80093ea <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80092ac:	e853 3f00 	ldrex	r3, [r3]
 80092b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80092b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	461a      	mov	r2, r3
 80092c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80092c8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ca:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80092cc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80092ce:	e841 2300 	strex	r3, r2, [r1]
 80092d2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80092d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1e4      	bne.n	80092a4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	3308      	adds	r3, #8
 80092e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092e4:	e853 3f00 	ldrex	r3, [r3]
 80092e8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80092ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80092ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092f0:	f023 0301 	bic.w	r3, r3, #1
 80092f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	3308      	adds	r3, #8
 80092fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009302:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009304:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009306:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009308:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800930a:	e841 2300 	strex	r3, r2, [r1]
 800930e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009310:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1e1      	bne.n	80092da <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2220      	movs	r2, #32
 800931a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a60      	ldr	r2, [pc, #384]	@ (80094b0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d021      	beq.n	8009378 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800933e:	2b00      	cmp	r3, #0
 8009340:	d01a      	beq.n	8009378 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009348:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800934a:	e853 3f00 	ldrex	r3, [r3]
 800934e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009352:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009356:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	461a      	mov	r2, r3
 8009360:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009364:	657b      	str	r3, [r7, #84]	@ 0x54
 8009366:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009368:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800936a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800936c:	e841 2300 	strex	r3, r2, [r1]
 8009370:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1e4      	bne.n	8009342 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800937c:	2b01      	cmp	r3, #1
 800937e:	d130      	bne.n	80093e2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800938e:	e853 3f00 	ldrex	r3, [r3]
 8009392:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009396:	f023 0310 	bic.w	r3, r3, #16
 800939a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80093a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80093aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80093ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093b0:	e841 2300 	strex	r3, r2, [r1]
 80093b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1e4      	bne.n	8009386 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	69db      	ldr	r3, [r3, #28]
 80093c2:	f003 0310 	and.w	r3, r3, #16
 80093c6:	2b10      	cmp	r3, #16
 80093c8:	d103      	bne.n	80093d2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2210      	movs	r2, #16
 80093d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80093d8:	4619      	mov	r1, r3
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7fe fd08 	bl	8007df0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80093e0:	e00e      	b.n	8009400 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7f9 feba 	bl	800315c <HAL_UART_RxCpltCallback>
        break;
 80093e8:	e00a      	b.n	8009400 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093ea:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d006      	beq.n	8009400 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80093f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093f6:	f003 0320 	and.w	r3, r3, #32
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f47f aece 	bne.w	800919c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009406:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800940a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800940e:	2b00      	cmp	r3, #0
 8009410:	d049      	beq.n	80094a6 <UART_RxISR_8BIT_FIFOEN+0x352>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009418:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800941c:	429a      	cmp	r2, r3
 800941e:	d242      	bcs.n	80094a6 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	3308      	adds	r3, #8
 8009426:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009428:	6a3b      	ldr	r3, [r7, #32]
 800942a:	e853 3f00 	ldrex	r3, [r3]
 800942e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009436:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3308      	adds	r3, #8
 8009440:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009444:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009446:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009448:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800944a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800944c:	e841 2300 	strex	r3, r2, [r1]
 8009450:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1e3      	bne.n	8009420 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a16      	ldr	r2, [pc, #88]	@ (80094b4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800945c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	e853 3f00 	ldrex	r3, [r3]
 800946a:	60bb      	str	r3, [r7, #8]
   return(result);
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	f043 0320 	orr.w	r3, r3, #32
 8009472:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	461a      	mov	r2, r3
 800947c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009480:	61bb      	str	r3, [r7, #24]
 8009482:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009484:	6979      	ldr	r1, [r7, #20]
 8009486:	69ba      	ldr	r2, [r7, #24]
 8009488:	e841 2300 	strex	r3, r2, [r1]
 800948c:	613b      	str	r3, [r7, #16]
   return(result);
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1e4      	bne.n	800945e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009494:	e007      	b.n	80094a6 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	699a      	ldr	r2, [r3, #24]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f042 0208 	orr.w	r2, r2, #8
 80094a4:	619a      	str	r2, [r3, #24]
}
 80094a6:	bf00      	nop
 80094a8:	37b0      	adds	r7, #176	@ 0xb0
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	40008000 	.word	0x40008000
 80094b4:	08008de5 	.word	0x08008de5

080094b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b0ae      	sub	sp, #184	@ 0xb8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80094c6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	69db      	ldr	r3, [r3, #28]
 80094d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094ee:	2b22      	cmp	r3, #34	@ 0x22
 80094f0:	f040 8187 	bne.w	8009802 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80094fa:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094fe:	e12a      	b.n	8009756 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009506:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800950e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009512:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009516:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800951a:	4013      	ands	r3, r2
 800951c:	b29a      	uxth	r2, r3
 800951e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009522:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009528:	1c9a      	adds	r2, r3, #2
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009534:	b29b      	uxth	r3, r3
 8009536:	3b01      	subs	r3, #1
 8009538:	b29a      	uxth	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	69db      	ldr	r3, [r3, #28]
 8009546:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800954a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800954e:	f003 0307 	and.w	r3, r3, #7
 8009552:	2b00      	cmp	r3, #0
 8009554:	d053      	beq.n	80095fe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009556:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	2b00      	cmp	r3, #0
 8009560:	d011      	beq.n	8009586 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00b      	beq.n	8009586 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2201      	movs	r2, #1
 8009574:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800957c:	f043 0201 	orr.w	r2, r3, #1
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009586:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800958a:	f003 0302 	and.w	r3, r3, #2
 800958e:	2b00      	cmp	r3, #0
 8009590:	d011      	beq.n	80095b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00b      	beq.n	80095b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2202      	movs	r2, #2
 80095a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ac:	f043 0204 	orr.w	r2, r3, #4
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80095ba:	f003 0304 	and.w	r3, r3, #4
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d011      	beq.n	80095e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80095c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00b      	beq.n	80095e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2204      	movs	r2, #4
 80095d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095dc:	f043 0202 	orr.w	r2, r3, #2
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d006      	beq.n	80095fe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7f9 fe05 	bl	8003200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009604:	b29b      	uxth	r3, r3
 8009606:	2b00      	cmp	r3, #0
 8009608:	f040 80a5 	bne.w	8009756 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009612:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009614:	e853 3f00 	ldrex	r3, [r3]
 8009618:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800961a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800961c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009620:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	461a      	mov	r2, r3
 800962a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800962e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009632:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009634:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009636:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800963a:	e841 2300 	strex	r3, r2, [r1]
 800963e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009640:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1e2      	bne.n	800960c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	3308      	adds	r3, #8
 800964c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009650:	e853 3f00 	ldrex	r3, [r3]
 8009654:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009656:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009658:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800965c:	f023 0301 	bic.w	r3, r3, #1
 8009660:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	3308      	adds	r3, #8
 800966a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800966e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009670:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009672:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009674:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009676:	e841 2300 	strex	r3, r2, [r1]
 800967a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800967c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1e1      	bne.n	8009646 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2220      	movs	r2, #32
 8009686:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a60      	ldr	r2, [pc, #384]	@ (800981c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d021      	beq.n	80096e4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d01a      	beq.n	80096e4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096b6:	e853 3f00 	ldrex	r3, [r3]
 80096ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80096bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80096c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80096d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096d2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80096d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096d8:	e841 2300 	strex	r3, r2, [r1]
 80096dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80096de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1e4      	bne.n	80096ae <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d130      	bne.n	800974e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fa:	e853 3f00 	ldrex	r3, [r3]
 80096fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009702:	f023 0310 	bic.w	r3, r3, #16
 8009706:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	461a      	mov	r2, r3
 8009710:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009714:	647b      	str	r3, [r7, #68]	@ 0x44
 8009716:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009718:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800971a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800971c:	e841 2300 	strex	r3, r2, [r1]
 8009720:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1e4      	bne.n	80096f2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	69db      	ldr	r3, [r3, #28]
 800972e:	f003 0310 	and.w	r3, r3, #16
 8009732:	2b10      	cmp	r3, #16
 8009734:	d103      	bne.n	800973e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2210      	movs	r2, #16
 800973c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7fe fb52 	bl	8007df0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800974c:	e00e      	b.n	800976c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7f9 fd04 	bl	800315c <HAL_UART_RxCpltCallback>
        break;
 8009754:	e00a      	b.n	800976c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009756:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800975a:	2b00      	cmp	r3, #0
 800975c:	d006      	beq.n	800976c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800975e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009762:	f003 0320 	and.w	r3, r3, #32
 8009766:	2b00      	cmp	r3, #0
 8009768:	f47f aeca 	bne.w	8009500 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009772:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009776:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800977a:	2b00      	cmp	r3, #0
 800977c:	d049      	beq.n	8009812 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009784:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009788:	429a      	cmp	r2, r3
 800978a:	d242      	bcs.n	8009812 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	3308      	adds	r3, #8
 8009792:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009796:	e853 3f00 	ldrex	r3, [r3]
 800979a:	623b      	str	r3, [r7, #32]
   return(result);
 800979c:	6a3b      	ldr	r3, [r7, #32]
 800979e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3308      	adds	r3, #8
 80097ac:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80097b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80097b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097b8:	e841 2300 	strex	r3, r2, [r1]
 80097bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1e3      	bne.n	800978c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a16      	ldr	r2, [pc, #88]	@ (8009820 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80097c8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	e853 3f00 	ldrex	r3, [r3]
 80097d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f043 0320 	orr.w	r3, r3, #32
 80097de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80097ec:	61fb      	str	r3, [r7, #28]
 80097ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f0:	69b9      	ldr	r1, [r7, #24]
 80097f2:	69fa      	ldr	r2, [r7, #28]
 80097f4:	e841 2300 	strex	r3, r2, [r1]
 80097f8:	617b      	str	r3, [r7, #20]
   return(result);
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1e4      	bne.n	80097ca <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009800:	e007      	b.n	8009812 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	699a      	ldr	r2, [r3, #24]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f042 0208 	orr.w	r2, r2, #8
 8009810:	619a      	str	r2, [r3, #24]
}
 8009812:	bf00      	nop
 8009814:	37b8      	adds	r7, #184	@ 0xb8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	40008000 	.word	0x40008000
 8009820:	08008f9d 	.word	0x08008f9d

08009824 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800986e:	2b01      	cmp	r3, #1
 8009870:	d101      	bne.n	8009876 <HAL_UARTEx_DisableFifoMode+0x16>
 8009872:	2302      	movs	r3, #2
 8009874:	e027      	b.n	80098c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2224      	movs	r2, #36	@ 0x24
 8009882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f022 0201 	bic.w	r2, r2, #1
 800989c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80098a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2220      	movs	r2, #32
 80098b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3714      	adds	r7, #20
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b084      	sub	sp, #16
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d101      	bne.n	80098ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098e6:	2302      	movs	r3, #2
 80098e8:	e02d      	b.n	8009946 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2201      	movs	r2, #1
 80098ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2224      	movs	r2, #36	@ 0x24
 80098f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f022 0201 	bic.w	r2, r2, #1
 8009910:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	683a      	ldr	r2, [r7, #0]
 8009922:	430a      	orrs	r2, r1
 8009924:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f850 	bl	80099cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2220      	movs	r2, #32
 8009938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b084      	sub	sp, #16
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
 8009956:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800995e:	2b01      	cmp	r3, #1
 8009960:	d101      	bne.n	8009966 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009962:	2302      	movs	r3, #2
 8009964:	e02d      	b.n	80099c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2224      	movs	r2, #36	@ 0x24
 8009972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f022 0201 	bic.w	r2, r2, #1
 800998c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	683a      	ldr	r2, [r7, #0]
 800999e:	430a      	orrs	r2, r1
 80099a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 f812 	bl	80099cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2220      	movs	r2, #32
 80099b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
	...

080099cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d108      	bne.n	80099ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099ec:	e031      	b.n	8009a52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099ee:	2308      	movs	r3, #8
 80099f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80099f2:	2308      	movs	r3, #8
 80099f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	0e5b      	lsrs	r3, r3, #25
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	f003 0307 	and.w	r3, r3, #7
 8009a04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	0f5b      	lsrs	r3, r3, #29
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	f003 0307 	and.w	r3, r3, #7
 8009a14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a16:	7bbb      	ldrb	r3, [r7, #14]
 8009a18:	7b3a      	ldrb	r2, [r7, #12]
 8009a1a:	4911      	ldr	r1, [pc, #68]	@ (8009a60 <UARTEx_SetNbDataToProcess+0x94>)
 8009a1c:	5c8a      	ldrb	r2, [r1, r2]
 8009a1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a22:	7b3a      	ldrb	r2, [r7, #12]
 8009a24:	490f      	ldr	r1, [pc, #60]	@ (8009a64 <UARTEx_SetNbDataToProcess+0x98>)
 8009a26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a28:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
 8009a36:	7b7a      	ldrb	r2, [r7, #13]
 8009a38:	4909      	ldr	r1, [pc, #36]	@ (8009a60 <UARTEx_SetNbDataToProcess+0x94>)
 8009a3a:	5c8a      	ldrb	r2, [r1, r2]
 8009a3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a40:	7b7a      	ldrb	r2, [r7, #13]
 8009a42:	4908      	ldr	r1, [pc, #32]	@ (8009a64 <UARTEx_SetNbDataToProcess+0x98>)
 8009a44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a46:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009a52:	bf00      	nop
 8009a54:	3714      	adds	r7, #20
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	0800ccfc 	.word	0x0800ccfc
 8009a64:	0800cd04 	.word	0x0800cd04

08009a68 <atof>:
 8009a68:	2100      	movs	r1, #0
 8009a6a:	f000 be09 	b.w	800a680 <strtod>

08009a6e <atoi>:
 8009a6e:	220a      	movs	r2, #10
 8009a70:	2100      	movs	r1, #0
 8009a72:	f000 be8b 	b.w	800a78c <strtol>

08009a76 <sulp>:
 8009a76:	b570      	push	{r4, r5, r6, lr}
 8009a78:	4604      	mov	r4, r0
 8009a7a:	460d      	mov	r5, r1
 8009a7c:	ec45 4b10 	vmov	d0, r4, r5
 8009a80:	4616      	mov	r6, r2
 8009a82:	f002 f85d 	bl	800bb40 <__ulp>
 8009a86:	ec51 0b10 	vmov	r0, r1, d0
 8009a8a:	b17e      	cbz	r6, 8009aac <sulp+0x36>
 8009a8c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009a90:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	dd09      	ble.n	8009aac <sulp+0x36>
 8009a98:	051b      	lsls	r3, r3, #20
 8009a9a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009a9e:	2400      	movs	r4, #0
 8009aa0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009aa4:	4622      	mov	r2, r4
 8009aa6:	462b      	mov	r3, r5
 8009aa8:	f7f6 fdce 	bl	8000648 <__aeabi_dmul>
 8009aac:	ec41 0b10 	vmov	d0, r0, r1
 8009ab0:	bd70      	pop	{r4, r5, r6, pc}
 8009ab2:	0000      	movs	r0, r0
 8009ab4:	0000      	movs	r0, r0
	...

08009ab8 <_strtod_l>:
 8009ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009abc:	b09f      	sub	sp, #124	@ 0x7c
 8009abe:	460c      	mov	r4, r1
 8009ac0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	921a      	str	r2, [sp, #104]	@ 0x68
 8009ac6:	9005      	str	r0, [sp, #20]
 8009ac8:	f04f 0a00 	mov.w	sl, #0
 8009acc:	f04f 0b00 	mov.w	fp, #0
 8009ad0:	460a      	mov	r2, r1
 8009ad2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ad4:	7811      	ldrb	r1, [r2, #0]
 8009ad6:	292b      	cmp	r1, #43	@ 0x2b
 8009ad8:	d04a      	beq.n	8009b70 <_strtod_l+0xb8>
 8009ada:	d838      	bhi.n	8009b4e <_strtod_l+0x96>
 8009adc:	290d      	cmp	r1, #13
 8009ade:	d832      	bhi.n	8009b46 <_strtod_l+0x8e>
 8009ae0:	2908      	cmp	r1, #8
 8009ae2:	d832      	bhi.n	8009b4a <_strtod_l+0x92>
 8009ae4:	2900      	cmp	r1, #0
 8009ae6:	d03b      	beq.n	8009b60 <_strtod_l+0xa8>
 8009ae8:	2200      	movs	r2, #0
 8009aea:	920e      	str	r2, [sp, #56]	@ 0x38
 8009aec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009aee:	782a      	ldrb	r2, [r5, #0]
 8009af0:	2a30      	cmp	r2, #48	@ 0x30
 8009af2:	f040 80b2 	bne.w	8009c5a <_strtod_l+0x1a2>
 8009af6:	786a      	ldrb	r2, [r5, #1]
 8009af8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009afc:	2a58      	cmp	r2, #88	@ 0x58
 8009afe:	d16e      	bne.n	8009bde <_strtod_l+0x126>
 8009b00:	9302      	str	r3, [sp, #8]
 8009b02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b04:	9301      	str	r3, [sp, #4]
 8009b06:	ab1a      	add	r3, sp, #104	@ 0x68
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	4a8f      	ldr	r2, [pc, #572]	@ (8009d48 <_strtod_l+0x290>)
 8009b0c:	9805      	ldr	r0, [sp, #20]
 8009b0e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009b10:	a919      	add	r1, sp, #100	@ 0x64
 8009b12:	f001 f917 	bl	800ad44 <__gethex>
 8009b16:	f010 060f 	ands.w	r6, r0, #15
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	d005      	beq.n	8009b2a <_strtod_l+0x72>
 8009b1e:	2e06      	cmp	r6, #6
 8009b20:	d128      	bne.n	8009b74 <_strtod_l+0xbc>
 8009b22:	3501      	adds	r5, #1
 8009b24:	2300      	movs	r3, #0
 8009b26:	9519      	str	r5, [sp, #100]	@ 0x64
 8009b28:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f040 858e 	bne.w	800a64e <_strtod_l+0xb96>
 8009b32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b34:	b1cb      	cbz	r3, 8009b6a <_strtod_l+0xb2>
 8009b36:	4652      	mov	r2, sl
 8009b38:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009b3c:	ec43 2b10 	vmov	d0, r2, r3
 8009b40:	b01f      	add	sp, #124	@ 0x7c
 8009b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b46:	2920      	cmp	r1, #32
 8009b48:	d1ce      	bne.n	8009ae8 <_strtod_l+0x30>
 8009b4a:	3201      	adds	r2, #1
 8009b4c:	e7c1      	b.n	8009ad2 <_strtod_l+0x1a>
 8009b4e:	292d      	cmp	r1, #45	@ 0x2d
 8009b50:	d1ca      	bne.n	8009ae8 <_strtod_l+0x30>
 8009b52:	2101      	movs	r1, #1
 8009b54:	910e      	str	r1, [sp, #56]	@ 0x38
 8009b56:	1c51      	adds	r1, r2, #1
 8009b58:	9119      	str	r1, [sp, #100]	@ 0x64
 8009b5a:	7852      	ldrb	r2, [r2, #1]
 8009b5c:	2a00      	cmp	r2, #0
 8009b5e:	d1c5      	bne.n	8009aec <_strtod_l+0x34>
 8009b60:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b62:	9419      	str	r4, [sp, #100]	@ 0x64
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f040 8570 	bne.w	800a64a <_strtod_l+0xb92>
 8009b6a:	4652      	mov	r2, sl
 8009b6c:	465b      	mov	r3, fp
 8009b6e:	e7e5      	b.n	8009b3c <_strtod_l+0x84>
 8009b70:	2100      	movs	r1, #0
 8009b72:	e7ef      	b.n	8009b54 <_strtod_l+0x9c>
 8009b74:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009b76:	b13a      	cbz	r2, 8009b88 <_strtod_l+0xd0>
 8009b78:	2135      	movs	r1, #53	@ 0x35
 8009b7a:	a81c      	add	r0, sp, #112	@ 0x70
 8009b7c:	f002 f8da 	bl	800bd34 <__copybits>
 8009b80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b82:	9805      	ldr	r0, [sp, #20]
 8009b84:	f001 fcb0 	bl	800b4e8 <_Bfree>
 8009b88:	3e01      	subs	r6, #1
 8009b8a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009b8c:	2e04      	cmp	r6, #4
 8009b8e:	d806      	bhi.n	8009b9e <_strtod_l+0xe6>
 8009b90:	e8df f006 	tbb	[pc, r6]
 8009b94:	201d0314 	.word	0x201d0314
 8009b98:	14          	.byte	0x14
 8009b99:	00          	.byte	0x00
 8009b9a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009b9e:	05e1      	lsls	r1, r4, #23
 8009ba0:	bf48      	it	mi
 8009ba2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009ba6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009baa:	0d1b      	lsrs	r3, r3, #20
 8009bac:	051b      	lsls	r3, r3, #20
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1bb      	bne.n	8009b2a <_strtod_l+0x72>
 8009bb2:	f000 ffcf 	bl	800ab54 <__errno>
 8009bb6:	2322      	movs	r3, #34	@ 0x22
 8009bb8:	6003      	str	r3, [r0, #0]
 8009bba:	e7b6      	b.n	8009b2a <_strtod_l+0x72>
 8009bbc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009bc0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009bc4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009bc8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009bcc:	e7e7      	b.n	8009b9e <_strtod_l+0xe6>
 8009bce:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009d50 <_strtod_l+0x298>
 8009bd2:	e7e4      	b.n	8009b9e <_strtod_l+0xe6>
 8009bd4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009bd8:	f04f 3aff 	mov.w	sl, #4294967295
 8009bdc:	e7df      	b.n	8009b9e <_strtod_l+0xe6>
 8009bde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009be0:	1c5a      	adds	r2, r3, #1
 8009be2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009be4:	785b      	ldrb	r3, [r3, #1]
 8009be6:	2b30      	cmp	r3, #48	@ 0x30
 8009be8:	d0f9      	beq.n	8009bde <_strtod_l+0x126>
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d09d      	beq.n	8009b2a <_strtod_l+0x72>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	2700      	movs	r7, #0
 8009bf2:	9308      	str	r3, [sp, #32]
 8009bf4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bf6:	930c      	str	r3, [sp, #48]	@ 0x30
 8009bf8:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009bfa:	46b9      	mov	r9, r7
 8009bfc:	220a      	movs	r2, #10
 8009bfe:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009c00:	7805      	ldrb	r5, [r0, #0]
 8009c02:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009c06:	b2d9      	uxtb	r1, r3
 8009c08:	2909      	cmp	r1, #9
 8009c0a:	d928      	bls.n	8009c5e <_strtod_l+0x1a6>
 8009c0c:	494f      	ldr	r1, [pc, #316]	@ (8009d4c <_strtod_l+0x294>)
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f000 ff09 	bl	800aa26 <strncmp>
 8009c14:	2800      	cmp	r0, #0
 8009c16:	d032      	beq.n	8009c7e <_strtod_l+0x1c6>
 8009c18:	2000      	movs	r0, #0
 8009c1a:	462a      	mov	r2, r5
 8009c1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c1e:	464d      	mov	r5, r9
 8009c20:	4603      	mov	r3, r0
 8009c22:	2a65      	cmp	r2, #101	@ 0x65
 8009c24:	d001      	beq.n	8009c2a <_strtod_l+0x172>
 8009c26:	2a45      	cmp	r2, #69	@ 0x45
 8009c28:	d114      	bne.n	8009c54 <_strtod_l+0x19c>
 8009c2a:	b91d      	cbnz	r5, 8009c34 <_strtod_l+0x17c>
 8009c2c:	9a08      	ldr	r2, [sp, #32]
 8009c2e:	4302      	orrs	r2, r0
 8009c30:	d096      	beq.n	8009b60 <_strtod_l+0xa8>
 8009c32:	2500      	movs	r5, #0
 8009c34:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009c36:	1c62      	adds	r2, r4, #1
 8009c38:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c3a:	7862      	ldrb	r2, [r4, #1]
 8009c3c:	2a2b      	cmp	r2, #43	@ 0x2b
 8009c3e:	d07a      	beq.n	8009d36 <_strtod_l+0x27e>
 8009c40:	2a2d      	cmp	r2, #45	@ 0x2d
 8009c42:	d07e      	beq.n	8009d42 <_strtod_l+0x28a>
 8009c44:	f04f 0c00 	mov.w	ip, #0
 8009c48:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009c4c:	2909      	cmp	r1, #9
 8009c4e:	f240 8085 	bls.w	8009d5c <_strtod_l+0x2a4>
 8009c52:	9419      	str	r4, [sp, #100]	@ 0x64
 8009c54:	f04f 0800 	mov.w	r8, #0
 8009c58:	e0a5      	b.n	8009da6 <_strtod_l+0x2ee>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	e7c8      	b.n	8009bf0 <_strtod_l+0x138>
 8009c5e:	f1b9 0f08 	cmp.w	r9, #8
 8009c62:	bfd8      	it	le
 8009c64:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009c66:	f100 0001 	add.w	r0, r0, #1
 8009c6a:	bfda      	itte	le
 8009c6c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009c70:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009c72:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009c76:	f109 0901 	add.w	r9, r9, #1
 8009c7a:	9019      	str	r0, [sp, #100]	@ 0x64
 8009c7c:	e7bf      	b.n	8009bfe <_strtod_l+0x146>
 8009c7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c80:	1c5a      	adds	r2, r3, #1
 8009c82:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c84:	785a      	ldrb	r2, [r3, #1]
 8009c86:	f1b9 0f00 	cmp.w	r9, #0
 8009c8a:	d03b      	beq.n	8009d04 <_strtod_l+0x24c>
 8009c8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c8e:	464d      	mov	r5, r9
 8009c90:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009c94:	2b09      	cmp	r3, #9
 8009c96:	d912      	bls.n	8009cbe <_strtod_l+0x206>
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e7c2      	b.n	8009c22 <_strtod_l+0x16a>
 8009c9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c9e:	1c5a      	adds	r2, r3, #1
 8009ca0:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ca2:	785a      	ldrb	r2, [r3, #1]
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	2a30      	cmp	r2, #48	@ 0x30
 8009ca8:	d0f8      	beq.n	8009c9c <_strtod_l+0x1e4>
 8009caa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009cae:	2b08      	cmp	r3, #8
 8009cb0:	f200 84d2 	bhi.w	800a658 <_strtod_l+0xba0>
 8009cb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cb6:	900a      	str	r0, [sp, #40]	@ 0x28
 8009cb8:	2000      	movs	r0, #0
 8009cba:	930c      	str	r3, [sp, #48]	@ 0x30
 8009cbc:	4605      	mov	r5, r0
 8009cbe:	3a30      	subs	r2, #48	@ 0x30
 8009cc0:	f100 0301 	add.w	r3, r0, #1
 8009cc4:	d018      	beq.n	8009cf8 <_strtod_l+0x240>
 8009cc6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009cc8:	4419      	add	r1, r3
 8009cca:	910a      	str	r1, [sp, #40]	@ 0x28
 8009ccc:	462e      	mov	r6, r5
 8009cce:	f04f 0e0a 	mov.w	lr, #10
 8009cd2:	1c71      	adds	r1, r6, #1
 8009cd4:	eba1 0c05 	sub.w	ip, r1, r5
 8009cd8:	4563      	cmp	r3, ip
 8009cda:	dc15      	bgt.n	8009d08 <_strtod_l+0x250>
 8009cdc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009ce0:	182b      	adds	r3, r5, r0
 8009ce2:	2b08      	cmp	r3, #8
 8009ce4:	f105 0501 	add.w	r5, r5, #1
 8009ce8:	4405      	add	r5, r0
 8009cea:	dc1a      	bgt.n	8009d22 <_strtod_l+0x26a>
 8009cec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009cee:	230a      	movs	r3, #10
 8009cf0:	fb03 2301 	mla	r3, r3, r1, r2
 8009cf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009cfa:	1c51      	adds	r1, r2, #1
 8009cfc:	9119      	str	r1, [sp, #100]	@ 0x64
 8009cfe:	7852      	ldrb	r2, [r2, #1]
 8009d00:	4618      	mov	r0, r3
 8009d02:	e7c5      	b.n	8009c90 <_strtod_l+0x1d8>
 8009d04:	4648      	mov	r0, r9
 8009d06:	e7ce      	b.n	8009ca6 <_strtod_l+0x1ee>
 8009d08:	2e08      	cmp	r6, #8
 8009d0a:	dc05      	bgt.n	8009d18 <_strtod_l+0x260>
 8009d0c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009d0e:	fb0e f606 	mul.w	r6, lr, r6
 8009d12:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009d14:	460e      	mov	r6, r1
 8009d16:	e7dc      	b.n	8009cd2 <_strtod_l+0x21a>
 8009d18:	2910      	cmp	r1, #16
 8009d1a:	bfd8      	it	le
 8009d1c:	fb0e f707 	mulle.w	r7, lr, r7
 8009d20:	e7f8      	b.n	8009d14 <_strtod_l+0x25c>
 8009d22:	2b0f      	cmp	r3, #15
 8009d24:	bfdc      	itt	le
 8009d26:	230a      	movle	r3, #10
 8009d28:	fb03 2707 	mlale	r7, r3, r7, r2
 8009d2c:	e7e3      	b.n	8009cf6 <_strtod_l+0x23e>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d32:	2301      	movs	r3, #1
 8009d34:	e77a      	b.n	8009c2c <_strtod_l+0x174>
 8009d36:	f04f 0c00 	mov.w	ip, #0
 8009d3a:	1ca2      	adds	r2, r4, #2
 8009d3c:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d3e:	78a2      	ldrb	r2, [r4, #2]
 8009d40:	e782      	b.n	8009c48 <_strtod_l+0x190>
 8009d42:	f04f 0c01 	mov.w	ip, #1
 8009d46:	e7f8      	b.n	8009d3a <_strtod_l+0x282>
 8009d48:	0800ce88 	.word	0x0800ce88
 8009d4c:	0800cd0c 	.word	0x0800cd0c
 8009d50:	7ff00000 	.word	0x7ff00000
 8009d54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d56:	1c51      	adds	r1, r2, #1
 8009d58:	9119      	str	r1, [sp, #100]	@ 0x64
 8009d5a:	7852      	ldrb	r2, [r2, #1]
 8009d5c:	2a30      	cmp	r2, #48	@ 0x30
 8009d5e:	d0f9      	beq.n	8009d54 <_strtod_l+0x29c>
 8009d60:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009d64:	2908      	cmp	r1, #8
 8009d66:	f63f af75 	bhi.w	8009c54 <_strtod_l+0x19c>
 8009d6a:	3a30      	subs	r2, #48	@ 0x30
 8009d6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d6e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d70:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009d72:	f04f 080a 	mov.w	r8, #10
 8009d76:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d78:	1c56      	adds	r6, r2, #1
 8009d7a:	9619      	str	r6, [sp, #100]	@ 0x64
 8009d7c:	7852      	ldrb	r2, [r2, #1]
 8009d7e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009d82:	f1be 0f09 	cmp.w	lr, #9
 8009d86:	d939      	bls.n	8009dfc <_strtod_l+0x344>
 8009d88:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009d8a:	1a76      	subs	r6, r6, r1
 8009d8c:	2e08      	cmp	r6, #8
 8009d8e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009d92:	dc03      	bgt.n	8009d9c <_strtod_l+0x2e4>
 8009d94:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d96:	4588      	cmp	r8, r1
 8009d98:	bfa8      	it	ge
 8009d9a:	4688      	movge	r8, r1
 8009d9c:	f1bc 0f00 	cmp.w	ip, #0
 8009da0:	d001      	beq.n	8009da6 <_strtod_l+0x2ee>
 8009da2:	f1c8 0800 	rsb	r8, r8, #0
 8009da6:	2d00      	cmp	r5, #0
 8009da8:	d14e      	bne.n	8009e48 <_strtod_l+0x390>
 8009daa:	9908      	ldr	r1, [sp, #32]
 8009dac:	4308      	orrs	r0, r1
 8009dae:	f47f aebc 	bne.w	8009b2a <_strtod_l+0x72>
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f47f aed4 	bne.w	8009b60 <_strtod_l+0xa8>
 8009db8:	2a69      	cmp	r2, #105	@ 0x69
 8009dba:	d028      	beq.n	8009e0e <_strtod_l+0x356>
 8009dbc:	dc25      	bgt.n	8009e0a <_strtod_l+0x352>
 8009dbe:	2a49      	cmp	r2, #73	@ 0x49
 8009dc0:	d025      	beq.n	8009e0e <_strtod_l+0x356>
 8009dc2:	2a4e      	cmp	r2, #78	@ 0x4e
 8009dc4:	f47f aecc 	bne.w	8009b60 <_strtod_l+0xa8>
 8009dc8:	499a      	ldr	r1, [pc, #616]	@ (800a034 <_strtod_l+0x57c>)
 8009dca:	a819      	add	r0, sp, #100	@ 0x64
 8009dcc:	f001 f9dc 	bl	800b188 <__match>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	f43f aec5 	beq.w	8009b60 <_strtod_l+0xa8>
 8009dd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	2b28      	cmp	r3, #40	@ 0x28
 8009ddc:	d12e      	bne.n	8009e3c <_strtod_l+0x384>
 8009dde:	4996      	ldr	r1, [pc, #600]	@ (800a038 <_strtod_l+0x580>)
 8009de0:	aa1c      	add	r2, sp, #112	@ 0x70
 8009de2:	a819      	add	r0, sp, #100	@ 0x64
 8009de4:	f001 f9e4 	bl	800b1b0 <__hexnan>
 8009de8:	2805      	cmp	r0, #5
 8009dea:	d127      	bne.n	8009e3c <_strtod_l+0x384>
 8009dec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009dee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009df2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009df6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009dfa:	e696      	b.n	8009b2a <_strtod_l+0x72>
 8009dfc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009dfe:	fb08 2101 	mla	r1, r8, r1, r2
 8009e02:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009e06:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e08:	e7b5      	b.n	8009d76 <_strtod_l+0x2be>
 8009e0a:	2a6e      	cmp	r2, #110	@ 0x6e
 8009e0c:	e7da      	b.n	8009dc4 <_strtod_l+0x30c>
 8009e0e:	498b      	ldr	r1, [pc, #556]	@ (800a03c <_strtod_l+0x584>)
 8009e10:	a819      	add	r0, sp, #100	@ 0x64
 8009e12:	f001 f9b9 	bl	800b188 <__match>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	f43f aea2 	beq.w	8009b60 <_strtod_l+0xa8>
 8009e1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e1e:	4988      	ldr	r1, [pc, #544]	@ (800a040 <_strtod_l+0x588>)
 8009e20:	3b01      	subs	r3, #1
 8009e22:	a819      	add	r0, sp, #100	@ 0x64
 8009e24:	9319      	str	r3, [sp, #100]	@ 0x64
 8009e26:	f001 f9af 	bl	800b188 <__match>
 8009e2a:	b910      	cbnz	r0, 8009e32 <_strtod_l+0x37a>
 8009e2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e2e:	3301      	adds	r3, #1
 8009e30:	9319      	str	r3, [sp, #100]	@ 0x64
 8009e32:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a050 <_strtod_l+0x598>
 8009e36:	f04f 0a00 	mov.w	sl, #0
 8009e3a:	e676      	b.n	8009b2a <_strtod_l+0x72>
 8009e3c:	4881      	ldr	r0, [pc, #516]	@ (800a044 <_strtod_l+0x58c>)
 8009e3e:	f000 fec7 	bl	800abd0 <nan>
 8009e42:	ec5b ab10 	vmov	sl, fp, d0
 8009e46:	e670      	b.n	8009b2a <_strtod_l+0x72>
 8009e48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e4a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009e4c:	eba8 0303 	sub.w	r3, r8, r3
 8009e50:	f1b9 0f00 	cmp.w	r9, #0
 8009e54:	bf08      	it	eq
 8009e56:	46a9      	moveq	r9, r5
 8009e58:	2d10      	cmp	r5, #16
 8009e5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e5c:	462c      	mov	r4, r5
 8009e5e:	bfa8      	it	ge
 8009e60:	2410      	movge	r4, #16
 8009e62:	f7f6 fb77 	bl	8000554 <__aeabi_ui2d>
 8009e66:	2d09      	cmp	r5, #9
 8009e68:	4682      	mov	sl, r0
 8009e6a:	468b      	mov	fp, r1
 8009e6c:	dc13      	bgt.n	8009e96 <_strtod_l+0x3de>
 8009e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f43f ae5a 	beq.w	8009b2a <_strtod_l+0x72>
 8009e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e78:	dd78      	ble.n	8009f6c <_strtod_l+0x4b4>
 8009e7a:	2b16      	cmp	r3, #22
 8009e7c:	dc5f      	bgt.n	8009f3e <_strtod_l+0x486>
 8009e7e:	4972      	ldr	r1, [pc, #456]	@ (800a048 <_strtod_l+0x590>)
 8009e80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e88:	4652      	mov	r2, sl
 8009e8a:	465b      	mov	r3, fp
 8009e8c:	f7f6 fbdc 	bl	8000648 <__aeabi_dmul>
 8009e90:	4682      	mov	sl, r0
 8009e92:	468b      	mov	fp, r1
 8009e94:	e649      	b.n	8009b2a <_strtod_l+0x72>
 8009e96:	4b6c      	ldr	r3, [pc, #432]	@ (800a048 <_strtod_l+0x590>)
 8009e98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009ea0:	f7f6 fbd2 	bl	8000648 <__aeabi_dmul>
 8009ea4:	4682      	mov	sl, r0
 8009ea6:	4638      	mov	r0, r7
 8009ea8:	468b      	mov	fp, r1
 8009eaa:	f7f6 fb53 	bl	8000554 <__aeabi_ui2d>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	4650      	mov	r0, sl
 8009eb4:	4659      	mov	r1, fp
 8009eb6:	f7f6 fa11 	bl	80002dc <__adddf3>
 8009eba:	2d0f      	cmp	r5, #15
 8009ebc:	4682      	mov	sl, r0
 8009ebe:	468b      	mov	fp, r1
 8009ec0:	ddd5      	ble.n	8009e6e <_strtod_l+0x3b6>
 8009ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ec4:	1b2c      	subs	r4, r5, r4
 8009ec6:	441c      	add	r4, r3
 8009ec8:	2c00      	cmp	r4, #0
 8009eca:	f340 8093 	ble.w	8009ff4 <_strtod_l+0x53c>
 8009ece:	f014 030f 	ands.w	r3, r4, #15
 8009ed2:	d00a      	beq.n	8009eea <_strtod_l+0x432>
 8009ed4:	495c      	ldr	r1, [pc, #368]	@ (800a048 <_strtod_l+0x590>)
 8009ed6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009eda:	4652      	mov	r2, sl
 8009edc:	465b      	mov	r3, fp
 8009ede:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ee2:	f7f6 fbb1 	bl	8000648 <__aeabi_dmul>
 8009ee6:	4682      	mov	sl, r0
 8009ee8:	468b      	mov	fp, r1
 8009eea:	f034 040f 	bics.w	r4, r4, #15
 8009eee:	d073      	beq.n	8009fd8 <_strtod_l+0x520>
 8009ef0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009ef4:	dd49      	ble.n	8009f8a <_strtod_l+0x4d2>
 8009ef6:	2400      	movs	r4, #0
 8009ef8:	46a0      	mov	r8, r4
 8009efa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009efc:	46a1      	mov	r9, r4
 8009efe:	9a05      	ldr	r2, [sp, #20]
 8009f00:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a050 <_strtod_l+0x598>
 8009f04:	2322      	movs	r3, #34	@ 0x22
 8009f06:	6013      	str	r3, [r2, #0]
 8009f08:	f04f 0a00 	mov.w	sl, #0
 8009f0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f43f ae0b 	beq.w	8009b2a <_strtod_l+0x72>
 8009f14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f16:	9805      	ldr	r0, [sp, #20]
 8009f18:	f001 fae6 	bl	800b4e8 <_Bfree>
 8009f1c:	9805      	ldr	r0, [sp, #20]
 8009f1e:	4649      	mov	r1, r9
 8009f20:	f001 fae2 	bl	800b4e8 <_Bfree>
 8009f24:	9805      	ldr	r0, [sp, #20]
 8009f26:	4641      	mov	r1, r8
 8009f28:	f001 fade 	bl	800b4e8 <_Bfree>
 8009f2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f2e:	9805      	ldr	r0, [sp, #20]
 8009f30:	f001 fada 	bl	800b4e8 <_Bfree>
 8009f34:	9805      	ldr	r0, [sp, #20]
 8009f36:	4621      	mov	r1, r4
 8009f38:	f001 fad6 	bl	800b4e8 <_Bfree>
 8009f3c:	e5f5      	b.n	8009b2a <_strtod_l+0x72>
 8009f3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009f44:	4293      	cmp	r3, r2
 8009f46:	dbbc      	blt.n	8009ec2 <_strtod_l+0x40a>
 8009f48:	4c3f      	ldr	r4, [pc, #252]	@ (800a048 <_strtod_l+0x590>)
 8009f4a:	f1c5 050f 	rsb	r5, r5, #15
 8009f4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009f52:	4652      	mov	r2, sl
 8009f54:	465b      	mov	r3, fp
 8009f56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f5a:	f7f6 fb75 	bl	8000648 <__aeabi_dmul>
 8009f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f60:	1b5d      	subs	r5, r3, r5
 8009f62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009f66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009f6a:	e78f      	b.n	8009e8c <_strtod_l+0x3d4>
 8009f6c:	3316      	adds	r3, #22
 8009f6e:	dba8      	blt.n	8009ec2 <_strtod_l+0x40a>
 8009f70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f72:	eba3 0808 	sub.w	r8, r3, r8
 8009f76:	4b34      	ldr	r3, [pc, #208]	@ (800a048 <_strtod_l+0x590>)
 8009f78:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009f7c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009f80:	4650      	mov	r0, sl
 8009f82:	4659      	mov	r1, fp
 8009f84:	f7f6 fc8a 	bl	800089c <__aeabi_ddiv>
 8009f88:	e782      	b.n	8009e90 <_strtod_l+0x3d8>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	4f2f      	ldr	r7, [pc, #188]	@ (800a04c <_strtod_l+0x594>)
 8009f8e:	1124      	asrs	r4, r4, #4
 8009f90:	4650      	mov	r0, sl
 8009f92:	4659      	mov	r1, fp
 8009f94:	461e      	mov	r6, r3
 8009f96:	2c01      	cmp	r4, #1
 8009f98:	dc21      	bgt.n	8009fde <_strtod_l+0x526>
 8009f9a:	b10b      	cbz	r3, 8009fa0 <_strtod_l+0x4e8>
 8009f9c:	4682      	mov	sl, r0
 8009f9e:	468b      	mov	fp, r1
 8009fa0:	492a      	ldr	r1, [pc, #168]	@ (800a04c <_strtod_l+0x594>)
 8009fa2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009fa6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009faa:	4652      	mov	r2, sl
 8009fac:	465b      	mov	r3, fp
 8009fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fb2:	f7f6 fb49 	bl	8000648 <__aeabi_dmul>
 8009fb6:	4b26      	ldr	r3, [pc, #152]	@ (800a050 <_strtod_l+0x598>)
 8009fb8:	460a      	mov	r2, r1
 8009fba:	400b      	ands	r3, r1
 8009fbc:	4925      	ldr	r1, [pc, #148]	@ (800a054 <_strtod_l+0x59c>)
 8009fbe:	428b      	cmp	r3, r1
 8009fc0:	4682      	mov	sl, r0
 8009fc2:	d898      	bhi.n	8009ef6 <_strtod_l+0x43e>
 8009fc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009fc8:	428b      	cmp	r3, r1
 8009fca:	bf86      	itte	hi
 8009fcc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a058 <_strtod_l+0x5a0>
 8009fd0:	f04f 3aff 	movhi.w	sl, #4294967295
 8009fd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009fd8:	2300      	movs	r3, #0
 8009fda:	9308      	str	r3, [sp, #32]
 8009fdc:	e076      	b.n	800a0cc <_strtod_l+0x614>
 8009fde:	07e2      	lsls	r2, r4, #31
 8009fe0:	d504      	bpl.n	8009fec <_strtod_l+0x534>
 8009fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fe6:	f7f6 fb2f 	bl	8000648 <__aeabi_dmul>
 8009fea:	2301      	movs	r3, #1
 8009fec:	3601      	adds	r6, #1
 8009fee:	1064      	asrs	r4, r4, #1
 8009ff0:	3708      	adds	r7, #8
 8009ff2:	e7d0      	b.n	8009f96 <_strtod_l+0x4de>
 8009ff4:	d0f0      	beq.n	8009fd8 <_strtod_l+0x520>
 8009ff6:	4264      	negs	r4, r4
 8009ff8:	f014 020f 	ands.w	r2, r4, #15
 8009ffc:	d00a      	beq.n	800a014 <_strtod_l+0x55c>
 8009ffe:	4b12      	ldr	r3, [pc, #72]	@ (800a048 <_strtod_l+0x590>)
 800a000:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a004:	4650      	mov	r0, sl
 800a006:	4659      	mov	r1, fp
 800a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00c:	f7f6 fc46 	bl	800089c <__aeabi_ddiv>
 800a010:	4682      	mov	sl, r0
 800a012:	468b      	mov	fp, r1
 800a014:	1124      	asrs	r4, r4, #4
 800a016:	d0df      	beq.n	8009fd8 <_strtod_l+0x520>
 800a018:	2c1f      	cmp	r4, #31
 800a01a:	dd1f      	ble.n	800a05c <_strtod_l+0x5a4>
 800a01c:	2400      	movs	r4, #0
 800a01e:	46a0      	mov	r8, r4
 800a020:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a022:	46a1      	mov	r9, r4
 800a024:	9a05      	ldr	r2, [sp, #20]
 800a026:	2322      	movs	r3, #34	@ 0x22
 800a028:	f04f 0a00 	mov.w	sl, #0
 800a02c:	f04f 0b00 	mov.w	fp, #0
 800a030:	6013      	str	r3, [r2, #0]
 800a032:	e76b      	b.n	8009f0c <_strtod_l+0x454>
 800a034:	0800cd17 	.word	0x0800cd17
 800a038:	0800ce74 	.word	0x0800ce74
 800a03c:	0800cd0e 	.word	0x0800cd0e
 800a040:	0800cd11 	.word	0x0800cd11
 800a044:	0800ce71 	.word	0x0800ce71
 800a048:	0800d000 	.word	0x0800d000
 800a04c:	0800cfd8 	.word	0x0800cfd8
 800a050:	7ff00000 	.word	0x7ff00000
 800a054:	7ca00000 	.word	0x7ca00000
 800a058:	7fefffff 	.word	0x7fefffff
 800a05c:	f014 0310 	ands.w	r3, r4, #16
 800a060:	bf18      	it	ne
 800a062:	236a      	movne	r3, #106	@ 0x6a
 800a064:	4ea9      	ldr	r6, [pc, #676]	@ (800a30c <_strtod_l+0x854>)
 800a066:	9308      	str	r3, [sp, #32]
 800a068:	4650      	mov	r0, sl
 800a06a:	4659      	mov	r1, fp
 800a06c:	2300      	movs	r3, #0
 800a06e:	07e7      	lsls	r7, r4, #31
 800a070:	d504      	bpl.n	800a07c <_strtod_l+0x5c4>
 800a072:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a076:	f7f6 fae7 	bl	8000648 <__aeabi_dmul>
 800a07a:	2301      	movs	r3, #1
 800a07c:	1064      	asrs	r4, r4, #1
 800a07e:	f106 0608 	add.w	r6, r6, #8
 800a082:	d1f4      	bne.n	800a06e <_strtod_l+0x5b6>
 800a084:	b10b      	cbz	r3, 800a08a <_strtod_l+0x5d2>
 800a086:	4682      	mov	sl, r0
 800a088:	468b      	mov	fp, r1
 800a08a:	9b08      	ldr	r3, [sp, #32]
 800a08c:	b1b3      	cbz	r3, 800a0bc <_strtod_l+0x604>
 800a08e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a092:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a096:	2b00      	cmp	r3, #0
 800a098:	4659      	mov	r1, fp
 800a09a:	dd0f      	ble.n	800a0bc <_strtod_l+0x604>
 800a09c:	2b1f      	cmp	r3, #31
 800a09e:	dd56      	ble.n	800a14e <_strtod_l+0x696>
 800a0a0:	2b34      	cmp	r3, #52	@ 0x34
 800a0a2:	bfde      	ittt	le
 800a0a4:	f04f 33ff 	movle.w	r3, #4294967295
 800a0a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a0ac:	4093      	lslle	r3, r2
 800a0ae:	f04f 0a00 	mov.w	sl, #0
 800a0b2:	bfcc      	ite	gt
 800a0b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a0b8:	ea03 0b01 	andle.w	fp, r3, r1
 800a0bc:	2200      	movs	r2, #0
 800a0be:	2300      	movs	r3, #0
 800a0c0:	4650      	mov	r0, sl
 800a0c2:	4659      	mov	r1, fp
 800a0c4:	f7f6 fd28 	bl	8000b18 <__aeabi_dcmpeq>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d1a7      	bne.n	800a01c <_strtod_l+0x564>
 800a0cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a0d2:	9805      	ldr	r0, [sp, #20]
 800a0d4:	462b      	mov	r3, r5
 800a0d6:	464a      	mov	r2, r9
 800a0d8:	f001 fa6e 	bl	800b5b8 <__s2b>
 800a0dc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	f43f af09 	beq.w	8009ef6 <_strtod_l+0x43e>
 800a0e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0e8:	2a00      	cmp	r2, #0
 800a0ea:	eba3 0308 	sub.w	r3, r3, r8
 800a0ee:	bfa8      	it	ge
 800a0f0:	2300      	movge	r3, #0
 800a0f2:	9312      	str	r3, [sp, #72]	@ 0x48
 800a0f4:	2400      	movs	r4, #0
 800a0f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a0fa:	9316      	str	r3, [sp, #88]	@ 0x58
 800a0fc:	46a0      	mov	r8, r4
 800a0fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a100:	9805      	ldr	r0, [sp, #20]
 800a102:	6859      	ldr	r1, [r3, #4]
 800a104:	f001 f9b0 	bl	800b468 <_Balloc>
 800a108:	4681      	mov	r9, r0
 800a10a:	2800      	cmp	r0, #0
 800a10c:	f43f aef7 	beq.w	8009efe <_strtod_l+0x446>
 800a110:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a112:	691a      	ldr	r2, [r3, #16]
 800a114:	3202      	adds	r2, #2
 800a116:	f103 010c 	add.w	r1, r3, #12
 800a11a:	0092      	lsls	r2, r2, #2
 800a11c:	300c      	adds	r0, #12
 800a11e:	f000 fd46 	bl	800abae <memcpy>
 800a122:	ec4b ab10 	vmov	d0, sl, fp
 800a126:	9805      	ldr	r0, [sp, #20]
 800a128:	aa1c      	add	r2, sp, #112	@ 0x70
 800a12a:	a91b      	add	r1, sp, #108	@ 0x6c
 800a12c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a130:	f001 fd76 	bl	800bc20 <__d2b>
 800a134:	901a      	str	r0, [sp, #104]	@ 0x68
 800a136:	2800      	cmp	r0, #0
 800a138:	f43f aee1 	beq.w	8009efe <_strtod_l+0x446>
 800a13c:	9805      	ldr	r0, [sp, #20]
 800a13e:	2101      	movs	r1, #1
 800a140:	f001 fad0 	bl	800b6e4 <__i2b>
 800a144:	4680      	mov	r8, r0
 800a146:	b948      	cbnz	r0, 800a15c <_strtod_l+0x6a4>
 800a148:	f04f 0800 	mov.w	r8, #0
 800a14c:	e6d7      	b.n	8009efe <_strtod_l+0x446>
 800a14e:	f04f 32ff 	mov.w	r2, #4294967295
 800a152:	fa02 f303 	lsl.w	r3, r2, r3
 800a156:	ea03 0a0a 	and.w	sl, r3, sl
 800a15a:	e7af      	b.n	800a0bc <_strtod_l+0x604>
 800a15c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a15e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a160:	2d00      	cmp	r5, #0
 800a162:	bfab      	itete	ge
 800a164:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a166:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a168:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a16a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a16c:	bfac      	ite	ge
 800a16e:	18ef      	addge	r7, r5, r3
 800a170:	1b5e      	sublt	r6, r3, r5
 800a172:	9b08      	ldr	r3, [sp, #32]
 800a174:	1aed      	subs	r5, r5, r3
 800a176:	4415      	add	r5, r2
 800a178:	4b65      	ldr	r3, [pc, #404]	@ (800a310 <_strtod_l+0x858>)
 800a17a:	3d01      	subs	r5, #1
 800a17c:	429d      	cmp	r5, r3
 800a17e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a182:	da50      	bge.n	800a226 <_strtod_l+0x76e>
 800a184:	1b5b      	subs	r3, r3, r5
 800a186:	2b1f      	cmp	r3, #31
 800a188:	eba2 0203 	sub.w	r2, r2, r3
 800a18c:	f04f 0101 	mov.w	r1, #1
 800a190:	dc3d      	bgt.n	800a20e <_strtod_l+0x756>
 800a192:	fa01 f303 	lsl.w	r3, r1, r3
 800a196:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a198:	2300      	movs	r3, #0
 800a19a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a19c:	18bd      	adds	r5, r7, r2
 800a19e:	9b08      	ldr	r3, [sp, #32]
 800a1a0:	42af      	cmp	r7, r5
 800a1a2:	4416      	add	r6, r2
 800a1a4:	441e      	add	r6, r3
 800a1a6:	463b      	mov	r3, r7
 800a1a8:	bfa8      	it	ge
 800a1aa:	462b      	movge	r3, r5
 800a1ac:	42b3      	cmp	r3, r6
 800a1ae:	bfa8      	it	ge
 800a1b0:	4633      	movge	r3, r6
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	bfc2      	ittt	gt
 800a1b6:	1aed      	subgt	r5, r5, r3
 800a1b8:	1af6      	subgt	r6, r6, r3
 800a1ba:	1aff      	subgt	r7, r7, r3
 800a1bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	dd16      	ble.n	800a1f0 <_strtod_l+0x738>
 800a1c2:	4641      	mov	r1, r8
 800a1c4:	9805      	ldr	r0, [sp, #20]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	f001 fb44 	bl	800b854 <__pow5mult>
 800a1cc:	4680      	mov	r8, r0
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d0ba      	beq.n	800a148 <_strtod_l+0x690>
 800a1d2:	4601      	mov	r1, r0
 800a1d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a1d6:	9805      	ldr	r0, [sp, #20]
 800a1d8:	f001 fa9a 	bl	800b710 <__multiply>
 800a1dc:	900a      	str	r0, [sp, #40]	@ 0x28
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	f43f ae8d 	beq.w	8009efe <_strtod_l+0x446>
 800a1e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1e6:	9805      	ldr	r0, [sp, #20]
 800a1e8:	f001 f97e 	bl	800b4e8 <_Bfree>
 800a1ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1ee:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1f0:	2d00      	cmp	r5, #0
 800a1f2:	dc1d      	bgt.n	800a230 <_strtod_l+0x778>
 800a1f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	dd23      	ble.n	800a242 <_strtod_l+0x78a>
 800a1fa:	4649      	mov	r1, r9
 800a1fc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a1fe:	9805      	ldr	r0, [sp, #20]
 800a200:	f001 fb28 	bl	800b854 <__pow5mult>
 800a204:	4681      	mov	r9, r0
 800a206:	b9e0      	cbnz	r0, 800a242 <_strtod_l+0x78a>
 800a208:	f04f 0900 	mov.w	r9, #0
 800a20c:	e677      	b.n	8009efe <_strtod_l+0x446>
 800a20e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a212:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a216:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a21a:	35e2      	adds	r5, #226	@ 0xe2
 800a21c:	fa01 f305 	lsl.w	r3, r1, r5
 800a220:	9310      	str	r3, [sp, #64]	@ 0x40
 800a222:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a224:	e7ba      	b.n	800a19c <_strtod_l+0x6e4>
 800a226:	2300      	movs	r3, #0
 800a228:	9310      	str	r3, [sp, #64]	@ 0x40
 800a22a:	2301      	movs	r3, #1
 800a22c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a22e:	e7b5      	b.n	800a19c <_strtod_l+0x6e4>
 800a230:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a232:	9805      	ldr	r0, [sp, #20]
 800a234:	462a      	mov	r2, r5
 800a236:	f001 fb67 	bl	800b908 <__lshift>
 800a23a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d1d9      	bne.n	800a1f4 <_strtod_l+0x73c>
 800a240:	e65d      	b.n	8009efe <_strtod_l+0x446>
 800a242:	2e00      	cmp	r6, #0
 800a244:	dd07      	ble.n	800a256 <_strtod_l+0x79e>
 800a246:	4649      	mov	r1, r9
 800a248:	9805      	ldr	r0, [sp, #20]
 800a24a:	4632      	mov	r2, r6
 800a24c:	f001 fb5c 	bl	800b908 <__lshift>
 800a250:	4681      	mov	r9, r0
 800a252:	2800      	cmp	r0, #0
 800a254:	d0d8      	beq.n	800a208 <_strtod_l+0x750>
 800a256:	2f00      	cmp	r7, #0
 800a258:	dd08      	ble.n	800a26c <_strtod_l+0x7b4>
 800a25a:	4641      	mov	r1, r8
 800a25c:	9805      	ldr	r0, [sp, #20]
 800a25e:	463a      	mov	r2, r7
 800a260:	f001 fb52 	bl	800b908 <__lshift>
 800a264:	4680      	mov	r8, r0
 800a266:	2800      	cmp	r0, #0
 800a268:	f43f ae49 	beq.w	8009efe <_strtod_l+0x446>
 800a26c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a26e:	9805      	ldr	r0, [sp, #20]
 800a270:	464a      	mov	r2, r9
 800a272:	f001 fbd1 	bl	800ba18 <__mdiff>
 800a276:	4604      	mov	r4, r0
 800a278:	2800      	cmp	r0, #0
 800a27a:	f43f ae40 	beq.w	8009efe <_strtod_l+0x446>
 800a27e:	68c3      	ldr	r3, [r0, #12]
 800a280:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a282:	2300      	movs	r3, #0
 800a284:	60c3      	str	r3, [r0, #12]
 800a286:	4641      	mov	r1, r8
 800a288:	f001 fbaa 	bl	800b9e0 <__mcmp>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	da45      	bge.n	800a31c <_strtod_l+0x864>
 800a290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a292:	ea53 030a 	orrs.w	r3, r3, sl
 800a296:	d16b      	bne.n	800a370 <_strtod_l+0x8b8>
 800a298:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d167      	bne.n	800a370 <_strtod_l+0x8b8>
 800a2a0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a2a4:	0d1b      	lsrs	r3, r3, #20
 800a2a6:	051b      	lsls	r3, r3, #20
 800a2a8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a2ac:	d960      	bls.n	800a370 <_strtod_l+0x8b8>
 800a2ae:	6963      	ldr	r3, [r4, #20]
 800a2b0:	b913      	cbnz	r3, 800a2b8 <_strtod_l+0x800>
 800a2b2:	6923      	ldr	r3, [r4, #16]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	dd5b      	ble.n	800a370 <_strtod_l+0x8b8>
 800a2b8:	4621      	mov	r1, r4
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	9805      	ldr	r0, [sp, #20]
 800a2be:	f001 fb23 	bl	800b908 <__lshift>
 800a2c2:	4641      	mov	r1, r8
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	f001 fb8b 	bl	800b9e0 <__mcmp>
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	dd50      	ble.n	800a370 <_strtod_l+0x8b8>
 800a2ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a2d2:	9a08      	ldr	r2, [sp, #32]
 800a2d4:	0d1b      	lsrs	r3, r3, #20
 800a2d6:	051b      	lsls	r3, r3, #20
 800a2d8:	2a00      	cmp	r2, #0
 800a2da:	d06a      	beq.n	800a3b2 <_strtod_l+0x8fa>
 800a2dc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a2e0:	d867      	bhi.n	800a3b2 <_strtod_l+0x8fa>
 800a2e2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a2e6:	f67f ae9d 	bls.w	800a024 <_strtod_l+0x56c>
 800a2ea:	4b0a      	ldr	r3, [pc, #40]	@ (800a314 <_strtod_l+0x85c>)
 800a2ec:	4650      	mov	r0, sl
 800a2ee:	4659      	mov	r1, fp
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f7f6 f9a9 	bl	8000648 <__aeabi_dmul>
 800a2f6:	4b08      	ldr	r3, [pc, #32]	@ (800a318 <_strtod_l+0x860>)
 800a2f8:	400b      	ands	r3, r1
 800a2fa:	4682      	mov	sl, r0
 800a2fc:	468b      	mov	fp, r1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f47f ae08 	bne.w	8009f14 <_strtod_l+0x45c>
 800a304:	9a05      	ldr	r2, [sp, #20]
 800a306:	2322      	movs	r3, #34	@ 0x22
 800a308:	6013      	str	r3, [r2, #0]
 800a30a:	e603      	b.n	8009f14 <_strtod_l+0x45c>
 800a30c:	0800cea0 	.word	0x0800cea0
 800a310:	fffffc02 	.word	0xfffffc02
 800a314:	39500000 	.word	0x39500000
 800a318:	7ff00000 	.word	0x7ff00000
 800a31c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a320:	d165      	bne.n	800a3ee <_strtod_l+0x936>
 800a322:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a324:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a328:	b35a      	cbz	r2, 800a382 <_strtod_l+0x8ca>
 800a32a:	4a9f      	ldr	r2, [pc, #636]	@ (800a5a8 <_strtod_l+0xaf0>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d12b      	bne.n	800a388 <_strtod_l+0x8d0>
 800a330:	9b08      	ldr	r3, [sp, #32]
 800a332:	4651      	mov	r1, sl
 800a334:	b303      	cbz	r3, 800a378 <_strtod_l+0x8c0>
 800a336:	4b9d      	ldr	r3, [pc, #628]	@ (800a5ac <_strtod_l+0xaf4>)
 800a338:	465a      	mov	r2, fp
 800a33a:	4013      	ands	r3, r2
 800a33c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a340:	f04f 32ff 	mov.w	r2, #4294967295
 800a344:	d81b      	bhi.n	800a37e <_strtod_l+0x8c6>
 800a346:	0d1b      	lsrs	r3, r3, #20
 800a348:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a34c:	fa02 f303 	lsl.w	r3, r2, r3
 800a350:	4299      	cmp	r1, r3
 800a352:	d119      	bne.n	800a388 <_strtod_l+0x8d0>
 800a354:	4b96      	ldr	r3, [pc, #600]	@ (800a5b0 <_strtod_l+0xaf8>)
 800a356:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a358:	429a      	cmp	r2, r3
 800a35a:	d102      	bne.n	800a362 <_strtod_l+0x8aa>
 800a35c:	3101      	adds	r1, #1
 800a35e:	f43f adce 	beq.w	8009efe <_strtod_l+0x446>
 800a362:	4b92      	ldr	r3, [pc, #584]	@ (800a5ac <_strtod_l+0xaf4>)
 800a364:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a366:	401a      	ands	r2, r3
 800a368:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a36c:	f04f 0a00 	mov.w	sl, #0
 800a370:	9b08      	ldr	r3, [sp, #32]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1b9      	bne.n	800a2ea <_strtod_l+0x832>
 800a376:	e5cd      	b.n	8009f14 <_strtod_l+0x45c>
 800a378:	f04f 33ff 	mov.w	r3, #4294967295
 800a37c:	e7e8      	b.n	800a350 <_strtod_l+0x898>
 800a37e:	4613      	mov	r3, r2
 800a380:	e7e6      	b.n	800a350 <_strtod_l+0x898>
 800a382:	ea53 030a 	orrs.w	r3, r3, sl
 800a386:	d0a2      	beq.n	800a2ce <_strtod_l+0x816>
 800a388:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a38a:	b1db      	cbz	r3, 800a3c4 <_strtod_l+0x90c>
 800a38c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a38e:	4213      	tst	r3, r2
 800a390:	d0ee      	beq.n	800a370 <_strtod_l+0x8b8>
 800a392:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a394:	9a08      	ldr	r2, [sp, #32]
 800a396:	4650      	mov	r0, sl
 800a398:	4659      	mov	r1, fp
 800a39a:	b1bb      	cbz	r3, 800a3cc <_strtod_l+0x914>
 800a39c:	f7ff fb6b 	bl	8009a76 <sulp>
 800a3a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3a4:	ec53 2b10 	vmov	r2, r3, d0
 800a3a8:	f7f5 ff98 	bl	80002dc <__adddf3>
 800a3ac:	4682      	mov	sl, r0
 800a3ae:	468b      	mov	fp, r1
 800a3b0:	e7de      	b.n	800a370 <_strtod_l+0x8b8>
 800a3b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a3b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a3ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a3be:	f04f 3aff 	mov.w	sl, #4294967295
 800a3c2:	e7d5      	b.n	800a370 <_strtod_l+0x8b8>
 800a3c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a3c6:	ea13 0f0a 	tst.w	r3, sl
 800a3ca:	e7e1      	b.n	800a390 <_strtod_l+0x8d8>
 800a3cc:	f7ff fb53 	bl	8009a76 <sulp>
 800a3d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3d4:	ec53 2b10 	vmov	r2, r3, d0
 800a3d8:	f7f5 ff7e 	bl	80002d8 <__aeabi_dsub>
 800a3dc:	2200      	movs	r2, #0
 800a3de:	2300      	movs	r3, #0
 800a3e0:	4682      	mov	sl, r0
 800a3e2:	468b      	mov	fp, r1
 800a3e4:	f7f6 fb98 	bl	8000b18 <__aeabi_dcmpeq>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	d0c1      	beq.n	800a370 <_strtod_l+0x8b8>
 800a3ec:	e61a      	b.n	800a024 <_strtod_l+0x56c>
 800a3ee:	4641      	mov	r1, r8
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	f001 fc6d 	bl	800bcd0 <__ratio>
 800a3f6:	ec57 6b10 	vmov	r6, r7, d0
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a400:	4630      	mov	r0, r6
 800a402:	4639      	mov	r1, r7
 800a404:	f7f6 fb9c 	bl	8000b40 <__aeabi_dcmple>
 800a408:	2800      	cmp	r0, #0
 800a40a:	d06f      	beq.n	800a4ec <_strtod_l+0xa34>
 800a40c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d17a      	bne.n	800a508 <_strtod_l+0xa50>
 800a412:	f1ba 0f00 	cmp.w	sl, #0
 800a416:	d158      	bne.n	800a4ca <_strtod_l+0xa12>
 800a418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a41a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d15a      	bne.n	800a4d8 <_strtod_l+0xa20>
 800a422:	4b64      	ldr	r3, [pc, #400]	@ (800a5b4 <_strtod_l+0xafc>)
 800a424:	2200      	movs	r2, #0
 800a426:	4630      	mov	r0, r6
 800a428:	4639      	mov	r1, r7
 800a42a:	f7f6 fb7f 	bl	8000b2c <__aeabi_dcmplt>
 800a42e:	2800      	cmp	r0, #0
 800a430:	d159      	bne.n	800a4e6 <_strtod_l+0xa2e>
 800a432:	4630      	mov	r0, r6
 800a434:	4639      	mov	r1, r7
 800a436:	4b60      	ldr	r3, [pc, #384]	@ (800a5b8 <_strtod_l+0xb00>)
 800a438:	2200      	movs	r2, #0
 800a43a:	f7f6 f905 	bl	8000648 <__aeabi_dmul>
 800a43e:	4606      	mov	r6, r0
 800a440:	460f      	mov	r7, r1
 800a442:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a446:	9606      	str	r6, [sp, #24]
 800a448:	9307      	str	r3, [sp, #28]
 800a44a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a44e:	4d57      	ldr	r5, [pc, #348]	@ (800a5ac <_strtod_l+0xaf4>)
 800a450:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a456:	401d      	ands	r5, r3
 800a458:	4b58      	ldr	r3, [pc, #352]	@ (800a5bc <_strtod_l+0xb04>)
 800a45a:	429d      	cmp	r5, r3
 800a45c:	f040 80b2 	bne.w	800a5c4 <_strtod_l+0xb0c>
 800a460:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a462:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a466:	ec4b ab10 	vmov	d0, sl, fp
 800a46a:	f001 fb69 	bl	800bb40 <__ulp>
 800a46e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a472:	ec51 0b10 	vmov	r0, r1, d0
 800a476:	f7f6 f8e7 	bl	8000648 <__aeabi_dmul>
 800a47a:	4652      	mov	r2, sl
 800a47c:	465b      	mov	r3, fp
 800a47e:	f7f5 ff2d 	bl	80002dc <__adddf3>
 800a482:	460b      	mov	r3, r1
 800a484:	4949      	ldr	r1, [pc, #292]	@ (800a5ac <_strtod_l+0xaf4>)
 800a486:	4a4e      	ldr	r2, [pc, #312]	@ (800a5c0 <_strtod_l+0xb08>)
 800a488:	4019      	ands	r1, r3
 800a48a:	4291      	cmp	r1, r2
 800a48c:	4682      	mov	sl, r0
 800a48e:	d942      	bls.n	800a516 <_strtod_l+0xa5e>
 800a490:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a492:	4b47      	ldr	r3, [pc, #284]	@ (800a5b0 <_strtod_l+0xaf8>)
 800a494:	429a      	cmp	r2, r3
 800a496:	d103      	bne.n	800a4a0 <_strtod_l+0x9e8>
 800a498:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a49a:	3301      	adds	r3, #1
 800a49c:	f43f ad2f 	beq.w	8009efe <_strtod_l+0x446>
 800a4a0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a5b0 <_strtod_l+0xaf8>
 800a4a4:	f04f 3aff 	mov.w	sl, #4294967295
 800a4a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4aa:	9805      	ldr	r0, [sp, #20]
 800a4ac:	f001 f81c 	bl	800b4e8 <_Bfree>
 800a4b0:	9805      	ldr	r0, [sp, #20]
 800a4b2:	4649      	mov	r1, r9
 800a4b4:	f001 f818 	bl	800b4e8 <_Bfree>
 800a4b8:	9805      	ldr	r0, [sp, #20]
 800a4ba:	4641      	mov	r1, r8
 800a4bc:	f001 f814 	bl	800b4e8 <_Bfree>
 800a4c0:	9805      	ldr	r0, [sp, #20]
 800a4c2:	4621      	mov	r1, r4
 800a4c4:	f001 f810 	bl	800b4e8 <_Bfree>
 800a4c8:	e619      	b.n	800a0fe <_strtod_l+0x646>
 800a4ca:	f1ba 0f01 	cmp.w	sl, #1
 800a4ce:	d103      	bne.n	800a4d8 <_strtod_l+0xa20>
 800a4d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f43f ada6 	beq.w	800a024 <_strtod_l+0x56c>
 800a4d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a588 <_strtod_l+0xad0>
 800a4dc:	4f35      	ldr	r7, [pc, #212]	@ (800a5b4 <_strtod_l+0xafc>)
 800a4de:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a4e2:	2600      	movs	r6, #0
 800a4e4:	e7b1      	b.n	800a44a <_strtod_l+0x992>
 800a4e6:	4f34      	ldr	r7, [pc, #208]	@ (800a5b8 <_strtod_l+0xb00>)
 800a4e8:	2600      	movs	r6, #0
 800a4ea:	e7aa      	b.n	800a442 <_strtod_l+0x98a>
 800a4ec:	4b32      	ldr	r3, [pc, #200]	@ (800a5b8 <_strtod_l+0xb00>)
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	4639      	mov	r1, r7
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f7f6 f8a8 	bl	8000648 <__aeabi_dmul>
 800a4f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	460f      	mov	r7, r1
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d09f      	beq.n	800a442 <_strtod_l+0x98a>
 800a502:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a506:	e7a0      	b.n	800a44a <_strtod_l+0x992>
 800a508:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a590 <_strtod_l+0xad8>
 800a50c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a510:	ec57 6b17 	vmov	r6, r7, d7
 800a514:	e799      	b.n	800a44a <_strtod_l+0x992>
 800a516:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a51a:	9b08      	ldr	r3, [sp, #32]
 800a51c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a520:	2b00      	cmp	r3, #0
 800a522:	d1c1      	bne.n	800a4a8 <_strtod_l+0x9f0>
 800a524:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a528:	0d1b      	lsrs	r3, r3, #20
 800a52a:	051b      	lsls	r3, r3, #20
 800a52c:	429d      	cmp	r5, r3
 800a52e:	d1bb      	bne.n	800a4a8 <_strtod_l+0x9f0>
 800a530:	4630      	mov	r0, r6
 800a532:	4639      	mov	r1, r7
 800a534:	f7f6 fbaa 	bl	8000c8c <__aeabi_d2lz>
 800a538:	f7f6 f858 	bl	80005ec <__aeabi_l2d>
 800a53c:	4602      	mov	r2, r0
 800a53e:	460b      	mov	r3, r1
 800a540:	4630      	mov	r0, r6
 800a542:	4639      	mov	r1, r7
 800a544:	f7f5 fec8 	bl	80002d8 <__aeabi_dsub>
 800a548:	460b      	mov	r3, r1
 800a54a:	4602      	mov	r2, r0
 800a54c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a550:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a556:	ea46 060a 	orr.w	r6, r6, sl
 800a55a:	431e      	orrs	r6, r3
 800a55c:	d06f      	beq.n	800a63e <_strtod_l+0xb86>
 800a55e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a598 <_strtod_l+0xae0>)
 800a560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a564:	f7f6 fae2 	bl	8000b2c <__aeabi_dcmplt>
 800a568:	2800      	cmp	r0, #0
 800a56a:	f47f acd3 	bne.w	8009f14 <_strtod_l+0x45c>
 800a56e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a5a0 <_strtod_l+0xae8>)
 800a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a574:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a578:	f7f6 faf6 	bl	8000b68 <__aeabi_dcmpgt>
 800a57c:	2800      	cmp	r0, #0
 800a57e:	d093      	beq.n	800a4a8 <_strtod_l+0x9f0>
 800a580:	e4c8      	b.n	8009f14 <_strtod_l+0x45c>
 800a582:	bf00      	nop
 800a584:	f3af 8000 	nop.w
 800a588:	00000000 	.word	0x00000000
 800a58c:	bff00000 	.word	0xbff00000
 800a590:	00000000 	.word	0x00000000
 800a594:	3ff00000 	.word	0x3ff00000
 800a598:	94a03595 	.word	0x94a03595
 800a59c:	3fdfffff 	.word	0x3fdfffff
 800a5a0:	35afe535 	.word	0x35afe535
 800a5a4:	3fe00000 	.word	0x3fe00000
 800a5a8:	000fffff 	.word	0x000fffff
 800a5ac:	7ff00000 	.word	0x7ff00000
 800a5b0:	7fefffff 	.word	0x7fefffff
 800a5b4:	3ff00000 	.word	0x3ff00000
 800a5b8:	3fe00000 	.word	0x3fe00000
 800a5bc:	7fe00000 	.word	0x7fe00000
 800a5c0:	7c9fffff 	.word	0x7c9fffff
 800a5c4:	9b08      	ldr	r3, [sp, #32]
 800a5c6:	b323      	cbz	r3, 800a612 <_strtod_l+0xb5a>
 800a5c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a5cc:	d821      	bhi.n	800a612 <_strtod_l+0xb5a>
 800a5ce:	a328      	add	r3, pc, #160	@ (adr r3, 800a670 <_strtod_l+0xbb8>)
 800a5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	4639      	mov	r1, r7
 800a5d8:	f7f6 fab2 	bl	8000b40 <__aeabi_dcmple>
 800a5dc:	b1a0      	cbz	r0, 800a608 <_strtod_l+0xb50>
 800a5de:	4639      	mov	r1, r7
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f7f6 facb 	bl	8000b7c <__aeabi_d2uiz>
 800a5e6:	2801      	cmp	r0, #1
 800a5e8:	bf38      	it	cc
 800a5ea:	2001      	movcc	r0, #1
 800a5ec:	f7f5 ffb2 	bl	8000554 <__aeabi_ui2d>
 800a5f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	460f      	mov	r7, r1
 800a5f6:	b9fb      	cbnz	r3, 800a638 <_strtod_l+0xb80>
 800a5f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a5fc:	9014      	str	r0, [sp, #80]	@ 0x50
 800a5fe:	9315      	str	r3, [sp, #84]	@ 0x54
 800a600:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a604:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a608:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a60a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a60e:	1b5b      	subs	r3, r3, r5
 800a610:	9311      	str	r3, [sp, #68]	@ 0x44
 800a612:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a616:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a61a:	f001 fa91 	bl	800bb40 <__ulp>
 800a61e:	4650      	mov	r0, sl
 800a620:	ec53 2b10 	vmov	r2, r3, d0
 800a624:	4659      	mov	r1, fp
 800a626:	f7f6 f80f 	bl	8000648 <__aeabi_dmul>
 800a62a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a62e:	f7f5 fe55 	bl	80002dc <__adddf3>
 800a632:	4682      	mov	sl, r0
 800a634:	468b      	mov	fp, r1
 800a636:	e770      	b.n	800a51a <_strtod_l+0xa62>
 800a638:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a63c:	e7e0      	b.n	800a600 <_strtod_l+0xb48>
 800a63e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a678 <_strtod_l+0xbc0>)
 800a640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a644:	f7f6 fa72 	bl	8000b2c <__aeabi_dcmplt>
 800a648:	e798      	b.n	800a57c <_strtod_l+0xac4>
 800a64a:	2300      	movs	r3, #0
 800a64c:	930e      	str	r3, [sp, #56]	@ 0x38
 800a64e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a650:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a652:	6013      	str	r3, [r2, #0]
 800a654:	f7ff ba6d 	b.w	8009b32 <_strtod_l+0x7a>
 800a658:	2a65      	cmp	r2, #101	@ 0x65
 800a65a:	f43f ab68 	beq.w	8009d2e <_strtod_l+0x276>
 800a65e:	2a45      	cmp	r2, #69	@ 0x45
 800a660:	f43f ab65 	beq.w	8009d2e <_strtod_l+0x276>
 800a664:	2301      	movs	r3, #1
 800a666:	f7ff bba0 	b.w	8009daa <_strtod_l+0x2f2>
 800a66a:	bf00      	nop
 800a66c:	f3af 8000 	nop.w
 800a670:	ffc00000 	.word	0xffc00000
 800a674:	41dfffff 	.word	0x41dfffff
 800a678:	94a03595 	.word	0x94a03595
 800a67c:	3fcfffff 	.word	0x3fcfffff

0800a680 <strtod>:
 800a680:	460a      	mov	r2, r1
 800a682:	4601      	mov	r1, r0
 800a684:	4802      	ldr	r0, [pc, #8]	@ (800a690 <strtod+0x10>)
 800a686:	4b03      	ldr	r3, [pc, #12]	@ (800a694 <strtod+0x14>)
 800a688:	6800      	ldr	r0, [r0, #0]
 800a68a:	f7ff ba15 	b.w	8009ab8 <_strtod_l>
 800a68e:	bf00      	nop
 800a690:	200001d8 	.word	0x200001d8
 800a694:	2000006c 	.word	0x2000006c

0800a698 <_strtol_l.isra.0>:
 800a698:	2b24      	cmp	r3, #36	@ 0x24
 800a69a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a69e:	4686      	mov	lr, r0
 800a6a0:	4690      	mov	r8, r2
 800a6a2:	d801      	bhi.n	800a6a8 <_strtol_l.isra.0+0x10>
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d106      	bne.n	800a6b6 <_strtol_l.isra.0+0x1e>
 800a6a8:	f000 fa54 	bl	800ab54 <__errno>
 800a6ac:	2316      	movs	r3, #22
 800a6ae:	6003      	str	r3, [r0, #0]
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b6:	4834      	ldr	r0, [pc, #208]	@ (800a788 <_strtol_l.isra.0+0xf0>)
 800a6b8:	460d      	mov	r5, r1
 800a6ba:	462a      	mov	r2, r5
 800a6bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6c0:	5d06      	ldrb	r6, [r0, r4]
 800a6c2:	f016 0608 	ands.w	r6, r6, #8
 800a6c6:	d1f8      	bne.n	800a6ba <_strtol_l.isra.0+0x22>
 800a6c8:	2c2d      	cmp	r4, #45	@ 0x2d
 800a6ca:	d110      	bne.n	800a6ee <_strtol_l.isra.0+0x56>
 800a6cc:	782c      	ldrb	r4, [r5, #0]
 800a6ce:	2601      	movs	r6, #1
 800a6d0:	1c95      	adds	r5, r2, #2
 800a6d2:	f033 0210 	bics.w	r2, r3, #16
 800a6d6:	d115      	bne.n	800a704 <_strtol_l.isra.0+0x6c>
 800a6d8:	2c30      	cmp	r4, #48	@ 0x30
 800a6da:	d10d      	bne.n	800a6f8 <_strtol_l.isra.0+0x60>
 800a6dc:	782a      	ldrb	r2, [r5, #0]
 800a6de:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a6e2:	2a58      	cmp	r2, #88	@ 0x58
 800a6e4:	d108      	bne.n	800a6f8 <_strtol_l.isra.0+0x60>
 800a6e6:	786c      	ldrb	r4, [r5, #1]
 800a6e8:	3502      	adds	r5, #2
 800a6ea:	2310      	movs	r3, #16
 800a6ec:	e00a      	b.n	800a704 <_strtol_l.isra.0+0x6c>
 800a6ee:	2c2b      	cmp	r4, #43	@ 0x2b
 800a6f0:	bf04      	itt	eq
 800a6f2:	782c      	ldrbeq	r4, [r5, #0]
 800a6f4:	1c95      	addeq	r5, r2, #2
 800a6f6:	e7ec      	b.n	800a6d2 <_strtol_l.isra.0+0x3a>
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1f6      	bne.n	800a6ea <_strtol_l.isra.0+0x52>
 800a6fc:	2c30      	cmp	r4, #48	@ 0x30
 800a6fe:	bf14      	ite	ne
 800a700:	230a      	movne	r3, #10
 800a702:	2308      	moveq	r3, #8
 800a704:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a708:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a70c:	2200      	movs	r2, #0
 800a70e:	fbbc f9f3 	udiv	r9, ip, r3
 800a712:	4610      	mov	r0, r2
 800a714:	fb03 ca19 	mls	sl, r3, r9, ip
 800a718:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a71c:	2f09      	cmp	r7, #9
 800a71e:	d80f      	bhi.n	800a740 <_strtol_l.isra.0+0xa8>
 800a720:	463c      	mov	r4, r7
 800a722:	42a3      	cmp	r3, r4
 800a724:	dd1b      	ble.n	800a75e <_strtol_l.isra.0+0xc6>
 800a726:	1c57      	adds	r7, r2, #1
 800a728:	d007      	beq.n	800a73a <_strtol_l.isra.0+0xa2>
 800a72a:	4581      	cmp	r9, r0
 800a72c:	d314      	bcc.n	800a758 <_strtol_l.isra.0+0xc0>
 800a72e:	d101      	bne.n	800a734 <_strtol_l.isra.0+0x9c>
 800a730:	45a2      	cmp	sl, r4
 800a732:	db11      	blt.n	800a758 <_strtol_l.isra.0+0xc0>
 800a734:	fb00 4003 	mla	r0, r0, r3, r4
 800a738:	2201      	movs	r2, #1
 800a73a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a73e:	e7eb      	b.n	800a718 <_strtol_l.isra.0+0x80>
 800a740:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a744:	2f19      	cmp	r7, #25
 800a746:	d801      	bhi.n	800a74c <_strtol_l.isra.0+0xb4>
 800a748:	3c37      	subs	r4, #55	@ 0x37
 800a74a:	e7ea      	b.n	800a722 <_strtol_l.isra.0+0x8a>
 800a74c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a750:	2f19      	cmp	r7, #25
 800a752:	d804      	bhi.n	800a75e <_strtol_l.isra.0+0xc6>
 800a754:	3c57      	subs	r4, #87	@ 0x57
 800a756:	e7e4      	b.n	800a722 <_strtol_l.isra.0+0x8a>
 800a758:	f04f 32ff 	mov.w	r2, #4294967295
 800a75c:	e7ed      	b.n	800a73a <_strtol_l.isra.0+0xa2>
 800a75e:	1c53      	adds	r3, r2, #1
 800a760:	d108      	bne.n	800a774 <_strtol_l.isra.0+0xdc>
 800a762:	2322      	movs	r3, #34	@ 0x22
 800a764:	f8ce 3000 	str.w	r3, [lr]
 800a768:	4660      	mov	r0, ip
 800a76a:	f1b8 0f00 	cmp.w	r8, #0
 800a76e:	d0a0      	beq.n	800a6b2 <_strtol_l.isra.0+0x1a>
 800a770:	1e69      	subs	r1, r5, #1
 800a772:	e006      	b.n	800a782 <_strtol_l.isra.0+0xea>
 800a774:	b106      	cbz	r6, 800a778 <_strtol_l.isra.0+0xe0>
 800a776:	4240      	negs	r0, r0
 800a778:	f1b8 0f00 	cmp.w	r8, #0
 800a77c:	d099      	beq.n	800a6b2 <_strtol_l.isra.0+0x1a>
 800a77e:	2a00      	cmp	r2, #0
 800a780:	d1f6      	bne.n	800a770 <_strtol_l.isra.0+0xd8>
 800a782:	f8c8 1000 	str.w	r1, [r8]
 800a786:	e794      	b.n	800a6b2 <_strtol_l.isra.0+0x1a>
 800a788:	0800cec9 	.word	0x0800cec9

0800a78c <strtol>:
 800a78c:	4613      	mov	r3, r2
 800a78e:	460a      	mov	r2, r1
 800a790:	4601      	mov	r1, r0
 800a792:	4802      	ldr	r0, [pc, #8]	@ (800a79c <strtol+0x10>)
 800a794:	6800      	ldr	r0, [r0, #0]
 800a796:	f7ff bf7f 	b.w	800a698 <_strtol_l.isra.0>
 800a79a:	bf00      	nop
 800a79c:	200001d8 	.word	0x200001d8

0800a7a0 <std>:
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	b510      	push	{r4, lr}
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	e9c0 3300 	strd	r3, r3, [r0]
 800a7aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7ae:	6083      	str	r3, [r0, #8]
 800a7b0:	8181      	strh	r1, [r0, #12]
 800a7b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a7b4:	81c2      	strh	r2, [r0, #14]
 800a7b6:	6183      	str	r3, [r0, #24]
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	2208      	movs	r2, #8
 800a7bc:	305c      	adds	r0, #92	@ 0x5c
 800a7be:	f000 f92a 	bl	800aa16 <memset>
 800a7c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f8 <std+0x58>)
 800a7c4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a7c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a7fc <std+0x5c>)
 800a7c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a7ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a800 <std+0x60>)
 800a7cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a7ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a804 <std+0x64>)
 800a7d0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a808 <std+0x68>)
 800a7d4:	6224      	str	r4, [r4, #32]
 800a7d6:	429c      	cmp	r4, r3
 800a7d8:	d006      	beq.n	800a7e8 <std+0x48>
 800a7da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a7de:	4294      	cmp	r4, r2
 800a7e0:	d002      	beq.n	800a7e8 <std+0x48>
 800a7e2:	33d0      	adds	r3, #208	@ 0xd0
 800a7e4:	429c      	cmp	r4, r3
 800a7e6:	d105      	bne.n	800a7f4 <std+0x54>
 800a7e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7f0:	f000 b9da 	b.w	800aba8 <__retarget_lock_init_recursive>
 800a7f4:	bd10      	pop	{r4, pc}
 800a7f6:	bf00      	nop
 800a7f8:	0800a991 	.word	0x0800a991
 800a7fc:	0800a9b3 	.word	0x0800a9b3
 800a800:	0800a9eb 	.word	0x0800a9eb
 800a804:	0800aa0f 	.word	0x0800aa0f
 800a808:	20005248 	.word	0x20005248

0800a80c <stdio_exit_handler>:
 800a80c:	4a02      	ldr	r2, [pc, #8]	@ (800a818 <stdio_exit_handler+0xc>)
 800a80e:	4903      	ldr	r1, [pc, #12]	@ (800a81c <stdio_exit_handler+0x10>)
 800a810:	4803      	ldr	r0, [pc, #12]	@ (800a820 <stdio_exit_handler+0x14>)
 800a812:	f000 b869 	b.w	800a8e8 <_fwalk_sglue>
 800a816:	bf00      	nop
 800a818:	20000060 	.word	0x20000060
 800a81c:	0800c4a5 	.word	0x0800c4a5
 800a820:	200001dc 	.word	0x200001dc

0800a824 <cleanup_stdio>:
 800a824:	6841      	ldr	r1, [r0, #4]
 800a826:	4b0c      	ldr	r3, [pc, #48]	@ (800a858 <cleanup_stdio+0x34>)
 800a828:	4299      	cmp	r1, r3
 800a82a:	b510      	push	{r4, lr}
 800a82c:	4604      	mov	r4, r0
 800a82e:	d001      	beq.n	800a834 <cleanup_stdio+0x10>
 800a830:	f001 fe38 	bl	800c4a4 <_fflush_r>
 800a834:	68a1      	ldr	r1, [r4, #8]
 800a836:	4b09      	ldr	r3, [pc, #36]	@ (800a85c <cleanup_stdio+0x38>)
 800a838:	4299      	cmp	r1, r3
 800a83a:	d002      	beq.n	800a842 <cleanup_stdio+0x1e>
 800a83c:	4620      	mov	r0, r4
 800a83e:	f001 fe31 	bl	800c4a4 <_fflush_r>
 800a842:	68e1      	ldr	r1, [r4, #12]
 800a844:	4b06      	ldr	r3, [pc, #24]	@ (800a860 <cleanup_stdio+0x3c>)
 800a846:	4299      	cmp	r1, r3
 800a848:	d004      	beq.n	800a854 <cleanup_stdio+0x30>
 800a84a:	4620      	mov	r0, r4
 800a84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a850:	f001 be28 	b.w	800c4a4 <_fflush_r>
 800a854:	bd10      	pop	{r4, pc}
 800a856:	bf00      	nop
 800a858:	20005248 	.word	0x20005248
 800a85c:	200052b0 	.word	0x200052b0
 800a860:	20005318 	.word	0x20005318

0800a864 <global_stdio_init.part.0>:
 800a864:	b510      	push	{r4, lr}
 800a866:	4b0b      	ldr	r3, [pc, #44]	@ (800a894 <global_stdio_init.part.0+0x30>)
 800a868:	4c0b      	ldr	r4, [pc, #44]	@ (800a898 <global_stdio_init.part.0+0x34>)
 800a86a:	4a0c      	ldr	r2, [pc, #48]	@ (800a89c <global_stdio_init.part.0+0x38>)
 800a86c:	601a      	str	r2, [r3, #0]
 800a86e:	4620      	mov	r0, r4
 800a870:	2200      	movs	r2, #0
 800a872:	2104      	movs	r1, #4
 800a874:	f7ff ff94 	bl	800a7a0 <std>
 800a878:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a87c:	2201      	movs	r2, #1
 800a87e:	2109      	movs	r1, #9
 800a880:	f7ff ff8e 	bl	800a7a0 <std>
 800a884:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a888:	2202      	movs	r2, #2
 800a88a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a88e:	2112      	movs	r1, #18
 800a890:	f7ff bf86 	b.w	800a7a0 <std>
 800a894:	20005380 	.word	0x20005380
 800a898:	20005248 	.word	0x20005248
 800a89c:	0800a80d 	.word	0x0800a80d

0800a8a0 <__sfp_lock_acquire>:
 800a8a0:	4801      	ldr	r0, [pc, #4]	@ (800a8a8 <__sfp_lock_acquire+0x8>)
 800a8a2:	f000 b982 	b.w	800abaa <__retarget_lock_acquire_recursive>
 800a8a6:	bf00      	nop
 800a8a8:	20005389 	.word	0x20005389

0800a8ac <__sfp_lock_release>:
 800a8ac:	4801      	ldr	r0, [pc, #4]	@ (800a8b4 <__sfp_lock_release+0x8>)
 800a8ae:	f000 b97d 	b.w	800abac <__retarget_lock_release_recursive>
 800a8b2:	bf00      	nop
 800a8b4:	20005389 	.word	0x20005389

0800a8b8 <__sinit>:
 800a8b8:	b510      	push	{r4, lr}
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	f7ff fff0 	bl	800a8a0 <__sfp_lock_acquire>
 800a8c0:	6a23      	ldr	r3, [r4, #32]
 800a8c2:	b11b      	cbz	r3, 800a8cc <__sinit+0x14>
 800a8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8c8:	f7ff bff0 	b.w	800a8ac <__sfp_lock_release>
 800a8cc:	4b04      	ldr	r3, [pc, #16]	@ (800a8e0 <__sinit+0x28>)
 800a8ce:	6223      	str	r3, [r4, #32]
 800a8d0:	4b04      	ldr	r3, [pc, #16]	@ (800a8e4 <__sinit+0x2c>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1f5      	bne.n	800a8c4 <__sinit+0xc>
 800a8d8:	f7ff ffc4 	bl	800a864 <global_stdio_init.part.0>
 800a8dc:	e7f2      	b.n	800a8c4 <__sinit+0xc>
 800a8de:	bf00      	nop
 800a8e0:	0800a825 	.word	0x0800a825
 800a8e4:	20005380 	.word	0x20005380

0800a8e8 <_fwalk_sglue>:
 800a8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8ec:	4607      	mov	r7, r0
 800a8ee:	4688      	mov	r8, r1
 800a8f0:	4614      	mov	r4, r2
 800a8f2:	2600      	movs	r6, #0
 800a8f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8f8:	f1b9 0901 	subs.w	r9, r9, #1
 800a8fc:	d505      	bpl.n	800a90a <_fwalk_sglue+0x22>
 800a8fe:	6824      	ldr	r4, [r4, #0]
 800a900:	2c00      	cmp	r4, #0
 800a902:	d1f7      	bne.n	800a8f4 <_fwalk_sglue+0xc>
 800a904:	4630      	mov	r0, r6
 800a906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a90a:	89ab      	ldrh	r3, [r5, #12]
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d907      	bls.n	800a920 <_fwalk_sglue+0x38>
 800a910:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a914:	3301      	adds	r3, #1
 800a916:	d003      	beq.n	800a920 <_fwalk_sglue+0x38>
 800a918:	4629      	mov	r1, r5
 800a91a:	4638      	mov	r0, r7
 800a91c:	47c0      	blx	r8
 800a91e:	4306      	orrs	r6, r0
 800a920:	3568      	adds	r5, #104	@ 0x68
 800a922:	e7e9      	b.n	800a8f8 <_fwalk_sglue+0x10>

0800a924 <sniprintf>:
 800a924:	b40c      	push	{r2, r3}
 800a926:	b530      	push	{r4, r5, lr}
 800a928:	4b18      	ldr	r3, [pc, #96]	@ (800a98c <sniprintf+0x68>)
 800a92a:	1e0c      	subs	r4, r1, #0
 800a92c:	681d      	ldr	r5, [r3, #0]
 800a92e:	b09d      	sub	sp, #116	@ 0x74
 800a930:	da08      	bge.n	800a944 <sniprintf+0x20>
 800a932:	238b      	movs	r3, #139	@ 0x8b
 800a934:	602b      	str	r3, [r5, #0]
 800a936:	f04f 30ff 	mov.w	r0, #4294967295
 800a93a:	b01d      	add	sp, #116	@ 0x74
 800a93c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a940:	b002      	add	sp, #8
 800a942:	4770      	bx	lr
 800a944:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a948:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a94c:	f04f 0300 	mov.w	r3, #0
 800a950:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a952:	bf14      	ite	ne
 800a954:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a958:	4623      	moveq	r3, r4
 800a95a:	9304      	str	r3, [sp, #16]
 800a95c:	9307      	str	r3, [sp, #28]
 800a95e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a962:	9002      	str	r0, [sp, #8]
 800a964:	9006      	str	r0, [sp, #24]
 800a966:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a96a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a96c:	ab21      	add	r3, sp, #132	@ 0x84
 800a96e:	a902      	add	r1, sp, #8
 800a970:	4628      	mov	r0, r5
 800a972:	9301      	str	r3, [sp, #4]
 800a974:	f001 fa8a 	bl	800be8c <_svfiprintf_r>
 800a978:	1c43      	adds	r3, r0, #1
 800a97a:	bfbc      	itt	lt
 800a97c:	238b      	movlt	r3, #139	@ 0x8b
 800a97e:	602b      	strlt	r3, [r5, #0]
 800a980:	2c00      	cmp	r4, #0
 800a982:	d0da      	beq.n	800a93a <sniprintf+0x16>
 800a984:	9b02      	ldr	r3, [sp, #8]
 800a986:	2200      	movs	r2, #0
 800a988:	701a      	strb	r2, [r3, #0]
 800a98a:	e7d6      	b.n	800a93a <sniprintf+0x16>
 800a98c:	200001d8 	.word	0x200001d8

0800a990 <__sread>:
 800a990:	b510      	push	{r4, lr}
 800a992:	460c      	mov	r4, r1
 800a994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a998:	f000 f8b8 	bl	800ab0c <_read_r>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	bfab      	itete	ge
 800a9a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a9a2:	89a3      	ldrhlt	r3, [r4, #12]
 800a9a4:	181b      	addge	r3, r3, r0
 800a9a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a9aa:	bfac      	ite	ge
 800a9ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a9ae:	81a3      	strhlt	r3, [r4, #12]
 800a9b0:	bd10      	pop	{r4, pc}

0800a9b2 <__swrite>:
 800a9b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b6:	461f      	mov	r7, r3
 800a9b8:	898b      	ldrh	r3, [r1, #12]
 800a9ba:	05db      	lsls	r3, r3, #23
 800a9bc:	4605      	mov	r5, r0
 800a9be:	460c      	mov	r4, r1
 800a9c0:	4616      	mov	r6, r2
 800a9c2:	d505      	bpl.n	800a9d0 <__swrite+0x1e>
 800a9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f000 f88c 	bl	800aae8 <_lseek_r>
 800a9d0:	89a3      	ldrh	r3, [r4, #12]
 800a9d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9da:	81a3      	strh	r3, [r4, #12]
 800a9dc:	4632      	mov	r2, r6
 800a9de:	463b      	mov	r3, r7
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e6:	f000 b8a3 	b.w	800ab30 <_write_r>

0800a9ea <__sseek>:
 800a9ea:	b510      	push	{r4, lr}
 800a9ec:	460c      	mov	r4, r1
 800a9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f2:	f000 f879 	bl	800aae8 <_lseek_r>
 800a9f6:	1c43      	adds	r3, r0, #1
 800a9f8:	89a3      	ldrh	r3, [r4, #12]
 800a9fa:	bf15      	itete	ne
 800a9fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a9fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aa02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aa06:	81a3      	strheq	r3, [r4, #12]
 800aa08:	bf18      	it	ne
 800aa0a:	81a3      	strhne	r3, [r4, #12]
 800aa0c:	bd10      	pop	{r4, pc}

0800aa0e <__sclose>:
 800aa0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa12:	f000 b859 	b.w	800aac8 <_close_r>

0800aa16 <memset>:
 800aa16:	4402      	add	r2, r0
 800aa18:	4603      	mov	r3, r0
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d100      	bne.n	800aa20 <memset+0xa>
 800aa1e:	4770      	bx	lr
 800aa20:	f803 1b01 	strb.w	r1, [r3], #1
 800aa24:	e7f9      	b.n	800aa1a <memset+0x4>

0800aa26 <strncmp>:
 800aa26:	b510      	push	{r4, lr}
 800aa28:	b16a      	cbz	r2, 800aa46 <strncmp+0x20>
 800aa2a:	3901      	subs	r1, #1
 800aa2c:	1884      	adds	r4, r0, r2
 800aa2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa32:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d103      	bne.n	800aa42 <strncmp+0x1c>
 800aa3a:	42a0      	cmp	r0, r4
 800aa3c:	d001      	beq.n	800aa42 <strncmp+0x1c>
 800aa3e:	2a00      	cmp	r2, #0
 800aa40:	d1f5      	bne.n	800aa2e <strncmp+0x8>
 800aa42:	1ad0      	subs	r0, r2, r3
 800aa44:	bd10      	pop	{r4, pc}
 800aa46:	4610      	mov	r0, r2
 800aa48:	e7fc      	b.n	800aa44 <strncmp+0x1e>

0800aa4a <strncpy>:
 800aa4a:	b510      	push	{r4, lr}
 800aa4c:	3901      	subs	r1, #1
 800aa4e:	4603      	mov	r3, r0
 800aa50:	b132      	cbz	r2, 800aa60 <strncpy+0x16>
 800aa52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800aa56:	f803 4b01 	strb.w	r4, [r3], #1
 800aa5a:	3a01      	subs	r2, #1
 800aa5c:	2c00      	cmp	r4, #0
 800aa5e:	d1f7      	bne.n	800aa50 <strncpy+0x6>
 800aa60:	441a      	add	r2, r3
 800aa62:	2100      	movs	r1, #0
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d100      	bne.n	800aa6a <strncpy+0x20>
 800aa68:	bd10      	pop	{r4, pc}
 800aa6a:	f803 1b01 	strb.w	r1, [r3], #1
 800aa6e:	e7f9      	b.n	800aa64 <strncpy+0x1a>

0800aa70 <__strtok_r>:
 800aa70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa72:	4604      	mov	r4, r0
 800aa74:	b908      	cbnz	r0, 800aa7a <__strtok_r+0xa>
 800aa76:	6814      	ldr	r4, [r2, #0]
 800aa78:	b144      	cbz	r4, 800aa8c <__strtok_r+0x1c>
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800aa80:	460f      	mov	r7, r1
 800aa82:	f817 6b01 	ldrb.w	r6, [r7], #1
 800aa86:	b91e      	cbnz	r6, 800aa90 <__strtok_r+0x20>
 800aa88:	b965      	cbnz	r5, 800aaa4 <__strtok_r+0x34>
 800aa8a:	6015      	str	r5, [r2, #0]
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	e005      	b.n	800aa9c <__strtok_r+0x2c>
 800aa90:	42b5      	cmp	r5, r6
 800aa92:	d1f6      	bne.n	800aa82 <__strtok_r+0x12>
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d1f0      	bne.n	800aa7a <__strtok_r+0xa>
 800aa98:	6014      	str	r4, [r2, #0]
 800aa9a:	7003      	strb	r3, [r0, #0]
 800aa9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa9e:	461c      	mov	r4, r3
 800aaa0:	e00c      	b.n	800aabc <__strtok_r+0x4c>
 800aaa2:	b91d      	cbnz	r5, 800aaac <__strtok_r+0x3c>
 800aaa4:	4627      	mov	r7, r4
 800aaa6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aaaa:	460e      	mov	r6, r1
 800aaac:	f816 5b01 	ldrb.w	r5, [r6], #1
 800aab0:	42ab      	cmp	r3, r5
 800aab2:	d1f6      	bne.n	800aaa2 <__strtok_r+0x32>
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d0f2      	beq.n	800aa9e <__strtok_r+0x2e>
 800aab8:	2300      	movs	r3, #0
 800aaba:	703b      	strb	r3, [r7, #0]
 800aabc:	6014      	str	r4, [r2, #0]
 800aabe:	e7ed      	b.n	800aa9c <__strtok_r+0x2c>

0800aac0 <strtok_r>:
 800aac0:	2301      	movs	r3, #1
 800aac2:	f7ff bfd5 	b.w	800aa70 <__strtok_r>
	...

0800aac8 <_close_r>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	4d06      	ldr	r5, [pc, #24]	@ (800aae4 <_close_r+0x1c>)
 800aacc:	2300      	movs	r3, #0
 800aace:	4604      	mov	r4, r0
 800aad0:	4608      	mov	r0, r1
 800aad2:	602b      	str	r3, [r5, #0]
 800aad4:	f7f7 fcd4 	bl	8002480 <_close>
 800aad8:	1c43      	adds	r3, r0, #1
 800aada:	d102      	bne.n	800aae2 <_close_r+0x1a>
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	b103      	cbz	r3, 800aae2 <_close_r+0x1a>
 800aae0:	6023      	str	r3, [r4, #0]
 800aae2:	bd38      	pop	{r3, r4, r5, pc}
 800aae4:	20005384 	.word	0x20005384

0800aae8 <_lseek_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	4d07      	ldr	r5, [pc, #28]	@ (800ab08 <_lseek_r+0x20>)
 800aaec:	4604      	mov	r4, r0
 800aaee:	4608      	mov	r0, r1
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	602a      	str	r2, [r5, #0]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	f7f7 fce9 	bl	80024ce <_lseek>
 800aafc:	1c43      	adds	r3, r0, #1
 800aafe:	d102      	bne.n	800ab06 <_lseek_r+0x1e>
 800ab00:	682b      	ldr	r3, [r5, #0]
 800ab02:	b103      	cbz	r3, 800ab06 <_lseek_r+0x1e>
 800ab04:	6023      	str	r3, [r4, #0]
 800ab06:	bd38      	pop	{r3, r4, r5, pc}
 800ab08:	20005384 	.word	0x20005384

0800ab0c <_read_r>:
 800ab0c:	b538      	push	{r3, r4, r5, lr}
 800ab0e:	4d07      	ldr	r5, [pc, #28]	@ (800ab2c <_read_r+0x20>)
 800ab10:	4604      	mov	r4, r0
 800ab12:	4608      	mov	r0, r1
 800ab14:	4611      	mov	r1, r2
 800ab16:	2200      	movs	r2, #0
 800ab18:	602a      	str	r2, [r5, #0]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	f7f7 fc77 	bl	800240e <_read>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d102      	bne.n	800ab2a <_read_r+0x1e>
 800ab24:	682b      	ldr	r3, [r5, #0]
 800ab26:	b103      	cbz	r3, 800ab2a <_read_r+0x1e>
 800ab28:	6023      	str	r3, [r4, #0]
 800ab2a:	bd38      	pop	{r3, r4, r5, pc}
 800ab2c:	20005384 	.word	0x20005384

0800ab30 <_write_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4d07      	ldr	r5, [pc, #28]	@ (800ab50 <_write_r+0x20>)
 800ab34:	4604      	mov	r4, r0
 800ab36:	4608      	mov	r0, r1
 800ab38:	4611      	mov	r1, r2
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	602a      	str	r2, [r5, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	f7f7 fc82 	bl	8002448 <_write>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d102      	bne.n	800ab4e <_write_r+0x1e>
 800ab48:	682b      	ldr	r3, [r5, #0]
 800ab4a:	b103      	cbz	r3, 800ab4e <_write_r+0x1e>
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	20005384 	.word	0x20005384

0800ab54 <__errno>:
 800ab54:	4b01      	ldr	r3, [pc, #4]	@ (800ab5c <__errno+0x8>)
 800ab56:	6818      	ldr	r0, [r3, #0]
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	200001d8 	.word	0x200001d8

0800ab60 <__libc_init_array>:
 800ab60:	b570      	push	{r4, r5, r6, lr}
 800ab62:	4d0d      	ldr	r5, [pc, #52]	@ (800ab98 <__libc_init_array+0x38>)
 800ab64:	4c0d      	ldr	r4, [pc, #52]	@ (800ab9c <__libc_init_array+0x3c>)
 800ab66:	1b64      	subs	r4, r4, r5
 800ab68:	10a4      	asrs	r4, r4, #2
 800ab6a:	2600      	movs	r6, #0
 800ab6c:	42a6      	cmp	r6, r4
 800ab6e:	d109      	bne.n	800ab84 <__libc_init_array+0x24>
 800ab70:	4d0b      	ldr	r5, [pc, #44]	@ (800aba0 <__libc_init_array+0x40>)
 800ab72:	4c0c      	ldr	r4, [pc, #48]	@ (800aba4 <__libc_init_array+0x44>)
 800ab74:	f002 f80e 	bl	800cb94 <_init>
 800ab78:	1b64      	subs	r4, r4, r5
 800ab7a:	10a4      	asrs	r4, r4, #2
 800ab7c:	2600      	movs	r6, #0
 800ab7e:	42a6      	cmp	r6, r4
 800ab80:	d105      	bne.n	800ab8e <__libc_init_array+0x2e>
 800ab82:	bd70      	pop	{r4, r5, r6, pc}
 800ab84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab88:	4798      	blx	r3
 800ab8a:	3601      	adds	r6, #1
 800ab8c:	e7ee      	b.n	800ab6c <__libc_init_array+0xc>
 800ab8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab92:	4798      	blx	r3
 800ab94:	3601      	adds	r6, #1
 800ab96:	e7f2      	b.n	800ab7e <__libc_init_array+0x1e>
 800ab98:	0800d0d0 	.word	0x0800d0d0
 800ab9c:	0800d0d0 	.word	0x0800d0d0
 800aba0:	0800d0d0 	.word	0x0800d0d0
 800aba4:	0800d0d4 	.word	0x0800d0d4

0800aba8 <__retarget_lock_init_recursive>:
 800aba8:	4770      	bx	lr

0800abaa <__retarget_lock_acquire_recursive>:
 800abaa:	4770      	bx	lr

0800abac <__retarget_lock_release_recursive>:
 800abac:	4770      	bx	lr

0800abae <memcpy>:
 800abae:	440a      	add	r2, r1
 800abb0:	4291      	cmp	r1, r2
 800abb2:	f100 33ff 	add.w	r3, r0, #4294967295
 800abb6:	d100      	bne.n	800abba <memcpy+0xc>
 800abb8:	4770      	bx	lr
 800abba:	b510      	push	{r4, lr}
 800abbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abc4:	4291      	cmp	r1, r2
 800abc6:	d1f9      	bne.n	800abbc <memcpy+0xe>
 800abc8:	bd10      	pop	{r4, pc}
 800abca:	0000      	movs	r0, r0
 800abcc:	0000      	movs	r0, r0
	...

0800abd0 <nan>:
 800abd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800abd8 <nan+0x8>
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	00000000 	.word	0x00000000
 800abdc:	7ff80000 	.word	0x7ff80000

0800abe0 <_free_r>:
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	4605      	mov	r5, r0
 800abe4:	2900      	cmp	r1, #0
 800abe6:	d041      	beq.n	800ac6c <_free_r+0x8c>
 800abe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abec:	1f0c      	subs	r4, r1, #4
 800abee:	2b00      	cmp	r3, #0
 800abf0:	bfb8      	it	lt
 800abf2:	18e4      	addlt	r4, r4, r3
 800abf4:	f000 fc2c 	bl	800b450 <__malloc_lock>
 800abf8:	4a1d      	ldr	r2, [pc, #116]	@ (800ac70 <_free_r+0x90>)
 800abfa:	6813      	ldr	r3, [r2, #0]
 800abfc:	b933      	cbnz	r3, 800ac0c <_free_r+0x2c>
 800abfe:	6063      	str	r3, [r4, #4]
 800ac00:	6014      	str	r4, [r2, #0]
 800ac02:	4628      	mov	r0, r5
 800ac04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac08:	f000 bc28 	b.w	800b45c <__malloc_unlock>
 800ac0c:	42a3      	cmp	r3, r4
 800ac0e:	d908      	bls.n	800ac22 <_free_r+0x42>
 800ac10:	6820      	ldr	r0, [r4, #0]
 800ac12:	1821      	adds	r1, r4, r0
 800ac14:	428b      	cmp	r3, r1
 800ac16:	bf01      	itttt	eq
 800ac18:	6819      	ldreq	r1, [r3, #0]
 800ac1a:	685b      	ldreq	r3, [r3, #4]
 800ac1c:	1809      	addeq	r1, r1, r0
 800ac1e:	6021      	streq	r1, [r4, #0]
 800ac20:	e7ed      	b.n	800abfe <_free_r+0x1e>
 800ac22:	461a      	mov	r2, r3
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	b10b      	cbz	r3, 800ac2c <_free_r+0x4c>
 800ac28:	42a3      	cmp	r3, r4
 800ac2a:	d9fa      	bls.n	800ac22 <_free_r+0x42>
 800ac2c:	6811      	ldr	r1, [r2, #0]
 800ac2e:	1850      	adds	r0, r2, r1
 800ac30:	42a0      	cmp	r0, r4
 800ac32:	d10b      	bne.n	800ac4c <_free_r+0x6c>
 800ac34:	6820      	ldr	r0, [r4, #0]
 800ac36:	4401      	add	r1, r0
 800ac38:	1850      	adds	r0, r2, r1
 800ac3a:	4283      	cmp	r3, r0
 800ac3c:	6011      	str	r1, [r2, #0]
 800ac3e:	d1e0      	bne.n	800ac02 <_free_r+0x22>
 800ac40:	6818      	ldr	r0, [r3, #0]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	6053      	str	r3, [r2, #4]
 800ac46:	4408      	add	r0, r1
 800ac48:	6010      	str	r0, [r2, #0]
 800ac4a:	e7da      	b.n	800ac02 <_free_r+0x22>
 800ac4c:	d902      	bls.n	800ac54 <_free_r+0x74>
 800ac4e:	230c      	movs	r3, #12
 800ac50:	602b      	str	r3, [r5, #0]
 800ac52:	e7d6      	b.n	800ac02 <_free_r+0x22>
 800ac54:	6820      	ldr	r0, [r4, #0]
 800ac56:	1821      	adds	r1, r4, r0
 800ac58:	428b      	cmp	r3, r1
 800ac5a:	bf04      	itt	eq
 800ac5c:	6819      	ldreq	r1, [r3, #0]
 800ac5e:	685b      	ldreq	r3, [r3, #4]
 800ac60:	6063      	str	r3, [r4, #4]
 800ac62:	bf04      	itt	eq
 800ac64:	1809      	addeq	r1, r1, r0
 800ac66:	6021      	streq	r1, [r4, #0]
 800ac68:	6054      	str	r4, [r2, #4]
 800ac6a:	e7ca      	b.n	800ac02 <_free_r+0x22>
 800ac6c:	bd38      	pop	{r3, r4, r5, pc}
 800ac6e:	bf00      	nop
 800ac70:	20005390 	.word	0x20005390

0800ac74 <rshift>:
 800ac74:	6903      	ldr	r3, [r0, #16]
 800ac76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ac7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ac82:	f100 0414 	add.w	r4, r0, #20
 800ac86:	dd45      	ble.n	800ad14 <rshift+0xa0>
 800ac88:	f011 011f 	ands.w	r1, r1, #31
 800ac8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ac90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ac94:	d10c      	bne.n	800acb0 <rshift+0x3c>
 800ac96:	f100 0710 	add.w	r7, r0, #16
 800ac9a:	4629      	mov	r1, r5
 800ac9c:	42b1      	cmp	r1, r6
 800ac9e:	d334      	bcc.n	800ad0a <rshift+0x96>
 800aca0:	1a9b      	subs	r3, r3, r2
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	1eea      	subs	r2, r5, #3
 800aca6:	4296      	cmp	r6, r2
 800aca8:	bf38      	it	cc
 800acaa:	2300      	movcc	r3, #0
 800acac:	4423      	add	r3, r4
 800acae:	e015      	b.n	800acdc <rshift+0x68>
 800acb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800acb4:	f1c1 0820 	rsb	r8, r1, #32
 800acb8:	40cf      	lsrs	r7, r1
 800acba:	f105 0e04 	add.w	lr, r5, #4
 800acbe:	46a1      	mov	r9, r4
 800acc0:	4576      	cmp	r6, lr
 800acc2:	46f4      	mov	ip, lr
 800acc4:	d815      	bhi.n	800acf2 <rshift+0x7e>
 800acc6:	1a9a      	subs	r2, r3, r2
 800acc8:	0092      	lsls	r2, r2, #2
 800acca:	3a04      	subs	r2, #4
 800accc:	3501      	adds	r5, #1
 800acce:	42ae      	cmp	r6, r5
 800acd0:	bf38      	it	cc
 800acd2:	2200      	movcc	r2, #0
 800acd4:	18a3      	adds	r3, r4, r2
 800acd6:	50a7      	str	r7, [r4, r2]
 800acd8:	b107      	cbz	r7, 800acdc <rshift+0x68>
 800acda:	3304      	adds	r3, #4
 800acdc:	1b1a      	subs	r2, r3, r4
 800acde:	42a3      	cmp	r3, r4
 800ace0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ace4:	bf08      	it	eq
 800ace6:	2300      	moveq	r3, #0
 800ace8:	6102      	str	r2, [r0, #16]
 800acea:	bf08      	it	eq
 800acec:	6143      	streq	r3, [r0, #20]
 800acee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acf2:	f8dc c000 	ldr.w	ip, [ip]
 800acf6:	fa0c fc08 	lsl.w	ip, ip, r8
 800acfa:	ea4c 0707 	orr.w	r7, ip, r7
 800acfe:	f849 7b04 	str.w	r7, [r9], #4
 800ad02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ad06:	40cf      	lsrs	r7, r1
 800ad08:	e7da      	b.n	800acc0 <rshift+0x4c>
 800ad0a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ad0e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ad12:	e7c3      	b.n	800ac9c <rshift+0x28>
 800ad14:	4623      	mov	r3, r4
 800ad16:	e7e1      	b.n	800acdc <rshift+0x68>

0800ad18 <__hexdig_fun>:
 800ad18:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ad1c:	2b09      	cmp	r3, #9
 800ad1e:	d802      	bhi.n	800ad26 <__hexdig_fun+0xe>
 800ad20:	3820      	subs	r0, #32
 800ad22:	b2c0      	uxtb	r0, r0
 800ad24:	4770      	bx	lr
 800ad26:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ad2a:	2b05      	cmp	r3, #5
 800ad2c:	d801      	bhi.n	800ad32 <__hexdig_fun+0x1a>
 800ad2e:	3847      	subs	r0, #71	@ 0x47
 800ad30:	e7f7      	b.n	800ad22 <__hexdig_fun+0xa>
 800ad32:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ad36:	2b05      	cmp	r3, #5
 800ad38:	d801      	bhi.n	800ad3e <__hexdig_fun+0x26>
 800ad3a:	3827      	subs	r0, #39	@ 0x27
 800ad3c:	e7f1      	b.n	800ad22 <__hexdig_fun+0xa>
 800ad3e:	2000      	movs	r0, #0
 800ad40:	4770      	bx	lr
	...

0800ad44 <__gethex>:
 800ad44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad48:	b085      	sub	sp, #20
 800ad4a:	468a      	mov	sl, r1
 800ad4c:	9302      	str	r3, [sp, #8]
 800ad4e:	680b      	ldr	r3, [r1, #0]
 800ad50:	9001      	str	r0, [sp, #4]
 800ad52:	4690      	mov	r8, r2
 800ad54:	1c9c      	adds	r4, r3, #2
 800ad56:	46a1      	mov	r9, r4
 800ad58:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ad5c:	2830      	cmp	r0, #48	@ 0x30
 800ad5e:	d0fa      	beq.n	800ad56 <__gethex+0x12>
 800ad60:	eba9 0303 	sub.w	r3, r9, r3
 800ad64:	f1a3 0b02 	sub.w	fp, r3, #2
 800ad68:	f7ff ffd6 	bl	800ad18 <__hexdig_fun>
 800ad6c:	4605      	mov	r5, r0
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	d168      	bne.n	800ae44 <__gethex+0x100>
 800ad72:	49a0      	ldr	r1, [pc, #640]	@ (800aff4 <__gethex+0x2b0>)
 800ad74:	2201      	movs	r2, #1
 800ad76:	4648      	mov	r0, r9
 800ad78:	f7ff fe55 	bl	800aa26 <strncmp>
 800ad7c:	4607      	mov	r7, r0
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	d167      	bne.n	800ae52 <__gethex+0x10e>
 800ad82:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ad86:	4626      	mov	r6, r4
 800ad88:	f7ff ffc6 	bl	800ad18 <__hexdig_fun>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d062      	beq.n	800ae56 <__gethex+0x112>
 800ad90:	4623      	mov	r3, r4
 800ad92:	7818      	ldrb	r0, [r3, #0]
 800ad94:	2830      	cmp	r0, #48	@ 0x30
 800ad96:	4699      	mov	r9, r3
 800ad98:	f103 0301 	add.w	r3, r3, #1
 800ad9c:	d0f9      	beq.n	800ad92 <__gethex+0x4e>
 800ad9e:	f7ff ffbb 	bl	800ad18 <__hexdig_fun>
 800ada2:	fab0 f580 	clz	r5, r0
 800ada6:	096d      	lsrs	r5, r5, #5
 800ada8:	f04f 0b01 	mov.w	fp, #1
 800adac:	464a      	mov	r2, r9
 800adae:	4616      	mov	r6, r2
 800adb0:	3201      	adds	r2, #1
 800adb2:	7830      	ldrb	r0, [r6, #0]
 800adb4:	f7ff ffb0 	bl	800ad18 <__hexdig_fun>
 800adb8:	2800      	cmp	r0, #0
 800adba:	d1f8      	bne.n	800adae <__gethex+0x6a>
 800adbc:	498d      	ldr	r1, [pc, #564]	@ (800aff4 <__gethex+0x2b0>)
 800adbe:	2201      	movs	r2, #1
 800adc0:	4630      	mov	r0, r6
 800adc2:	f7ff fe30 	bl	800aa26 <strncmp>
 800adc6:	2800      	cmp	r0, #0
 800adc8:	d13f      	bne.n	800ae4a <__gethex+0x106>
 800adca:	b944      	cbnz	r4, 800adde <__gethex+0x9a>
 800adcc:	1c74      	adds	r4, r6, #1
 800adce:	4622      	mov	r2, r4
 800add0:	4616      	mov	r6, r2
 800add2:	3201      	adds	r2, #1
 800add4:	7830      	ldrb	r0, [r6, #0]
 800add6:	f7ff ff9f 	bl	800ad18 <__hexdig_fun>
 800adda:	2800      	cmp	r0, #0
 800addc:	d1f8      	bne.n	800add0 <__gethex+0x8c>
 800adde:	1ba4      	subs	r4, r4, r6
 800ade0:	00a7      	lsls	r7, r4, #2
 800ade2:	7833      	ldrb	r3, [r6, #0]
 800ade4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ade8:	2b50      	cmp	r3, #80	@ 0x50
 800adea:	d13e      	bne.n	800ae6a <__gethex+0x126>
 800adec:	7873      	ldrb	r3, [r6, #1]
 800adee:	2b2b      	cmp	r3, #43	@ 0x2b
 800adf0:	d033      	beq.n	800ae5a <__gethex+0x116>
 800adf2:	2b2d      	cmp	r3, #45	@ 0x2d
 800adf4:	d034      	beq.n	800ae60 <__gethex+0x11c>
 800adf6:	1c71      	adds	r1, r6, #1
 800adf8:	2400      	movs	r4, #0
 800adfa:	7808      	ldrb	r0, [r1, #0]
 800adfc:	f7ff ff8c 	bl	800ad18 <__hexdig_fun>
 800ae00:	1e43      	subs	r3, r0, #1
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	2b18      	cmp	r3, #24
 800ae06:	d830      	bhi.n	800ae6a <__gethex+0x126>
 800ae08:	f1a0 0210 	sub.w	r2, r0, #16
 800ae0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ae10:	f7ff ff82 	bl	800ad18 <__hexdig_fun>
 800ae14:	f100 3cff 	add.w	ip, r0, #4294967295
 800ae18:	fa5f fc8c 	uxtb.w	ip, ip
 800ae1c:	f1bc 0f18 	cmp.w	ip, #24
 800ae20:	f04f 030a 	mov.w	r3, #10
 800ae24:	d91e      	bls.n	800ae64 <__gethex+0x120>
 800ae26:	b104      	cbz	r4, 800ae2a <__gethex+0xe6>
 800ae28:	4252      	negs	r2, r2
 800ae2a:	4417      	add	r7, r2
 800ae2c:	f8ca 1000 	str.w	r1, [sl]
 800ae30:	b1ed      	cbz	r5, 800ae6e <__gethex+0x12a>
 800ae32:	f1bb 0f00 	cmp.w	fp, #0
 800ae36:	bf0c      	ite	eq
 800ae38:	2506      	moveq	r5, #6
 800ae3a:	2500      	movne	r5, #0
 800ae3c:	4628      	mov	r0, r5
 800ae3e:	b005      	add	sp, #20
 800ae40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae44:	2500      	movs	r5, #0
 800ae46:	462c      	mov	r4, r5
 800ae48:	e7b0      	b.n	800adac <__gethex+0x68>
 800ae4a:	2c00      	cmp	r4, #0
 800ae4c:	d1c7      	bne.n	800adde <__gethex+0x9a>
 800ae4e:	4627      	mov	r7, r4
 800ae50:	e7c7      	b.n	800ade2 <__gethex+0x9e>
 800ae52:	464e      	mov	r6, r9
 800ae54:	462f      	mov	r7, r5
 800ae56:	2501      	movs	r5, #1
 800ae58:	e7c3      	b.n	800ade2 <__gethex+0x9e>
 800ae5a:	2400      	movs	r4, #0
 800ae5c:	1cb1      	adds	r1, r6, #2
 800ae5e:	e7cc      	b.n	800adfa <__gethex+0xb6>
 800ae60:	2401      	movs	r4, #1
 800ae62:	e7fb      	b.n	800ae5c <__gethex+0x118>
 800ae64:	fb03 0002 	mla	r0, r3, r2, r0
 800ae68:	e7ce      	b.n	800ae08 <__gethex+0xc4>
 800ae6a:	4631      	mov	r1, r6
 800ae6c:	e7de      	b.n	800ae2c <__gethex+0xe8>
 800ae6e:	eba6 0309 	sub.w	r3, r6, r9
 800ae72:	3b01      	subs	r3, #1
 800ae74:	4629      	mov	r1, r5
 800ae76:	2b07      	cmp	r3, #7
 800ae78:	dc0a      	bgt.n	800ae90 <__gethex+0x14c>
 800ae7a:	9801      	ldr	r0, [sp, #4]
 800ae7c:	f000 faf4 	bl	800b468 <_Balloc>
 800ae80:	4604      	mov	r4, r0
 800ae82:	b940      	cbnz	r0, 800ae96 <__gethex+0x152>
 800ae84:	4b5c      	ldr	r3, [pc, #368]	@ (800aff8 <__gethex+0x2b4>)
 800ae86:	4602      	mov	r2, r0
 800ae88:	21e4      	movs	r1, #228	@ 0xe4
 800ae8a:	485c      	ldr	r0, [pc, #368]	@ (800affc <__gethex+0x2b8>)
 800ae8c:	f001 fb5c 	bl	800c548 <__assert_func>
 800ae90:	3101      	adds	r1, #1
 800ae92:	105b      	asrs	r3, r3, #1
 800ae94:	e7ef      	b.n	800ae76 <__gethex+0x132>
 800ae96:	f100 0a14 	add.w	sl, r0, #20
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	4655      	mov	r5, sl
 800ae9e:	469b      	mov	fp, r3
 800aea0:	45b1      	cmp	r9, r6
 800aea2:	d337      	bcc.n	800af14 <__gethex+0x1d0>
 800aea4:	f845 bb04 	str.w	fp, [r5], #4
 800aea8:	eba5 050a 	sub.w	r5, r5, sl
 800aeac:	10ad      	asrs	r5, r5, #2
 800aeae:	6125      	str	r5, [r4, #16]
 800aeb0:	4658      	mov	r0, fp
 800aeb2:	f000 fbcb 	bl	800b64c <__hi0bits>
 800aeb6:	016d      	lsls	r5, r5, #5
 800aeb8:	f8d8 6000 	ldr.w	r6, [r8]
 800aebc:	1a2d      	subs	r5, r5, r0
 800aebe:	42b5      	cmp	r5, r6
 800aec0:	dd54      	ble.n	800af6c <__gethex+0x228>
 800aec2:	1bad      	subs	r5, r5, r6
 800aec4:	4629      	mov	r1, r5
 800aec6:	4620      	mov	r0, r4
 800aec8:	f000 ff57 	bl	800bd7a <__any_on>
 800aecc:	4681      	mov	r9, r0
 800aece:	b178      	cbz	r0, 800aef0 <__gethex+0x1ac>
 800aed0:	1e6b      	subs	r3, r5, #1
 800aed2:	1159      	asrs	r1, r3, #5
 800aed4:	f003 021f 	and.w	r2, r3, #31
 800aed8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aedc:	f04f 0901 	mov.w	r9, #1
 800aee0:	fa09 f202 	lsl.w	r2, r9, r2
 800aee4:	420a      	tst	r2, r1
 800aee6:	d003      	beq.n	800aef0 <__gethex+0x1ac>
 800aee8:	454b      	cmp	r3, r9
 800aeea:	dc36      	bgt.n	800af5a <__gethex+0x216>
 800aeec:	f04f 0902 	mov.w	r9, #2
 800aef0:	4629      	mov	r1, r5
 800aef2:	4620      	mov	r0, r4
 800aef4:	f7ff febe 	bl	800ac74 <rshift>
 800aef8:	442f      	add	r7, r5
 800aefa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aefe:	42bb      	cmp	r3, r7
 800af00:	da42      	bge.n	800af88 <__gethex+0x244>
 800af02:	9801      	ldr	r0, [sp, #4]
 800af04:	4621      	mov	r1, r4
 800af06:	f000 faef 	bl	800b4e8 <_Bfree>
 800af0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af0c:	2300      	movs	r3, #0
 800af0e:	6013      	str	r3, [r2, #0]
 800af10:	25a3      	movs	r5, #163	@ 0xa3
 800af12:	e793      	b.n	800ae3c <__gethex+0xf8>
 800af14:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800af18:	2a2e      	cmp	r2, #46	@ 0x2e
 800af1a:	d012      	beq.n	800af42 <__gethex+0x1fe>
 800af1c:	2b20      	cmp	r3, #32
 800af1e:	d104      	bne.n	800af2a <__gethex+0x1e6>
 800af20:	f845 bb04 	str.w	fp, [r5], #4
 800af24:	f04f 0b00 	mov.w	fp, #0
 800af28:	465b      	mov	r3, fp
 800af2a:	7830      	ldrb	r0, [r6, #0]
 800af2c:	9303      	str	r3, [sp, #12]
 800af2e:	f7ff fef3 	bl	800ad18 <__hexdig_fun>
 800af32:	9b03      	ldr	r3, [sp, #12]
 800af34:	f000 000f 	and.w	r0, r0, #15
 800af38:	4098      	lsls	r0, r3
 800af3a:	ea4b 0b00 	orr.w	fp, fp, r0
 800af3e:	3304      	adds	r3, #4
 800af40:	e7ae      	b.n	800aea0 <__gethex+0x15c>
 800af42:	45b1      	cmp	r9, r6
 800af44:	d8ea      	bhi.n	800af1c <__gethex+0x1d8>
 800af46:	492b      	ldr	r1, [pc, #172]	@ (800aff4 <__gethex+0x2b0>)
 800af48:	9303      	str	r3, [sp, #12]
 800af4a:	2201      	movs	r2, #1
 800af4c:	4630      	mov	r0, r6
 800af4e:	f7ff fd6a 	bl	800aa26 <strncmp>
 800af52:	9b03      	ldr	r3, [sp, #12]
 800af54:	2800      	cmp	r0, #0
 800af56:	d1e1      	bne.n	800af1c <__gethex+0x1d8>
 800af58:	e7a2      	b.n	800aea0 <__gethex+0x15c>
 800af5a:	1ea9      	subs	r1, r5, #2
 800af5c:	4620      	mov	r0, r4
 800af5e:	f000 ff0c 	bl	800bd7a <__any_on>
 800af62:	2800      	cmp	r0, #0
 800af64:	d0c2      	beq.n	800aeec <__gethex+0x1a8>
 800af66:	f04f 0903 	mov.w	r9, #3
 800af6a:	e7c1      	b.n	800aef0 <__gethex+0x1ac>
 800af6c:	da09      	bge.n	800af82 <__gethex+0x23e>
 800af6e:	1b75      	subs	r5, r6, r5
 800af70:	4621      	mov	r1, r4
 800af72:	9801      	ldr	r0, [sp, #4]
 800af74:	462a      	mov	r2, r5
 800af76:	f000 fcc7 	bl	800b908 <__lshift>
 800af7a:	1b7f      	subs	r7, r7, r5
 800af7c:	4604      	mov	r4, r0
 800af7e:	f100 0a14 	add.w	sl, r0, #20
 800af82:	f04f 0900 	mov.w	r9, #0
 800af86:	e7b8      	b.n	800aefa <__gethex+0x1b6>
 800af88:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800af8c:	42bd      	cmp	r5, r7
 800af8e:	dd6f      	ble.n	800b070 <__gethex+0x32c>
 800af90:	1bed      	subs	r5, r5, r7
 800af92:	42ae      	cmp	r6, r5
 800af94:	dc34      	bgt.n	800b000 <__gethex+0x2bc>
 800af96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af9a:	2b02      	cmp	r3, #2
 800af9c:	d022      	beq.n	800afe4 <__gethex+0x2a0>
 800af9e:	2b03      	cmp	r3, #3
 800afa0:	d024      	beq.n	800afec <__gethex+0x2a8>
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d115      	bne.n	800afd2 <__gethex+0x28e>
 800afa6:	42ae      	cmp	r6, r5
 800afa8:	d113      	bne.n	800afd2 <__gethex+0x28e>
 800afaa:	2e01      	cmp	r6, #1
 800afac:	d10b      	bne.n	800afc6 <__gethex+0x282>
 800afae:	9a02      	ldr	r2, [sp, #8]
 800afb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800afb4:	6013      	str	r3, [r2, #0]
 800afb6:	2301      	movs	r3, #1
 800afb8:	6123      	str	r3, [r4, #16]
 800afba:	f8ca 3000 	str.w	r3, [sl]
 800afbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afc0:	2562      	movs	r5, #98	@ 0x62
 800afc2:	601c      	str	r4, [r3, #0]
 800afc4:	e73a      	b.n	800ae3c <__gethex+0xf8>
 800afc6:	1e71      	subs	r1, r6, #1
 800afc8:	4620      	mov	r0, r4
 800afca:	f000 fed6 	bl	800bd7a <__any_on>
 800afce:	2800      	cmp	r0, #0
 800afd0:	d1ed      	bne.n	800afae <__gethex+0x26a>
 800afd2:	9801      	ldr	r0, [sp, #4]
 800afd4:	4621      	mov	r1, r4
 800afd6:	f000 fa87 	bl	800b4e8 <_Bfree>
 800afda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800afdc:	2300      	movs	r3, #0
 800afde:	6013      	str	r3, [r2, #0]
 800afe0:	2550      	movs	r5, #80	@ 0x50
 800afe2:	e72b      	b.n	800ae3c <__gethex+0xf8>
 800afe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1f3      	bne.n	800afd2 <__gethex+0x28e>
 800afea:	e7e0      	b.n	800afae <__gethex+0x26a>
 800afec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1dd      	bne.n	800afae <__gethex+0x26a>
 800aff2:	e7ee      	b.n	800afd2 <__gethex+0x28e>
 800aff4:	0800cd0c 	.word	0x0800cd0c
 800aff8:	0800cd22 	.word	0x0800cd22
 800affc:	0800cd33 	.word	0x0800cd33
 800b000:	1e6f      	subs	r7, r5, #1
 800b002:	f1b9 0f00 	cmp.w	r9, #0
 800b006:	d130      	bne.n	800b06a <__gethex+0x326>
 800b008:	b127      	cbz	r7, 800b014 <__gethex+0x2d0>
 800b00a:	4639      	mov	r1, r7
 800b00c:	4620      	mov	r0, r4
 800b00e:	f000 feb4 	bl	800bd7a <__any_on>
 800b012:	4681      	mov	r9, r0
 800b014:	117a      	asrs	r2, r7, #5
 800b016:	2301      	movs	r3, #1
 800b018:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b01c:	f007 071f 	and.w	r7, r7, #31
 800b020:	40bb      	lsls	r3, r7
 800b022:	4213      	tst	r3, r2
 800b024:	4629      	mov	r1, r5
 800b026:	4620      	mov	r0, r4
 800b028:	bf18      	it	ne
 800b02a:	f049 0902 	orrne.w	r9, r9, #2
 800b02e:	f7ff fe21 	bl	800ac74 <rshift>
 800b032:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b036:	1b76      	subs	r6, r6, r5
 800b038:	2502      	movs	r5, #2
 800b03a:	f1b9 0f00 	cmp.w	r9, #0
 800b03e:	d047      	beq.n	800b0d0 <__gethex+0x38c>
 800b040:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b044:	2b02      	cmp	r3, #2
 800b046:	d015      	beq.n	800b074 <__gethex+0x330>
 800b048:	2b03      	cmp	r3, #3
 800b04a:	d017      	beq.n	800b07c <__gethex+0x338>
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d109      	bne.n	800b064 <__gethex+0x320>
 800b050:	f019 0f02 	tst.w	r9, #2
 800b054:	d006      	beq.n	800b064 <__gethex+0x320>
 800b056:	f8da 3000 	ldr.w	r3, [sl]
 800b05a:	ea49 0903 	orr.w	r9, r9, r3
 800b05e:	f019 0f01 	tst.w	r9, #1
 800b062:	d10e      	bne.n	800b082 <__gethex+0x33e>
 800b064:	f045 0510 	orr.w	r5, r5, #16
 800b068:	e032      	b.n	800b0d0 <__gethex+0x38c>
 800b06a:	f04f 0901 	mov.w	r9, #1
 800b06e:	e7d1      	b.n	800b014 <__gethex+0x2d0>
 800b070:	2501      	movs	r5, #1
 800b072:	e7e2      	b.n	800b03a <__gethex+0x2f6>
 800b074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b076:	f1c3 0301 	rsb	r3, r3, #1
 800b07a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b07c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d0f0      	beq.n	800b064 <__gethex+0x320>
 800b082:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b086:	f104 0314 	add.w	r3, r4, #20
 800b08a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b08e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b092:	f04f 0c00 	mov.w	ip, #0
 800b096:	4618      	mov	r0, r3
 800b098:	f853 2b04 	ldr.w	r2, [r3], #4
 800b09c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b0a0:	d01b      	beq.n	800b0da <__gethex+0x396>
 800b0a2:	3201      	adds	r2, #1
 800b0a4:	6002      	str	r2, [r0, #0]
 800b0a6:	2d02      	cmp	r5, #2
 800b0a8:	f104 0314 	add.w	r3, r4, #20
 800b0ac:	d13c      	bne.n	800b128 <__gethex+0x3e4>
 800b0ae:	f8d8 2000 	ldr.w	r2, [r8]
 800b0b2:	3a01      	subs	r2, #1
 800b0b4:	42b2      	cmp	r2, r6
 800b0b6:	d109      	bne.n	800b0cc <__gethex+0x388>
 800b0b8:	1171      	asrs	r1, r6, #5
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b0c0:	f006 061f 	and.w	r6, r6, #31
 800b0c4:	fa02 f606 	lsl.w	r6, r2, r6
 800b0c8:	421e      	tst	r6, r3
 800b0ca:	d13a      	bne.n	800b142 <__gethex+0x3fe>
 800b0cc:	f045 0520 	orr.w	r5, r5, #32
 800b0d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0d2:	601c      	str	r4, [r3, #0]
 800b0d4:	9b02      	ldr	r3, [sp, #8]
 800b0d6:	601f      	str	r7, [r3, #0]
 800b0d8:	e6b0      	b.n	800ae3c <__gethex+0xf8>
 800b0da:	4299      	cmp	r1, r3
 800b0dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b0e0:	d8d9      	bhi.n	800b096 <__gethex+0x352>
 800b0e2:	68a3      	ldr	r3, [r4, #8]
 800b0e4:	459b      	cmp	fp, r3
 800b0e6:	db17      	blt.n	800b118 <__gethex+0x3d4>
 800b0e8:	6861      	ldr	r1, [r4, #4]
 800b0ea:	9801      	ldr	r0, [sp, #4]
 800b0ec:	3101      	adds	r1, #1
 800b0ee:	f000 f9bb 	bl	800b468 <_Balloc>
 800b0f2:	4681      	mov	r9, r0
 800b0f4:	b918      	cbnz	r0, 800b0fe <__gethex+0x3ba>
 800b0f6:	4b1a      	ldr	r3, [pc, #104]	@ (800b160 <__gethex+0x41c>)
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	2184      	movs	r1, #132	@ 0x84
 800b0fc:	e6c5      	b.n	800ae8a <__gethex+0x146>
 800b0fe:	6922      	ldr	r2, [r4, #16]
 800b100:	3202      	adds	r2, #2
 800b102:	f104 010c 	add.w	r1, r4, #12
 800b106:	0092      	lsls	r2, r2, #2
 800b108:	300c      	adds	r0, #12
 800b10a:	f7ff fd50 	bl	800abae <memcpy>
 800b10e:	4621      	mov	r1, r4
 800b110:	9801      	ldr	r0, [sp, #4]
 800b112:	f000 f9e9 	bl	800b4e8 <_Bfree>
 800b116:	464c      	mov	r4, r9
 800b118:	6923      	ldr	r3, [r4, #16]
 800b11a:	1c5a      	adds	r2, r3, #1
 800b11c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b120:	6122      	str	r2, [r4, #16]
 800b122:	2201      	movs	r2, #1
 800b124:	615a      	str	r2, [r3, #20]
 800b126:	e7be      	b.n	800b0a6 <__gethex+0x362>
 800b128:	6922      	ldr	r2, [r4, #16]
 800b12a:	455a      	cmp	r2, fp
 800b12c:	dd0b      	ble.n	800b146 <__gethex+0x402>
 800b12e:	2101      	movs	r1, #1
 800b130:	4620      	mov	r0, r4
 800b132:	f7ff fd9f 	bl	800ac74 <rshift>
 800b136:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b13a:	3701      	adds	r7, #1
 800b13c:	42bb      	cmp	r3, r7
 800b13e:	f6ff aee0 	blt.w	800af02 <__gethex+0x1be>
 800b142:	2501      	movs	r5, #1
 800b144:	e7c2      	b.n	800b0cc <__gethex+0x388>
 800b146:	f016 061f 	ands.w	r6, r6, #31
 800b14a:	d0fa      	beq.n	800b142 <__gethex+0x3fe>
 800b14c:	4453      	add	r3, sl
 800b14e:	f1c6 0620 	rsb	r6, r6, #32
 800b152:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b156:	f000 fa79 	bl	800b64c <__hi0bits>
 800b15a:	42b0      	cmp	r0, r6
 800b15c:	dbe7      	blt.n	800b12e <__gethex+0x3ea>
 800b15e:	e7f0      	b.n	800b142 <__gethex+0x3fe>
 800b160:	0800cd22 	.word	0x0800cd22

0800b164 <L_shift>:
 800b164:	f1c2 0208 	rsb	r2, r2, #8
 800b168:	0092      	lsls	r2, r2, #2
 800b16a:	b570      	push	{r4, r5, r6, lr}
 800b16c:	f1c2 0620 	rsb	r6, r2, #32
 800b170:	6843      	ldr	r3, [r0, #4]
 800b172:	6804      	ldr	r4, [r0, #0]
 800b174:	fa03 f506 	lsl.w	r5, r3, r6
 800b178:	432c      	orrs	r4, r5
 800b17a:	40d3      	lsrs	r3, r2
 800b17c:	6004      	str	r4, [r0, #0]
 800b17e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b182:	4288      	cmp	r0, r1
 800b184:	d3f4      	bcc.n	800b170 <L_shift+0xc>
 800b186:	bd70      	pop	{r4, r5, r6, pc}

0800b188 <__match>:
 800b188:	b530      	push	{r4, r5, lr}
 800b18a:	6803      	ldr	r3, [r0, #0]
 800b18c:	3301      	adds	r3, #1
 800b18e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b192:	b914      	cbnz	r4, 800b19a <__match+0x12>
 800b194:	6003      	str	r3, [r0, #0]
 800b196:	2001      	movs	r0, #1
 800b198:	bd30      	pop	{r4, r5, pc}
 800b19a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b19e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b1a2:	2d19      	cmp	r5, #25
 800b1a4:	bf98      	it	ls
 800b1a6:	3220      	addls	r2, #32
 800b1a8:	42a2      	cmp	r2, r4
 800b1aa:	d0f0      	beq.n	800b18e <__match+0x6>
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	e7f3      	b.n	800b198 <__match+0x10>

0800b1b0 <__hexnan>:
 800b1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b4:	680b      	ldr	r3, [r1, #0]
 800b1b6:	6801      	ldr	r1, [r0, #0]
 800b1b8:	115e      	asrs	r6, r3, #5
 800b1ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b1be:	f013 031f 	ands.w	r3, r3, #31
 800b1c2:	b087      	sub	sp, #28
 800b1c4:	bf18      	it	ne
 800b1c6:	3604      	addne	r6, #4
 800b1c8:	2500      	movs	r5, #0
 800b1ca:	1f37      	subs	r7, r6, #4
 800b1cc:	4682      	mov	sl, r0
 800b1ce:	4690      	mov	r8, r2
 800b1d0:	9301      	str	r3, [sp, #4]
 800b1d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b1d6:	46b9      	mov	r9, r7
 800b1d8:	463c      	mov	r4, r7
 800b1da:	9502      	str	r5, [sp, #8]
 800b1dc:	46ab      	mov	fp, r5
 800b1de:	784a      	ldrb	r2, [r1, #1]
 800b1e0:	1c4b      	adds	r3, r1, #1
 800b1e2:	9303      	str	r3, [sp, #12]
 800b1e4:	b342      	cbz	r2, 800b238 <__hexnan+0x88>
 800b1e6:	4610      	mov	r0, r2
 800b1e8:	9105      	str	r1, [sp, #20]
 800b1ea:	9204      	str	r2, [sp, #16]
 800b1ec:	f7ff fd94 	bl	800ad18 <__hexdig_fun>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d151      	bne.n	800b298 <__hexnan+0xe8>
 800b1f4:	9a04      	ldr	r2, [sp, #16]
 800b1f6:	9905      	ldr	r1, [sp, #20]
 800b1f8:	2a20      	cmp	r2, #32
 800b1fa:	d818      	bhi.n	800b22e <__hexnan+0x7e>
 800b1fc:	9b02      	ldr	r3, [sp, #8]
 800b1fe:	459b      	cmp	fp, r3
 800b200:	dd13      	ble.n	800b22a <__hexnan+0x7a>
 800b202:	454c      	cmp	r4, r9
 800b204:	d206      	bcs.n	800b214 <__hexnan+0x64>
 800b206:	2d07      	cmp	r5, #7
 800b208:	dc04      	bgt.n	800b214 <__hexnan+0x64>
 800b20a:	462a      	mov	r2, r5
 800b20c:	4649      	mov	r1, r9
 800b20e:	4620      	mov	r0, r4
 800b210:	f7ff ffa8 	bl	800b164 <L_shift>
 800b214:	4544      	cmp	r4, r8
 800b216:	d952      	bls.n	800b2be <__hexnan+0x10e>
 800b218:	2300      	movs	r3, #0
 800b21a:	f1a4 0904 	sub.w	r9, r4, #4
 800b21e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b222:	f8cd b008 	str.w	fp, [sp, #8]
 800b226:	464c      	mov	r4, r9
 800b228:	461d      	mov	r5, r3
 800b22a:	9903      	ldr	r1, [sp, #12]
 800b22c:	e7d7      	b.n	800b1de <__hexnan+0x2e>
 800b22e:	2a29      	cmp	r2, #41	@ 0x29
 800b230:	d157      	bne.n	800b2e2 <__hexnan+0x132>
 800b232:	3102      	adds	r1, #2
 800b234:	f8ca 1000 	str.w	r1, [sl]
 800b238:	f1bb 0f00 	cmp.w	fp, #0
 800b23c:	d051      	beq.n	800b2e2 <__hexnan+0x132>
 800b23e:	454c      	cmp	r4, r9
 800b240:	d206      	bcs.n	800b250 <__hexnan+0xa0>
 800b242:	2d07      	cmp	r5, #7
 800b244:	dc04      	bgt.n	800b250 <__hexnan+0xa0>
 800b246:	462a      	mov	r2, r5
 800b248:	4649      	mov	r1, r9
 800b24a:	4620      	mov	r0, r4
 800b24c:	f7ff ff8a 	bl	800b164 <L_shift>
 800b250:	4544      	cmp	r4, r8
 800b252:	d936      	bls.n	800b2c2 <__hexnan+0x112>
 800b254:	f1a8 0204 	sub.w	r2, r8, #4
 800b258:	4623      	mov	r3, r4
 800b25a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b25e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b262:	429f      	cmp	r7, r3
 800b264:	d2f9      	bcs.n	800b25a <__hexnan+0xaa>
 800b266:	1b3b      	subs	r3, r7, r4
 800b268:	f023 0303 	bic.w	r3, r3, #3
 800b26c:	3304      	adds	r3, #4
 800b26e:	3401      	adds	r4, #1
 800b270:	3e03      	subs	r6, #3
 800b272:	42b4      	cmp	r4, r6
 800b274:	bf88      	it	hi
 800b276:	2304      	movhi	r3, #4
 800b278:	4443      	add	r3, r8
 800b27a:	2200      	movs	r2, #0
 800b27c:	f843 2b04 	str.w	r2, [r3], #4
 800b280:	429f      	cmp	r7, r3
 800b282:	d2fb      	bcs.n	800b27c <__hexnan+0xcc>
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	b91b      	cbnz	r3, 800b290 <__hexnan+0xe0>
 800b288:	4547      	cmp	r7, r8
 800b28a:	d128      	bne.n	800b2de <__hexnan+0x12e>
 800b28c:	2301      	movs	r3, #1
 800b28e:	603b      	str	r3, [r7, #0]
 800b290:	2005      	movs	r0, #5
 800b292:	b007      	add	sp, #28
 800b294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b298:	3501      	adds	r5, #1
 800b29a:	2d08      	cmp	r5, #8
 800b29c:	f10b 0b01 	add.w	fp, fp, #1
 800b2a0:	dd06      	ble.n	800b2b0 <__hexnan+0x100>
 800b2a2:	4544      	cmp	r4, r8
 800b2a4:	d9c1      	bls.n	800b22a <__hexnan+0x7a>
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b2ac:	2501      	movs	r5, #1
 800b2ae:	3c04      	subs	r4, #4
 800b2b0:	6822      	ldr	r2, [r4, #0]
 800b2b2:	f000 000f 	and.w	r0, r0, #15
 800b2b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b2ba:	6020      	str	r0, [r4, #0]
 800b2bc:	e7b5      	b.n	800b22a <__hexnan+0x7a>
 800b2be:	2508      	movs	r5, #8
 800b2c0:	e7b3      	b.n	800b22a <__hexnan+0x7a>
 800b2c2:	9b01      	ldr	r3, [sp, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d0dd      	beq.n	800b284 <__hexnan+0xd4>
 800b2c8:	f1c3 0320 	rsb	r3, r3, #32
 800b2cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b2d0:	40da      	lsrs	r2, r3
 800b2d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b2d6:	4013      	ands	r3, r2
 800b2d8:	f846 3c04 	str.w	r3, [r6, #-4]
 800b2dc:	e7d2      	b.n	800b284 <__hexnan+0xd4>
 800b2de:	3f04      	subs	r7, #4
 800b2e0:	e7d0      	b.n	800b284 <__hexnan+0xd4>
 800b2e2:	2004      	movs	r0, #4
 800b2e4:	e7d5      	b.n	800b292 <__hexnan+0xe2>
	...

0800b2e8 <sbrk_aligned>:
 800b2e8:	b570      	push	{r4, r5, r6, lr}
 800b2ea:	4e0f      	ldr	r6, [pc, #60]	@ (800b328 <sbrk_aligned+0x40>)
 800b2ec:	460c      	mov	r4, r1
 800b2ee:	6831      	ldr	r1, [r6, #0]
 800b2f0:	4605      	mov	r5, r0
 800b2f2:	b911      	cbnz	r1, 800b2fa <sbrk_aligned+0x12>
 800b2f4:	f001 f918 	bl	800c528 <_sbrk_r>
 800b2f8:	6030      	str	r0, [r6, #0]
 800b2fa:	4621      	mov	r1, r4
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	f001 f913 	bl	800c528 <_sbrk_r>
 800b302:	1c43      	adds	r3, r0, #1
 800b304:	d103      	bne.n	800b30e <sbrk_aligned+0x26>
 800b306:	f04f 34ff 	mov.w	r4, #4294967295
 800b30a:	4620      	mov	r0, r4
 800b30c:	bd70      	pop	{r4, r5, r6, pc}
 800b30e:	1cc4      	adds	r4, r0, #3
 800b310:	f024 0403 	bic.w	r4, r4, #3
 800b314:	42a0      	cmp	r0, r4
 800b316:	d0f8      	beq.n	800b30a <sbrk_aligned+0x22>
 800b318:	1a21      	subs	r1, r4, r0
 800b31a:	4628      	mov	r0, r5
 800b31c:	f001 f904 	bl	800c528 <_sbrk_r>
 800b320:	3001      	adds	r0, #1
 800b322:	d1f2      	bne.n	800b30a <sbrk_aligned+0x22>
 800b324:	e7ef      	b.n	800b306 <sbrk_aligned+0x1e>
 800b326:	bf00      	nop
 800b328:	2000538c 	.word	0x2000538c

0800b32c <_malloc_r>:
 800b32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b330:	1ccd      	adds	r5, r1, #3
 800b332:	f025 0503 	bic.w	r5, r5, #3
 800b336:	3508      	adds	r5, #8
 800b338:	2d0c      	cmp	r5, #12
 800b33a:	bf38      	it	cc
 800b33c:	250c      	movcc	r5, #12
 800b33e:	2d00      	cmp	r5, #0
 800b340:	4606      	mov	r6, r0
 800b342:	db01      	blt.n	800b348 <_malloc_r+0x1c>
 800b344:	42a9      	cmp	r1, r5
 800b346:	d904      	bls.n	800b352 <_malloc_r+0x26>
 800b348:	230c      	movs	r3, #12
 800b34a:	6033      	str	r3, [r6, #0]
 800b34c:	2000      	movs	r0, #0
 800b34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b352:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b428 <_malloc_r+0xfc>
 800b356:	f000 f87b 	bl	800b450 <__malloc_lock>
 800b35a:	f8d8 3000 	ldr.w	r3, [r8]
 800b35e:	461c      	mov	r4, r3
 800b360:	bb44      	cbnz	r4, 800b3b4 <_malloc_r+0x88>
 800b362:	4629      	mov	r1, r5
 800b364:	4630      	mov	r0, r6
 800b366:	f7ff ffbf 	bl	800b2e8 <sbrk_aligned>
 800b36a:	1c43      	adds	r3, r0, #1
 800b36c:	4604      	mov	r4, r0
 800b36e:	d158      	bne.n	800b422 <_malloc_r+0xf6>
 800b370:	f8d8 4000 	ldr.w	r4, [r8]
 800b374:	4627      	mov	r7, r4
 800b376:	2f00      	cmp	r7, #0
 800b378:	d143      	bne.n	800b402 <_malloc_r+0xd6>
 800b37a:	2c00      	cmp	r4, #0
 800b37c:	d04b      	beq.n	800b416 <_malloc_r+0xea>
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	4639      	mov	r1, r7
 800b382:	4630      	mov	r0, r6
 800b384:	eb04 0903 	add.w	r9, r4, r3
 800b388:	f001 f8ce 	bl	800c528 <_sbrk_r>
 800b38c:	4581      	cmp	r9, r0
 800b38e:	d142      	bne.n	800b416 <_malloc_r+0xea>
 800b390:	6821      	ldr	r1, [r4, #0]
 800b392:	1a6d      	subs	r5, r5, r1
 800b394:	4629      	mov	r1, r5
 800b396:	4630      	mov	r0, r6
 800b398:	f7ff ffa6 	bl	800b2e8 <sbrk_aligned>
 800b39c:	3001      	adds	r0, #1
 800b39e:	d03a      	beq.n	800b416 <_malloc_r+0xea>
 800b3a0:	6823      	ldr	r3, [r4, #0]
 800b3a2:	442b      	add	r3, r5
 800b3a4:	6023      	str	r3, [r4, #0]
 800b3a6:	f8d8 3000 	ldr.w	r3, [r8]
 800b3aa:	685a      	ldr	r2, [r3, #4]
 800b3ac:	bb62      	cbnz	r2, 800b408 <_malloc_r+0xdc>
 800b3ae:	f8c8 7000 	str.w	r7, [r8]
 800b3b2:	e00f      	b.n	800b3d4 <_malloc_r+0xa8>
 800b3b4:	6822      	ldr	r2, [r4, #0]
 800b3b6:	1b52      	subs	r2, r2, r5
 800b3b8:	d420      	bmi.n	800b3fc <_malloc_r+0xd0>
 800b3ba:	2a0b      	cmp	r2, #11
 800b3bc:	d917      	bls.n	800b3ee <_malloc_r+0xc2>
 800b3be:	1961      	adds	r1, r4, r5
 800b3c0:	42a3      	cmp	r3, r4
 800b3c2:	6025      	str	r5, [r4, #0]
 800b3c4:	bf18      	it	ne
 800b3c6:	6059      	strne	r1, [r3, #4]
 800b3c8:	6863      	ldr	r3, [r4, #4]
 800b3ca:	bf08      	it	eq
 800b3cc:	f8c8 1000 	streq.w	r1, [r8]
 800b3d0:	5162      	str	r2, [r4, r5]
 800b3d2:	604b      	str	r3, [r1, #4]
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	f000 f841 	bl	800b45c <__malloc_unlock>
 800b3da:	f104 000b 	add.w	r0, r4, #11
 800b3de:	1d23      	adds	r3, r4, #4
 800b3e0:	f020 0007 	bic.w	r0, r0, #7
 800b3e4:	1ac2      	subs	r2, r0, r3
 800b3e6:	bf1c      	itt	ne
 800b3e8:	1a1b      	subne	r3, r3, r0
 800b3ea:	50a3      	strne	r3, [r4, r2]
 800b3ec:	e7af      	b.n	800b34e <_malloc_r+0x22>
 800b3ee:	6862      	ldr	r2, [r4, #4]
 800b3f0:	42a3      	cmp	r3, r4
 800b3f2:	bf0c      	ite	eq
 800b3f4:	f8c8 2000 	streq.w	r2, [r8]
 800b3f8:	605a      	strne	r2, [r3, #4]
 800b3fa:	e7eb      	b.n	800b3d4 <_malloc_r+0xa8>
 800b3fc:	4623      	mov	r3, r4
 800b3fe:	6864      	ldr	r4, [r4, #4]
 800b400:	e7ae      	b.n	800b360 <_malloc_r+0x34>
 800b402:	463c      	mov	r4, r7
 800b404:	687f      	ldr	r7, [r7, #4]
 800b406:	e7b6      	b.n	800b376 <_malloc_r+0x4a>
 800b408:	461a      	mov	r2, r3
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	42a3      	cmp	r3, r4
 800b40e:	d1fb      	bne.n	800b408 <_malloc_r+0xdc>
 800b410:	2300      	movs	r3, #0
 800b412:	6053      	str	r3, [r2, #4]
 800b414:	e7de      	b.n	800b3d4 <_malloc_r+0xa8>
 800b416:	230c      	movs	r3, #12
 800b418:	6033      	str	r3, [r6, #0]
 800b41a:	4630      	mov	r0, r6
 800b41c:	f000 f81e 	bl	800b45c <__malloc_unlock>
 800b420:	e794      	b.n	800b34c <_malloc_r+0x20>
 800b422:	6005      	str	r5, [r0, #0]
 800b424:	e7d6      	b.n	800b3d4 <_malloc_r+0xa8>
 800b426:	bf00      	nop
 800b428:	20005390 	.word	0x20005390

0800b42c <__ascii_mbtowc>:
 800b42c:	b082      	sub	sp, #8
 800b42e:	b901      	cbnz	r1, 800b432 <__ascii_mbtowc+0x6>
 800b430:	a901      	add	r1, sp, #4
 800b432:	b142      	cbz	r2, 800b446 <__ascii_mbtowc+0x1a>
 800b434:	b14b      	cbz	r3, 800b44a <__ascii_mbtowc+0x1e>
 800b436:	7813      	ldrb	r3, [r2, #0]
 800b438:	600b      	str	r3, [r1, #0]
 800b43a:	7812      	ldrb	r2, [r2, #0]
 800b43c:	1e10      	subs	r0, r2, #0
 800b43e:	bf18      	it	ne
 800b440:	2001      	movne	r0, #1
 800b442:	b002      	add	sp, #8
 800b444:	4770      	bx	lr
 800b446:	4610      	mov	r0, r2
 800b448:	e7fb      	b.n	800b442 <__ascii_mbtowc+0x16>
 800b44a:	f06f 0001 	mvn.w	r0, #1
 800b44e:	e7f8      	b.n	800b442 <__ascii_mbtowc+0x16>

0800b450 <__malloc_lock>:
 800b450:	4801      	ldr	r0, [pc, #4]	@ (800b458 <__malloc_lock+0x8>)
 800b452:	f7ff bbaa 	b.w	800abaa <__retarget_lock_acquire_recursive>
 800b456:	bf00      	nop
 800b458:	20005388 	.word	0x20005388

0800b45c <__malloc_unlock>:
 800b45c:	4801      	ldr	r0, [pc, #4]	@ (800b464 <__malloc_unlock+0x8>)
 800b45e:	f7ff bba5 	b.w	800abac <__retarget_lock_release_recursive>
 800b462:	bf00      	nop
 800b464:	20005388 	.word	0x20005388

0800b468 <_Balloc>:
 800b468:	b570      	push	{r4, r5, r6, lr}
 800b46a:	69c6      	ldr	r6, [r0, #28]
 800b46c:	4604      	mov	r4, r0
 800b46e:	460d      	mov	r5, r1
 800b470:	b976      	cbnz	r6, 800b490 <_Balloc+0x28>
 800b472:	2010      	movs	r0, #16
 800b474:	f001 f89a 	bl	800c5ac <malloc>
 800b478:	4602      	mov	r2, r0
 800b47a:	61e0      	str	r0, [r4, #28]
 800b47c:	b920      	cbnz	r0, 800b488 <_Balloc+0x20>
 800b47e:	4b18      	ldr	r3, [pc, #96]	@ (800b4e0 <_Balloc+0x78>)
 800b480:	4818      	ldr	r0, [pc, #96]	@ (800b4e4 <_Balloc+0x7c>)
 800b482:	216b      	movs	r1, #107	@ 0x6b
 800b484:	f001 f860 	bl	800c548 <__assert_func>
 800b488:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b48c:	6006      	str	r6, [r0, #0]
 800b48e:	60c6      	str	r6, [r0, #12]
 800b490:	69e6      	ldr	r6, [r4, #28]
 800b492:	68f3      	ldr	r3, [r6, #12]
 800b494:	b183      	cbz	r3, 800b4b8 <_Balloc+0x50>
 800b496:	69e3      	ldr	r3, [r4, #28]
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b49e:	b9b8      	cbnz	r0, 800b4d0 <_Balloc+0x68>
 800b4a0:	2101      	movs	r1, #1
 800b4a2:	fa01 f605 	lsl.w	r6, r1, r5
 800b4a6:	1d72      	adds	r2, r6, #5
 800b4a8:	0092      	lsls	r2, r2, #2
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f001 f86a 	bl	800c584 <_calloc_r>
 800b4b0:	b160      	cbz	r0, 800b4cc <_Balloc+0x64>
 800b4b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4b6:	e00e      	b.n	800b4d6 <_Balloc+0x6e>
 800b4b8:	2221      	movs	r2, #33	@ 0x21
 800b4ba:	2104      	movs	r1, #4
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f001 f861 	bl	800c584 <_calloc_r>
 800b4c2:	69e3      	ldr	r3, [r4, #28]
 800b4c4:	60f0      	str	r0, [r6, #12]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1e4      	bne.n	800b496 <_Balloc+0x2e>
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	bd70      	pop	{r4, r5, r6, pc}
 800b4d0:	6802      	ldr	r2, [r0, #0]
 800b4d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4dc:	e7f7      	b.n	800b4ce <_Balloc+0x66>
 800b4de:	bf00      	nop
 800b4e0:	0800cd93 	.word	0x0800cd93
 800b4e4:	0800cdaa 	.word	0x0800cdaa

0800b4e8 <_Bfree>:
 800b4e8:	b570      	push	{r4, r5, r6, lr}
 800b4ea:	69c6      	ldr	r6, [r0, #28]
 800b4ec:	4605      	mov	r5, r0
 800b4ee:	460c      	mov	r4, r1
 800b4f0:	b976      	cbnz	r6, 800b510 <_Bfree+0x28>
 800b4f2:	2010      	movs	r0, #16
 800b4f4:	f001 f85a 	bl	800c5ac <malloc>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	61e8      	str	r0, [r5, #28]
 800b4fc:	b920      	cbnz	r0, 800b508 <_Bfree+0x20>
 800b4fe:	4b09      	ldr	r3, [pc, #36]	@ (800b524 <_Bfree+0x3c>)
 800b500:	4809      	ldr	r0, [pc, #36]	@ (800b528 <_Bfree+0x40>)
 800b502:	218f      	movs	r1, #143	@ 0x8f
 800b504:	f001 f820 	bl	800c548 <__assert_func>
 800b508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b50c:	6006      	str	r6, [r0, #0]
 800b50e:	60c6      	str	r6, [r0, #12]
 800b510:	b13c      	cbz	r4, 800b522 <_Bfree+0x3a>
 800b512:	69eb      	ldr	r3, [r5, #28]
 800b514:	6862      	ldr	r2, [r4, #4]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b51c:	6021      	str	r1, [r4, #0]
 800b51e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b522:	bd70      	pop	{r4, r5, r6, pc}
 800b524:	0800cd93 	.word	0x0800cd93
 800b528:	0800cdaa 	.word	0x0800cdaa

0800b52c <__multadd>:
 800b52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b530:	690d      	ldr	r5, [r1, #16]
 800b532:	4607      	mov	r7, r0
 800b534:	460c      	mov	r4, r1
 800b536:	461e      	mov	r6, r3
 800b538:	f101 0c14 	add.w	ip, r1, #20
 800b53c:	2000      	movs	r0, #0
 800b53e:	f8dc 3000 	ldr.w	r3, [ip]
 800b542:	b299      	uxth	r1, r3
 800b544:	fb02 6101 	mla	r1, r2, r1, r6
 800b548:	0c1e      	lsrs	r6, r3, #16
 800b54a:	0c0b      	lsrs	r3, r1, #16
 800b54c:	fb02 3306 	mla	r3, r2, r6, r3
 800b550:	b289      	uxth	r1, r1
 800b552:	3001      	adds	r0, #1
 800b554:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b558:	4285      	cmp	r5, r0
 800b55a:	f84c 1b04 	str.w	r1, [ip], #4
 800b55e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b562:	dcec      	bgt.n	800b53e <__multadd+0x12>
 800b564:	b30e      	cbz	r6, 800b5aa <__multadd+0x7e>
 800b566:	68a3      	ldr	r3, [r4, #8]
 800b568:	42ab      	cmp	r3, r5
 800b56a:	dc19      	bgt.n	800b5a0 <__multadd+0x74>
 800b56c:	6861      	ldr	r1, [r4, #4]
 800b56e:	4638      	mov	r0, r7
 800b570:	3101      	adds	r1, #1
 800b572:	f7ff ff79 	bl	800b468 <_Balloc>
 800b576:	4680      	mov	r8, r0
 800b578:	b928      	cbnz	r0, 800b586 <__multadd+0x5a>
 800b57a:	4602      	mov	r2, r0
 800b57c:	4b0c      	ldr	r3, [pc, #48]	@ (800b5b0 <__multadd+0x84>)
 800b57e:	480d      	ldr	r0, [pc, #52]	@ (800b5b4 <__multadd+0x88>)
 800b580:	21ba      	movs	r1, #186	@ 0xba
 800b582:	f000 ffe1 	bl	800c548 <__assert_func>
 800b586:	6922      	ldr	r2, [r4, #16]
 800b588:	3202      	adds	r2, #2
 800b58a:	f104 010c 	add.w	r1, r4, #12
 800b58e:	0092      	lsls	r2, r2, #2
 800b590:	300c      	adds	r0, #12
 800b592:	f7ff fb0c 	bl	800abae <memcpy>
 800b596:	4621      	mov	r1, r4
 800b598:	4638      	mov	r0, r7
 800b59a:	f7ff ffa5 	bl	800b4e8 <_Bfree>
 800b59e:	4644      	mov	r4, r8
 800b5a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b5a4:	3501      	adds	r5, #1
 800b5a6:	615e      	str	r6, [r3, #20]
 800b5a8:	6125      	str	r5, [r4, #16]
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b0:	0800cd22 	.word	0x0800cd22
 800b5b4:	0800cdaa 	.word	0x0800cdaa

0800b5b8 <__s2b>:
 800b5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5bc:	460c      	mov	r4, r1
 800b5be:	4615      	mov	r5, r2
 800b5c0:	461f      	mov	r7, r3
 800b5c2:	2209      	movs	r2, #9
 800b5c4:	3308      	adds	r3, #8
 800b5c6:	4606      	mov	r6, r0
 800b5c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	db09      	blt.n	800b5e8 <__s2b+0x30>
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	f7ff ff47 	bl	800b468 <_Balloc>
 800b5da:	b940      	cbnz	r0, 800b5ee <__s2b+0x36>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	4b19      	ldr	r3, [pc, #100]	@ (800b644 <__s2b+0x8c>)
 800b5e0:	4819      	ldr	r0, [pc, #100]	@ (800b648 <__s2b+0x90>)
 800b5e2:	21d3      	movs	r1, #211	@ 0xd3
 800b5e4:	f000 ffb0 	bl	800c548 <__assert_func>
 800b5e8:	0052      	lsls	r2, r2, #1
 800b5ea:	3101      	adds	r1, #1
 800b5ec:	e7f0      	b.n	800b5d0 <__s2b+0x18>
 800b5ee:	9b08      	ldr	r3, [sp, #32]
 800b5f0:	6143      	str	r3, [r0, #20]
 800b5f2:	2d09      	cmp	r5, #9
 800b5f4:	f04f 0301 	mov.w	r3, #1
 800b5f8:	6103      	str	r3, [r0, #16]
 800b5fa:	dd16      	ble.n	800b62a <__s2b+0x72>
 800b5fc:	f104 0909 	add.w	r9, r4, #9
 800b600:	46c8      	mov	r8, r9
 800b602:	442c      	add	r4, r5
 800b604:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b608:	4601      	mov	r1, r0
 800b60a:	3b30      	subs	r3, #48	@ 0x30
 800b60c:	220a      	movs	r2, #10
 800b60e:	4630      	mov	r0, r6
 800b610:	f7ff ff8c 	bl	800b52c <__multadd>
 800b614:	45a0      	cmp	r8, r4
 800b616:	d1f5      	bne.n	800b604 <__s2b+0x4c>
 800b618:	f1a5 0408 	sub.w	r4, r5, #8
 800b61c:	444c      	add	r4, r9
 800b61e:	1b2d      	subs	r5, r5, r4
 800b620:	1963      	adds	r3, r4, r5
 800b622:	42bb      	cmp	r3, r7
 800b624:	db04      	blt.n	800b630 <__s2b+0x78>
 800b626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b62a:	340a      	adds	r4, #10
 800b62c:	2509      	movs	r5, #9
 800b62e:	e7f6      	b.n	800b61e <__s2b+0x66>
 800b630:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b634:	4601      	mov	r1, r0
 800b636:	3b30      	subs	r3, #48	@ 0x30
 800b638:	220a      	movs	r2, #10
 800b63a:	4630      	mov	r0, r6
 800b63c:	f7ff ff76 	bl	800b52c <__multadd>
 800b640:	e7ee      	b.n	800b620 <__s2b+0x68>
 800b642:	bf00      	nop
 800b644:	0800cd22 	.word	0x0800cd22
 800b648:	0800cdaa 	.word	0x0800cdaa

0800b64c <__hi0bits>:
 800b64c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b650:	4603      	mov	r3, r0
 800b652:	bf36      	itet	cc
 800b654:	0403      	lslcc	r3, r0, #16
 800b656:	2000      	movcs	r0, #0
 800b658:	2010      	movcc	r0, #16
 800b65a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b65e:	bf3c      	itt	cc
 800b660:	021b      	lslcc	r3, r3, #8
 800b662:	3008      	addcc	r0, #8
 800b664:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b668:	bf3c      	itt	cc
 800b66a:	011b      	lslcc	r3, r3, #4
 800b66c:	3004      	addcc	r0, #4
 800b66e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b672:	bf3c      	itt	cc
 800b674:	009b      	lslcc	r3, r3, #2
 800b676:	3002      	addcc	r0, #2
 800b678:	2b00      	cmp	r3, #0
 800b67a:	db05      	blt.n	800b688 <__hi0bits+0x3c>
 800b67c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b680:	f100 0001 	add.w	r0, r0, #1
 800b684:	bf08      	it	eq
 800b686:	2020      	moveq	r0, #32
 800b688:	4770      	bx	lr

0800b68a <__lo0bits>:
 800b68a:	6803      	ldr	r3, [r0, #0]
 800b68c:	4602      	mov	r2, r0
 800b68e:	f013 0007 	ands.w	r0, r3, #7
 800b692:	d00b      	beq.n	800b6ac <__lo0bits+0x22>
 800b694:	07d9      	lsls	r1, r3, #31
 800b696:	d421      	bmi.n	800b6dc <__lo0bits+0x52>
 800b698:	0798      	lsls	r0, r3, #30
 800b69a:	bf49      	itett	mi
 800b69c:	085b      	lsrmi	r3, r3, #1
 800b69e:	089b      	lsrpl	r3, r3, #2
 800b6a0:	2001      	movmi	r0, #1
 800b6a2:	6013      	strmi	r3, [r2, #0]
 800b6a4:	bf5c      	itt	pl
 800b6a6:	6013      	strpl	r3, [r2, #0]
 800b6a8:	2002      	movpl	r0, #2
 800b6aa:	4770      	bx	lr
 800b6ac:	b299      	uxth	r1, r3
 800b6ae:	b909      	cbnz	r1, 800b6b4 <__lo0bits+0x2a>
 800b6b0:	0c1b      	lsrs	r3, r3, #16
 800b6b2:	2010      	movs	r0, #16
 800b6b4:	b2d9      	uxtb	r1, r3
 800b6b6:	b909      	cbnz	r1, 800b6bc <__lo0bits+0x32>
 800b6b8:	3008      	adds	r0, #8
 800b6ba:	0a1b      	lsrs	r3, r3, #8
 800b6bc:	0719      	lsls	r1, r3, #28
 800b6be:	bf04      	itt	eq
 800b6c0:	091b      	lsreq	r3, r3, #4
 800b6c2:	3004      	addeq	r0, #4
 800b6c4:	0799      	lsls	r1, r3, #30
 800b6c6:	bf04      	itt	eq
 800b6c8:	089b      	lsreq	r3, r3, #2
 800b6ca:	3002      	addeq	r0, #2
 800b6cc:	07d9      	lsls	r1, r3, #31
 800b6ce:	d403      	bmi.n	800b6d8 <__lo0bits+0x4e>
 800b6d0:	085b      	lsrs	r3, r3, #1
 800b6d2:	f100 0001 	add.w	r0, r0, #1
 800b6d6:	d003      	beq.n	800b6e0 <__lo0bits+0x56>
 800b6d8:	6013      	str	r3, [r2, #0]
 800b6da:	4770      	bx	lr
 800b6dc:	2000      	movs	r0, #0
 800b6de:	4770      	bx	lr
 800b6e0:	2020      	movs	r0, #32
 800b6e2:	4770      	bx	lr

0800b6e4 <__i2b>:
 800b6e4:	b510      	push	{r4, lr}
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	2101      	movs	r1, #1
 800b6ea:	f7ff febd 	bl	800b468 <_Balloc>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	b928      	cbnz	r0, 800b6fe <__i2b+0x1a>
 800b6f2:	4b05      	ldr	r3, [pc, #20]	@ (800b708 <__i2b+0x24>)
 800b6f4:	4805      	ldr	r0, [pc, #20]	@ (800b70c <__i2b+0x28>)
 800b6f6:	f240 1145 	movw	r1, #325	@ 0x145
 800b6fa:	f000 ff25 	bl	800c548 <__assert_func>
 800b6fe:	2301      	movs	r3, #1
 800b700:	6144      	str	r4, [r0, #20]
 800b702:	6103      	str	r3, [r0, #16]
 800b704:	bd10      	pop	{r4, pc}
 800b706:	bf00      	nop
 800b708:	0800cd22 	.word	0x0800cd22
 800b70c:	0800cdaa 	.word	0x0800cdaa

0800b710 <__multiply>:
 800b710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b714:	4617      	mov	r7, r2
 800b716:	690a      	ldr	r2, [r1, #16]
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	bfa8      	it	ge
 800b71e:	463b      	movge	r3, r7
 800b720:	4689      	mov	r9, r1
 800b722:	bfa4      	itt	ge
 800b724:	460f      	movge	r7, r1
 800b726:	4699      	movge	r9, r3
 800b728:	693d      	ldr	r5, [r7, #16]
 800b72a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	6879      	ldr	r1, [r7, #4]
 800b732:	eb05 060a 	add.w	r6, r5, sl
 800b736:	42b3      	cmp	r3, r6
 800b738:	b085      	sub	sp, #20
 800b73a:	bfb8      	it	lt
 800b73c:	3101      	addlt	r1, #1
 800b73e:	f7ff fe93 	bl	800b468 <_Balloc>
 800b742:	b930      	cbnz	r0, 800b752 <__multiply+0x42>
 800b744:	4602      	mov	r2, r0
 800b746:	4b41      	ldr	r3, [pc, #260]	@ (800b84c <__multiply+0x13c>)
 800b748:	4841      	ldr	r0, [pc, #260]	@ (800b850 <__multiply+0x140>)
 800b74a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b74e:	f000 fefb 	bl	800c548 <__assert_func>
 800b752:	f100 0414 	add.w	r4, r0, #20
 800b756:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b75a:	4623      	mov	r3, r4
 800b75c:	2200      	movs	r2, #0
 800b75e:	4573      	cmp	r3, lr
 800b760:	d320      	bcc.n	800b7a4 <__multiply+0x94>
 800b762:	f107 0814 	add.w	r8, r7, #20
 800b766:	f109 0114 	add.w	r1, r9, #20
 800b76a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b76e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b772:	9302      	str	r3, [sp, #8]
 800b774:	1beb      	subs	r3, r5, r7
 800b776:	3b15      	subs	r3, #21
 800b778:	f023 0303 	bic.w	r3, r3, #3
 800b77c:	3304      	adds	r3, #4
 800b77e:	3715      	adds	r7, #21
 800b780:	42bd      	cmp	r5, r7
 800b782:	bf38      	it	cc
 800b784:	2304      	movcc	r3, #4
 800b786:	9301      	str	r3, [sp, #4]
 800b788:	9b02      	ldr	r3, [sp, #8]
 800b78a:	9103      	str	r1, [sp, #12]
 800b78c:	428b      	cmp	r3, r1
 800b78e:	d80c      	bhi.n	800b7aa <__multiply+0x9a>
 800b790:	2e00      	cmp	r6, #0
 800b792:	dd03      	ble.n	800b79c <__multiply+0x8c>
 800b794:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d055      	beq.n	800b848 <__multiply+0x138>
 800b79c:	6106      	str	r6, [r0, #16]
 800b79e:	b005      	add	sp, #20
 800b7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a4:	f843 2b04 	str.w	r2, [r3], #4
 800b7a8:	e7d9      	b.n	800b75e <__multiply+0x4e>
 800b7aa:	f8b1 a000 	ldrh.w	sl, [r1]
 800b7ae:	f1ba 0f00 	cmp.w	sl, #0
 800b7b2:	d01f      	beq.n	800b7f4 <__multiply+0xe4>
 800b7b4:	46c4      	mov	ip, r8
 800b7b6:	46a1      	mov	r9, r4
 800b7b8:	2700      	movs	r7, #0
 800b7ba:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b7be:	f8d9 3000 	ldr.w	r3, [r9]
 800b7c2:	fa1f fb82 	uxth.w	fp, r2
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	fb0a 330b 	mla	r3, sl, fp, r3
 800b7cc:	443b      	add	r3, r7
 800b7ce:	f8d9 7000 	ldr.w	r7, [r9]
 800b7d2:	0c12      	lsrs	r2, r2, #16
 800b7d4:	0c3f      	lsrs	r7, r7, #16
 800b7d6:	fb0a 7202 	mla	r2, sl, r2, r7
 800b7da:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7e4:	4565      	cmp	r5, ip
 800b7e6:	f849 3b04 	str.w	r3, [r9], #4
 800b7ea:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b7ee:	d8e4      	bhi.n	800b7ba <__multiply+0xaa>
 800b7f0:	9b01      	ldr	r3, [sp, #4]
 800b7f2:	50e7      	str	r7, [r4, r3]
 800b7f4:	9b03      	ldr	r3, [sp, #12]
 800b7f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b7fa:	3104      	adds	r1, #4
 800b7fc:	f1b9 0f00 	cmp.w	r9, #0
 800b800:	d020      	beq.n	800b844 <__multiply+0x134>
 800b802:	6823      	ldr	r3, [r4, #0]
 800b804:	4647      	mov	r7, r8
 800b806:	46a4      	mov	ip, r4
 800b808:	f04f 0a00 	mov.w	sl, #0
 800b80c:	f8b7 b000 	ldrh.w	fp, [r7]
 800b810:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b814:	fb09 220b 	mla	r2, r9, fp, r2
 800b818:	4452      	add	r2, sl
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b820:	f84c 3b04 	str.w	r3, [ip], #4
 800b824:	f857 3b04 	ldr.w	r3, [r7], #4
 800b828:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b82c:	f8bc 3000 	ldrh.w	r3, [ip]
 800b830:	fb09 330a 	mla	r3, r9, sl, r3
 800b834:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b838:	42bd      	cmp	r5, r7
 800b83a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b83e:	d8e5      	bhi.n	800b80c <__multiply+0xfc>
 800b840:	9a01      	ldr	r2, [sp, #4]
 800b842:	50a3      	str	r3, [r4, r2]
 800b844:	3404      	adds	r4, #4
 800b846:	e79f      	b.n	800b788 <__multiply+0x78>
 800b848:	3e01      	subs	r6, #1
 800b84a:	e7a1      	b.n	800b790 <__multiply+0x80>
 800b84c:	0800cd22 	.word	0x0800cd22
 800b850:	0800cdaa 	.word	0x0800cdaa

0800b854 <__pow5mult>:
 800b854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b858:	4615      	mov	r5, r2
 800b85a:	f012 0203 	ands.w	r2, r2, #3
 800b85e:	4607      	mov	r7, r0
 800b860:	460e      	mov	r6, r1
 800b862:	d007      	beq.n	800b874 <__pow5mult+0x20>
 800b864:	4c25      	ldr	r4, [pc, #148]	@ (800b8fc <__pow5mult+0xa8>)
 800b866:	3a01      	subs	r2, #1
 800b868:	2300      	movs	r3, #0
 800b86a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b86e:	f7ff fe5d 	bl	800b52c <__multadd>
 800b872:	4606      	mov	r6, r0
 800b874:	10ad      	asrs	r5, r5, #2
 800b876:	d03d      	beq.n	800b8f4 <__pow5mult+0xa0>
 800b878:	69fc      	ldr	r4, [r7, #28]
 800b87a:	b97c      	cbnz	r4, 800b89c <__pow5mult+0x48>
 800b87c:	2010      	movs	r0, #16
 800b87e:	f000 fe95 	bl	800c5ac <malloc>
 800b882:	4602      	mov	r2, r0
 800b884:	61f8      	str	r0, [r7, #28]
 800b886:	b928      	cbnz	r0, 800b894 <__pow5mult+0x40>
 800b888:	4b1d      	ldr	r3, [pc, #116]	@ (800b900 <__pow5mult+0xac>)
 800b88a:	481e      	ldr	r0, [pc, #120]	@ (800b904 <__pow5mult+0xb0>)
 800b88c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b890:	f000 fe5a 	bl	800c548 <__assert_func>
 800b894:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b898:	6004      	str	r4, [r0, #0]
 800b89a:	60c4      	str	r4, [r0, #12]
 800b89c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b8a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b8a4:	b94c      	cbnz	r4, 800b8ba <__pow5mult+0x66>
 800b8a6:	f240 2171 	movw	r1, #625	@ 0x271
 800b8aa:	4638      	mov	r0, r7
 800b8ac:	f7ff ff1a 	bl	800b6e4 <__i2b>
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	6003      	str	r3, [r0, #0]
 800b8ba:	f04f 0900 	mov.w	r9, #0
 800b8be:	07eb      	lsls	r3, r5, #31
 800b8c0:	d50a      	bpl.n	800b8d8 <__pow5mult+0x84>
 800b8c2:	4631      	mov	r1, r6
 800b8c4:	4622      	mov	r2, r4
 800b8c6:	4638      	mov	r0, r7
 800b8c8:	f7ff ff22 	bl	800b710 <__multiply>
 800b8cc:	4631      	mov	r1, r6
 800b8ce:	4680      	mov	r8, r0
 800b8d0:	4638      	mov	r0, r7
 800b8d2:	f7ff fe09 	bl	800b4e8 <_Bfree>
 800b8d6:	4646      	mov	r6, r8
 800b8d8:	106d      	asrs	r5, r5, #1
 800b8da:	d00b      	beq.n	800b8f4 <__pow5mult+0xa0>
 800b8dc:	6820      	ldr	r0, [r4, #0]
 800b8de:	b938      	cbnz	r0, 800b8f0 <__pow5mult+0x9c>
 800b8e0:	4622      	mov	r2, r4
 800b8e2:	4621      	mov	r1, r4
 800b8e4:	4638      	mov	r0, r7
 800b8e6:	f7ff ff13 	bl	800b710 <__multiply>
 800b8ea:	6020      	str	r0, [r4, #0]
 800b8ec:	f8c0 9000 	str.w	r9, [r0]
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	e7e4      	b.n	800b8be <__pow5mult+0x6a>
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8fa:	bf00      	nop
 800b8fc:	0800cfcc 	.word	0x0800cfcc
 800b900:	0800cd93 	.word	0x0800cd93
 800b904:	0800cdaa 	.word	0x0800cdaa

0800b908 <__lshift>:
 800b908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b90c:	460c      	mov	r4, r1
 800b90e:	6849      	ldr	r1, [r1, #4]
 800b910:	6923      	ldr	r3, [r4, #16]
 800b912:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b916:	68a3      	ldr	r3, [r4, #8]
 800b918:	4607      	mov	r7, r0
 800b91a:	4691      	mov	r9, r2
 800b91c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b920:	f108 0601 	add.w	r6, r8, #1
 800b924:	42b3      	cmp	r3, r6
 800b926:	db0b      	blt.n	800b940 <__lshift+0x38>
 800b928:	4638      	mov	r0, r7
 800b92a:	f7ff fd9d 	bl	800b468 <_Balloc>
 800b92e:	4605      	mov	r5, r0
 800b930:	b948      	cbnz	r0, 800b946 <__lshift+0x3e>
 800b932:	4602      	mov	r2, r0
 800b934:	4b28      	ldr	r3, [pc, #160]	@ (800b9d8 <__lshift+0xd0>)
 800b936:	4829      	ldr	r0, [pc, #164]	@ (800b9dc <__lshift+0xd4>)
 800b938:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b93c:	f000 fe04 	bl	800c548 <__assert_func>
 800b940:	3101      	adds	r1, #1
 800b942:	005b      	lsls	r3, r3, #1
 800b944:	e7ee      	b.n	800b924 <__lshift+0x1c>
 800b946:	2300      	movs	r3, #0
 800b948:	f100 0114 	add.w	r1, r0, #20
 800b94c:	f100 0210 	add.w	r2, r0, #16
 800b950:	4618      	mov	r0, r3
 800b952:	4553      	cmp	r3, sl
 800b954:	db33      	blt.n	800b9be <__lshift+0xb6>
 800b956:	6920      	ldr	r0, [r4, #16]
 800b958:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b95c:	f104 0314 	add.w	r3, r4, #20
 800b960:	f019 091f 	ands.w	r9, r9, #31
 800b964:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b968:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b96c:	d02b      	beq.n	800b9c6 <__lshift+0xbe>
 800b96e:	f1c9 0e20 	rsb	lr, r9, #32
 800b972:	468a      	mov	sl, r1
 800b974:	2200      	movs	r2, #0
 800b976:	6818      	ldr	r0, [r3, #0]
 800b978:	fa00 f009 	lsl.w	r0, r0, r9
 800b97c:	4310      	orrs	r0, r2
 800b97e:	f84a 0b04 	str.w	r0, [sl], #4
 800b982:	f853 2b04 	ldr.w	r2, [r3], #4
 800b986:	459c      	cmp	ip, r3
 800b988:	fa22 f20e 	lsr.w	r2, r2, lr
 800b98c:	d8f3      	bhi.n	800b976 <__lshift+0x6e>
 800b98e:	ebac 0304 	sub.w	r3, ip, r4
 800b992:	3b15      	subs	r3, #21
 800b994:	f023 0303 	bic.w	r3, r3, #3
 800b998:	3304      	adds	r3, #4
 800b99a:	f104 0015 	add.w	r0, r4, #21
 800b99e:	4560      	cmp	r0, ip
 800b9a0:	bf88      	it	hi
 800b9a2:	2304      	movhi	r3, #4
 800b9a4:	50ca      	str	r2, [r1, r3]
 800b9a6:	b10a      	cbz	r2, 800b9ac <__lshift+0xa4>
 800b9a8:	f108 0602 	add.w	r6, r8, #2
 800b9ac:	3e01      	subs	r6, #1
 800b9ae:	4638      	mov	r0, r7
 800b9b0:	612e      	str	r6, [r5, #16]
 800b9b2:	4621      	mov	r1, r4
 800b9b4:	f7ff fd98 	bl	800b4e8 <_Bfree>
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9be:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	e7c5      	b.n	800b952 <__lshift+0x4a>
 800b9c6:	3904      	subs	r1, #4
 800b9c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9d0:	459c      	cmp	ip, r3
 800b9d2:	d8f9      	bhi.n	800b9c8 <__lshift+0xc0>
 800b9d4:	e7ea      	b.n	800b9ac <__lshift+0xa4>
 800b9d6:	bf00      	nop
 800b9d8:	0800cd22 	.word	0x0800cd22
 800b9dc:	0800cdaa 	.word	0x0800cdaa

0800b9e0 <__mcmp>:
 800b9e0:	690a      	ldr	r2, [r1, #16]
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	6900      	ldr	r0, [r0, #16]
 800b9e6:	1a80      	subs	r0, r0, r2
 800b9e8:	b530      	push	{r4, r5, lr}
 800b9ea:	d10e      	bne.n	800ba0a <__mcmp+0x2a>
 800b9ec:	3314      	adds	r3, #20
 800b9ee:	3114      	adds	r1, #20
 800b9f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b9f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b9f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b9fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ba00:	4295      	cmp	r5, r2
 800ba02:	d003      	beq.n	800ba0c <__mcmp+0x2c>
 800ba04:	d205      	bcs.n	800ba12 <__mcmp+0x32>
 800ba06:	f04f 30ff 	mov.w	r0, #4294967295
 800ba0a:	bd30      	pop	{r4, r5, pc}
 800ba0c:	42a3      	cmp	r3, r4
 800ba0e:	d3f3      	bcc.n	800b9f8 <__mcmp+0x18>
 800ba10:	e7fb      	b.n	800ba0a <__mcmp+0x2a>
 800ba12:	2001      	movs	r0, #1
 800ba14:	e7f9      	b.n	800ba0a <__mcmp+0x2a>
	...

0800ba18 <__mdiff>:
 800ba18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba1c:	4689      	mov	r9, r1
 800ba1e:	4606      	mov	r6, r0
 800ba20:	4611      	mov	r1, r2
 800ba22:	4648      	mov	r0, r9
 800ba24:	4614      	mov	r4, r2
 800ba26:	f7ff ffdb 	bl	800b9e0 <__mcmp>
 800ba2a:	1e05      	subs	r5, r0, #0
 800ba2c:	d112      	bne.n	800ba54 <__mdiff+0x3c>
 800ba2e:	4629      	mov	r1, r5
 800ba30:	4630      	mov	r0, r6
 800ba32:	f7ff fd19 	bl	800b468 <_Balloc>
 800ba36:	4602      	mov	r2, r0
 800ba38:	b928      	cbnz	r0, 800ba46 <__mdiff+0x2e>
 800ba3a:	4b3f      	ldr	r3, [pc, #252]	@ (800bb38 <__mdiff+0x120>)
 800ba3c:	f240 2137 	movw	r1, #567	@ 0x237
 800ba40:	483e      	ldr	r0, [pc, #248]	@ (800bb3c <__mdiff+0x124>)
 800ba42:	f000 fd81 	bl	800c548 <__assert_func>
 800ba46:	2301      	movs	r3, #1
 800ba48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	b003      	add	sp, #12
 800ba50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba54:	bfbc      	itt	lt
 800ba56:	464b      	movlt	r3, r9
 800ba58:	46a1      	movlt	r9, r4
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ba60:	bfba      	itte	lt
 800ba62:	461c      	movlt	r4, r3
 800ba64:	2501      	movlt	r5, #1
 800ba66:	2500      	movge	r5, #0
 800ba68:	f7ff fcfe 	bl	800b468 <_Balloc>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	b918      	cbnz	r0, 800ba78 <__mdiff+0x60>
 800ba70:	4b31      	ldr	r3, [pc, #196]	@ (800bb38 <__mdiff+0x120>)
 800ba72:	f240 2145 	movw	r1, #581	@ 0x245
 800ba76:	e7e3      	b.n	800ba40 <__mdiff+0x28>
 800ba78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ba7c:	6926      	ldr	r6, [r4, #16]
 800ba7e:	60c5      	str	r5, [r0, #12]
 800ba80:	f109 0310 	add.w	r3, r9, #16
 800ba84:	f109 0514 	add.w	r5, r9, #20
 800ba88:	f104 0e14 	add.w	lr, r4, #20
 800ba8c:	f100 0b14 	add.w	fp, r0, #20
 800ba90:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ba94:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ba98:	9301      	str	r3, [sp, #4]
 800ba9a:	46d9      	mov	r9, fp
 800ba9c:	f04f 0c00 	mov.w	ip, #0
 800baa0:	9b01      	ldr	r3, [sp, #4]
 800baa2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800baa6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800baaa:	9301      	str	r3, [sp, #4]
 800baac:	fa1f f38a 	uxth.w	r3, sl
 800bab0:	4619      	mov	r1, r3
 800bab2:	b283      	uxth	r3, r0
 800bab4:	1acb      	subs	r3, r1, r3
 800bab6:	0c00      	lsrs	r0, r0, #16
 800bab8:	4463      	add	r3, ip
 800baba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800babe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bac8:	4576      	cmp	r6, lr
 800baca:	f849 3b04 	str.w	r3, [r9], #4
 800bace:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bad2:	d8e5      	bhi.n	800baa0 <__mdiff+0x88>
 800bad4:	1b33      	subs	r3, r6, r4
 800bad6:	3b15      	subs	r3, #21
 800bad8:	f023 0303 	bic.w	r3, r3, #3
 800badc:	3415      	adds	r4, #21
 800bade:	3304      	adds	r3, #4
 800bae0:	42a6      	cmp	r6, r4
 800bae2:	bf38      	it	cc
 800bae4:	2304      	movcc	r3, #4
 800bae6:	441d      	add	r5, r3
 800bae8:	445b      	add	r3, fp
 800baea:	461e      	mov	r6, r3
 800baec:	462c      	mov	r4, r5
 800baee:	4544      	cmp	r4, r8
 800baf0:	d30e      	bcc.n	800bb10 <__mdiff+0xf8>
 800baf2:	f108 0103 	add.w	r1, r8, #3
 800baf6:	1b49      	subs	r1, r1, r5
 800baf8:	f021 0103 	bic.w	r1, r1, #3
 800bafc:	3d03      	subs	r5, #3
 800bafe:	45a8      	cmp	r8, r5
 800bb00:	bf38      	it	cc
 800bb02:	2100      	movcc	r1, #0
 800bb04:	440b      	add	r3, r1
 800bb06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb0a:	b191      	cbz	r1, 800bb32 <__mdiff+0x11a>
 800bb0c:	6117      	str	r7, [r2, #16]
 800bb0e:	e79d      	b.n	800ba4c <__mdiff+0x34>
 800bb10:	f854 1b04 	ldr.w	r1, [r4], #4
 800bb14:	46e6      	mov	lr, ip
 800bb16:	0c08      	lsrs	r0, r1, #16
 800bb18:	fa1c fc81 	uxtah	ip, ip, r1
 800bb1c:	4471      	add	r1, lr
 800bb1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bb22:	b289      	uxth	r1, r1
 800bb24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bb28:	f846 1b04 	str.w	r1, [r6], #4
 800bb2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb30:	e7dd      	b.n	800baee <__mdiff+0xd6>
 800bb32:	3f01      	subs	r7, #1
 800bb34:	e7e7      	b.n	800bb06 <__mdiff+0xee>
 800bb36:	bf00      	nop
 800bb38:	0800cd22 	.word	0x0800cd22
 800bb3c:	0800cdaa 	.word	0x0800cdaa

0800bb40 <__ulp>:
 800bb40:	b082      	sub	sp, #8
 800bb42:	ed8d 0b00 	vstr	d0, [sp]
 800bb46:	9a01      	ldr	r2, [sp, #4]
 800bb48:	4b0f      	ldr	r3, [pc, #60]	@ (800bb88 <__ulp+0x48>)
 800bb4a:	4013      	ands	r3, r2
 800bb4c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	dc08      	bgt.n	800bb66 <__ulp+0x26>
 800bb54:	425b      	negs	r3, r3
 800bb56:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bb5a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bb5e:	da04      	bge.n	800bb6a <__ulp+0x2a>
 800bb60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bb64:	4113      	asrs	r3, r2
 800bb66:	2200      	movs	r2, #0
 800bb68:	e008      	b.n	800bb7c <__ulp+0x3c>
 800bb6a:	f1a2 0314 	sub.w	r3, r2, #20
 800bb6e:	2b1e      	cmp	r3, #30
 800bb70:	bfda      	itte	le
 800bb72:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bb76:	40da      	lsrle	r2, r3
 800bb78:	2201      	movgt	r2, #1
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	4610      	mov	r0, r2
 800bb80:	ec41 0b10 	vmov	d0, r0, r1
 800bb84:	b002      	add	sp, #8
 800bb86:	4770      	bx	lr
 800bb88:	7ff00000 	.word	0x7ff00000

0800bb8c <__b2d>:
 800bb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb90:	6906      	ldr	r6, [r0, #16]
 800bb92:	f100 0814 	add.w	r8, r0, #20
 800bb96:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bb9a:	1f37      	subs	r7, r6, #4
 800bb9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bba0:	4610      	mov	r0, r2
 800bba2:	f7ff fd53 	bl	800b64c <__hi0bits>
 800bba6:	f1c0 0320 	rsb	r3, r0, #32
 800bbaa:	280a      	cmp	r0, #10
 800bbac:	600b      	str	r3, [r1, #0]
 800bbae:	491b      	ldr	r1, [pc, #108]	@ (800bc1c <__b2d+0x90>)
 800bbb0:	dc15      	bgt.n	800bbde <__b2d+0x52>
 800bbb2:	f1c0 0c0b 	rsb	ip, r0, #11
 800bbb6:	fa22 f30c 	lsr.w	r3, r2, ip
 800bbba:	45b8      	cmp	r8, r7
 800bbbc:	ea43 0501 	orr.w	r5, r3, r1
 800bbc0:	bf34      	ite	cc
 800bbc2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bbc6:	2300      	movcs	r3, #0
 800bbc8:	3015      	adds	r0, #21
 800bbca:	fa02 f000 	lsl.w	r0, r2, r0
 800bbce:	fa23 f30c 	lsr.w	r3, r3, ip
 800bbd2:	4303      	orrs	r3, r0
 800bbd4:	461c      	mov	r4, r3
 800bbd6:	ec45 4b10 	vmov	d0, r4, r5
 800bbda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbde:	45b8      	cmp	r8, r7
 800bbe0:	bf3a      	itte	cc
 800bbe2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bbe6:	f1a6 0708 	subcc.w	r7, r6, #8
 800bbea:	2300      	movcs	r3, #0
 800bbec:	380b      	subs	r0, #11
 800bbee:	d012      	beq.n	800bc16 <__b2d+0x8a>
 800bbf0:	f1c0 0120 	rsb	r1, r0, #32
 800bbf4:	fa23 f401 	lsr.w	r4, r3, r1
 800bbf8:	4082      	lsls	r2, r0
 800bbfa:	4322      	orrs	r2, r4
 800bbfc:	4547      	cmp	r7, r8
 800bbfe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bc02:	bf8c      	ite	hi
 800bc04:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bc08:	2200      	movls	r2, #0
 800bc0a:	4083      	lsls	r3, r0
 800bc0c:	40ca      	lsrs	r2, r1
 800bc0e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bc12:	4313      	orrs	r3, r2
 800bc14:	e7de      	b.n	800bbd4 <__b2d+0x48>
 800bc16:	ea42 0501 	orr.w	r5, r2, r1
 800bc1a:	e7db      	b.n	800bbd4 <__b2d+0x48>
 800bc1c:	3ff00000 	.word	0x3ff00000

0800bc20 <__d2b>:
 800bc20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc24:	460f      	mov	r7, r1
 800bc26:	2101      	movs	r1, #1
 800bc28:	ec59 8b10 	vmov	r8, r9, d0
 800bc2c:	4616      	mov	r6, r2
 800bc2e:	f7ff fc1b 	bl	800b468 <_Balloc>
 800bc32:	4604      	mov	r4, r0
 800bc34:	b930      	cbnz	r0, 800bc44 <__d2b+0x24>
 800bc36:	4602      	mov	r2, r0
 800bc38:	4b23      	ldr	r3, [pc, #140]	@ (800bcc8 <__d2b+0xa8>)
 800bc3a:	4824      	ldr	r0, [pc, #144]	@ (800bccc <__d2b+0xac>)
 800bc3c:	f240 310f 	movw	r1, #783	@ 0x30f
 800bc40:	f000 fc82 	bl	800c548 <__assert_func>
 800bc44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bc48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc4c:	b10d      	cbz	r5, 800bc52 <__d2b+0x32>
 800bc4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc52:	9301      	str	r3, [sp, #4]
 800bc54:	f1b8 0300 	subs.w	r3, r8, #0
 800bc58:	d023      	beq.n	800bca2 <__d2b+0x82>
 800bc5a:	4668      	mov	r0, sp
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	f7ff fd14 	bl	800b68a <__lo0bits>
 800bc62:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bc66:	b1d0      	cbz	r0, 800bc9e <__d2b+0x7e>
 800bc68:	f1c0 0320 	rsb	r3, r0, #32
 800bc6c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc70:	430b      	orrs	r3, r1
 800bc72:	40c2      	lsrs	r2, r0
 800bc74:	6163      	str	r3, [r4, #20]
 800bc76:	9201      	str	r2, [sp, #4]
 800bc78:	9b01      	ldr	r3, [sp, #4]
 800bc7a:	61a3      	str	r3, [r4, #24]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	bf0c      	ite	eq
 800bc80:	2201      	moveq	r2, #1
 800bc82:	2202      	movne	r2, #2
 800bc84:	6122      	str	r2, [r4, #16]
 800bc86:	b1a5      	cbz	r5, 800bcb2 <__d2b+0x92>
 800bc88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bc8c:	4405      	add	r5, r0
 800bc8e:	603d      	str	r5, [r7, #0]
 800bc90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bc94:	6030      	str	r0, [r6, #0]
 800bc96:	4620      	mov	r0, r4
 800bc98:	b003      	add	sp, #12
 800bc9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc9e:	6161      	str	r1, [r4, #20]
 800bca0:	e7ea      	b.n	800bc78 <__d2b+0x58>
 800bca2:	a801      	add	r0, sp, #4
 800bca4:	f7ff fcf1 	bl	800b68a <__lo0bits>
 800bca8:	9b01      	ldr	r3, [sp, #4]
 800bcaa:	6163      	str	r3, [r4, #20]
 800bcac:	3020      	adds	r0, #32
 800bcae:	2201      	movs	r2, #1
 800bcb0:	e7e8      	b.n	800bc84 <__d2b+0x64>
 800bcb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bcb6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bcba:	6038      	str	r0, [r7, #0]
 800bcbc:	6918      	ldr	r0, [r3, #16]
 800bcbe:	f7ff fcc5 	bl	800b64c <__hi0bits>
 800bcc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bcc6:	e7e5      	b.n	800bc94 <__d2b+0x74>
 800bcc8:	0800cd22 	.word	0x0800cd22
 800bccc:	0800cdaa 	.word	0x0800cdaa

0800bcd0 <__ratio>:
 800bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	b085      	sub	sp, #20
 800bcd6:	e9cd 1000 	strd	r1, r0, [sp]
 800bcda:	a902      	add	r1, sp, #8
 800bcdc:	f7ff ff56 	bl	800bb8c <__b2d>
 800bce0:	9800      	ldr	r0, [sp, #0]
 800bce2:	a903      	add	r1, sp, #12
 800bce4:	ec55 4b10 	vmov	r4, r5, d0
 800bce8:	f7ff ff50 	bl	800bb8c <__b2d>
 800bcec:	9b01      	ldr	r3, [sp, #4]
 800bcee:	6919      	ldr	r1, [r3, #16]
 800bcf0:	9b00      	ldr	r3, [sp, #0]
 800bcf2:	691b      	ldr	r3, [r3, #16]
 800bcf4:	1ac9      	subs	r1, r1, r3
 800bcf6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bcfa:	1a9b      	subs	r3, r3, r2
 800bcfc:	ec5b ab10 	vmov	sl, fp, d0
 800bd00:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	bfce      	itee	gt
 800bd08:	462a      	movgt	r2, r5
 800bd0a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bd0e:	465a      	movle	r2, fp
 800bd10:	462f      	mov	r7, r5
 800bd12:	46d9      	mov	r9, fp
 800bd14:	bfcc      	ite	gt
 800bd16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bd1a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bd1e:	464b      	mov	r3, r9
 800bd20:	4652      	mov	r2, sl
 800bd22:	4620      	mov	r0, r4
 800bd24:	4639      	mov	r1, r7
 800bd26:	f7f4 fdb9 	bl	800089c <__aeabi_ddiv>
 800bd2a:	ec41 0b10 	vmov	d0, r0, r1
 800bd2e:	b005      	add	sp, #20
 800bd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bd34 <__copybits>:
 800bd34:	3901      	subs	r1, #1
 800bd36:	b570      	push	{r4, r5, r6, lr}
 800bd38:	1149      	asrs	r1, r1, #5
 800bd3a:	6914      	ldr	r4, [r2, #16]
 800bd3c:	3101      	adds	r1, #1
 800bd3e:	f102 0314 	add.w	r3, r2, #20
 800bd42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bd46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bd4a:	1f05      	subs	r5, r0, #4
 800bd4c:	42a3      	cmp	r3, r4
 800bd4e:	d30c      	bcc.n	800bd6a <__copybits+0x36>
 800bd50:	1aa3      	subs	r3, r4, r2
 800bd52:	3b11      	subs	r3, #17
 800bd54:	f023 0303 	bic.w	r3, r3, #3
 800bd58:	3211      	adds	r2, #17
 800bd5a:	42a2      	cmp	r2, r4
 800bd5c:	bf88      	it	hi
 800bd5e:	2300      	movhi	r3, #0
 800bd60:	4418      	add	r0, r3
 800bd62:	2300      	movs	r3, #0
 800bd64:	4288      	cmp	r0, r1
 800bd66:	d305      	bcc.n	800bd74 <__copybits+0x40>
 800bd68:	bd70      	pop	{r4, r5, r6, pc}
 800bd6a:	f853 6b04 	ldr.w	r6, [r3], #4
 800bd6e:	f845 6f04 	str.w	r6, [r5, #4]!
 800bd72:	e7eb      	b.n	800bd4c <__copybits+0x18>
 800bd74:	f840 3b04 	str.w	r3, [r0], #4
 800bd78:	e7f4      	b.n	800bd64 <__copybits+0x30>

0800bd7a <__any_on>:
 800bd7a:	f100 0214 	add.w	r2, r0, #20
 800bd7e:	6900      	ldr	r0, [r0, #16]
 800bd80:	114b      	asrs	r3, r1, #5
 800bd82:	4298      	cmp	r0, r3
 800bd84:	b510      	push	{r4, lr}
 800bd86:	db11      	blt.n	800bdac <__any_on+0x32>
 800bd88:	dd0a      	ble.n	800bda0 <__any_on+0x26>
 800bd8a:	f011 011f 	ands.w	r1, r1, #31
 800bd8e:	d007      	beq.n	800bda0 <__any_on+0x26>
 800bd90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bd94:	fa24 f001 	lsr.w	r0, r4, r1
 800bd98:	fa00 f101 	lsl.w	r1, r0, r1
 800bd9c:	428c      	cmp	r4, r1
 800bd9e:	d10b      	bne.n	800bdb8 <__any_on+0x3e>
 800bda0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d803      	bhi.n	800bdb0 <__any_on+0x36>
 800bda8:	2000      	movs	r0, #0
 800bdaa:	bd10      	pop	{r4, pc}
 800bdac:	4603      	mov	r3, r0
 800bdae:	e7f7      	b.n	800bda0 <__any_on+0x26>
 800bdb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bdb4:	2900      	cmp	r1, #0
 800bdb6:	d0f5      	beq.n	800bda4 <__any_on+0x2a>
 800bdb8:	2001      	movs	r0, #1
 800bdba:	e7f6      	b.n	800bdaa <__any_on+0x30>

0800bdbc <__ascii_wctomb>:
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	4608      	mov	r0, r1
 800bdc0:	b141      	cbz	r1, 800bdd4 <__ascii_wctomb+0x18>
 800bdc2:	2aff      	cmp	r2, #255	@ 0xff
 800bdc4:	d904      	bls.n	800bdd0 <__ascii_wctomb+0x14>
 800bdc6:	228a      	movs	r2, #138	@ 0x8a
 800bdc8:	601a      	str	r2, [r3, #0]
 800bdca:	f04f 30ff 	mov.w	r0, #4294967295
 800bdce:	4770      	bx	lr
 800bdd0:	700a      	strb	r2, [r1, #0]
 800bdd2:	2001      	movs	r0, #1
 800bdd4:	4770      	bx	lr

0800bdd6 <__ssputs_r>:
 800bdd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdda:	688e      	ldr	r6, [r1, #8]
 800bddc:	461f      	mov	r7, r3
 800bdde:	42be      	cmp	r6, r7
 800bde0:	680b      	ldr	r3, [r1, #0]
 800bde2:	4682      	mov	sl, r0
 800bde4:	460c      	mov	r4, r1
 800bde6:	4690      	mov	r8, r2
 800bde8:	d82d      	bhi.n	800be46 <__ssputs_r+0x70>
 800bdea:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bdee:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bdf2:	d026      	beq.n	800be42 <__ssputs_r+0x6c>
 800bdf4:	6965      	ldr	r5, [r4, #20]
 800bdf6:	6909      	ldr	r1, [r1, #16]
 800bdf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdfc:	eba3 0901 	sub.w	r9, r3, r1
 800be00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be04:	1c7b      	adds	r3, r7, #1
 800be06:	444b      	add	r3, r9
 800be08:	106d      	asrs	r5, r5, #1
 800be0a:	429d      	cmp	r5, r3
 800be0c:	bf38      	it	cc
 800be0e:	461d      	movcc	r5, r3
 800be10:	0553      	lsls	r3, r2, #21
 800be12:	d527      	bpl.n	800be64 <__ssputs_r+0x8e>
 800be14:	4629      	mov	r1, r5
 800be16:	f7ff fa89 	bl	800b32c <_malloc_r>
 800be1a:	4606      	mov	r6, r0
 800be1c:	b360      	cbz	r0, 800be78 <__ssputs_r+0xa2>
 800be1e:	6921      	ldr	r1, [r4, #16]
 800be20:	464a      	mov	r2, r9
 800be22:	f7fe fec4 	bl	800abae <memcpy>
 800be26:	89a3      	ldrh	r3, [r4, #12]
 800be28:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800be2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be30:	81a3      	strh	r3, [r4, #12]
 800be32:	6126      	str	r6, [r4, #16]
 800be34:	6165      	str	r5, [r4, #20]
 800be36:	444e      	add	r6, r9
 800be38:	eba5 0509 	sub.w	r5, r5, r9
 800be3c:	6026      	str	r6, [r4, #0]
 800be3e:	60a5      	str	r5, [r4, #8]
 800be40:	463e      	mov	r6, r7
 800be42:	42be      	cmp	r6, r7
 800be44:	d900      	bls.n	800be48 <__ssputs_r+0x72>
 800be46:	463e      	mov	r6, r7
 800be48:	6820      	ldr	r0, [r4, #0]
 800be4a:	4632      	mov	r2, r6
 800be4c:	4641      	mov	r1, r8
 800be4e:	f000 fb51 	bl	800c4f4 <memmove>
 800be52:	68a3      	ldr	r3, [r4, #8]
 800be54:	1b9b      	subs	r3, r3, r6
 800be56:	60a3      	str	r3, [r4, #8]
 800be58:	6823      	ldr	r3, [r4, #0]
 800be5a:	4433      	add	r3, r6
 800be5c:	6023      	str	r3, [r4, #0]
 800be5e:	2000      	movs	r0, #0
 800be60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be64:	462a      	mov	r2, r5
 800be66:	f000 fba9 	bl	800c5bc <_realloc_r>
 800be6a:	4606      	mov	r6, r0
 800be6c:	2800      	cmp	r0, #0
 800be6e:	d1e0      	bne.n	800be32 <__ssputs_r+0x5c>
 800be70:	6921      	ldr	r1, [r4, #16]
 800be72:	4650      	mov	r0, sl
 800be74:	f7fe feb4 	bl	800abe0 <_free_r>
 800be78:	230c      	movs	r3, #12
 800be7a:	f8ca 3000 	str.w	r3, [sl]
 800be7e:	89a3      	ldrh	r3, [r4, #12]
 800be80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be84:	81a3      	strh	r3, [r4, #12]
 800be86:	f04f 30ff 	mov.w	r0, #4294967295
 800be8a:	e7e9      	b.n	800be60 <__ssputs_r+0x8a>

0800be8c <_svfiprintf_r>:
 800be8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be90:	4698      	mov	r8, r3
 800be92:	898b      	ldrh	r3, [r1, #12]
 800be94:	061b      	lsls	r3, r3, #24
 800be96:	b09d      	sub	sp, #116	@ 0x74
 800be98:	4607      	mov	r7, r0
 800be9a:	460d      	mov	r5, r1
 800be9c:	4614      	mov	r4, r2
 800be9e:	d510      	bpl.n	800bec2 <_svfiprintf_r+0x36>
 800bea0:	690b      	ldr	r3, [r1, #16]
 800bea2:	b973      	cbnz	r3, 800bec2 <_svfiprintf_r+0x36>
 800bea4:	2140      	movs	r1, #64	@ 0x40
 800bea6:	f7ff fa41 	bl	800b32c <_malloc_r>
 800beaa:	6028      	str	r0, [r5, #0]
 800beac:	6128      	str	r0, [r5, #16]
 800beae:	b930      	cbnz	r0, 800bebe <_svfiprintf_r+0x32>
 800beb0:	230c      	movs	r3, #12
 800beb2:	603b      	str	r3, [r7, #0]
 800beb4:	f04f 30ff 	mov.w	r0, #4294967295
 800beb8:	b01d      	add	sp, #116	@ 0x74
 800beba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bebe:	2340      	movs	r3, #64	@ 0x40
 800bec0:	616b      	str	r3, [r5, #20]
 800bec2:	2300      	movs	r3, #0
 800bec4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bec6:	2320      	movs	r3, #32
 800bec8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800becc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bed0:	2330      	movs	r3, #48	@ 0x30
 800bed2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c070 <_svfiprintf_r+0x1e4>
 800bed6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800beda:	f04f 0901 	mov.w	r9, #1
 800bede:	4623      	mov	r3, r4
 800bee0:	469a      	mov	sl, r3
 800bee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bee6:	b10a      	cbz	r2, 800beec <_svfiprintf_r+0x60>
 800bee8:	2a25      	cmp	r2, #37	@ 0x25
 800beea:	d1f9      	bne.n	800bee0 <_svfiprintf_r+0x54>
 800beec:	ebba 0b04 	subs.w	fp, sl, r4
 800bef0:	d00b      	beq.n	800bf0a <_svfiprintf_r+0x7e>
 800bef2:	465b      	mov	r3, fp
 800bef4:	4622      	mov	r2, r4
 800bef6:	4629      	mov	r1, r5
 800bef8:	4638      	mov	r0, r7
 800befa:	f7ff ff6c 	bl	800bdd6 <__ssputs_r>
 800befe:	3001      	adds	r0, #1
 800bf00:	f000 80a7 	beq.w	800c052 <_svfiprintf_r+0x1c6>
 800bf04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf06:	445a      	add	r2, fp
 800bf08:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf0a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	f000 809f 	beq.w	800c052 <_svfiprintf_r+0x1c6>
 800bf14:	2300      	movs	r3, #0
 800bf16:	f04f 32ff 	mov.w	r2, #4294967295
 800bf1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf1e:	f10a 0a01 	add.w	sl, sl, #1
 800bf22:	9304      	str	r3, [sp, #16]
 800bf24:	9307      	str	r3, [sp, #28]
 800bf26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf2a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf2c:	4654      	mov	r4, sl
 800bf2e:	2205      	movs	r2, #5
 800bf30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf34:	484e      	ldr	r0, [pc, #312]	@ (800c070 <_svfiprintf_r+0x1e4>)
 800bf36:	f7f4 f97b 	bl	8000230 <memchr>
 800bf3a:	9a04      	ldr	r2, [sp, #16]
 800bf3c:	b9d8      	cbnz	r0, 800bf76 <_svfiprintf_r+0xea>
 800bf3e:	06d0      	lsls	r0, r2, #27
 800bf40:	bf44      	itt	mi
 800bf42:	2320      	movmi	r3, #32
 800bf44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf48:	0711      	lsls	r1, r2, #28
 800bf4a:	bf44      	itt	mi
 800bf4c:	232b      	movmi	r3, #43	@ 0x2b
 800bf4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf52:	f89a 3000 	ldrb.w	r3, [sl]
 800bf56:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf58:	d015      	beq.n	800bf86 <_svfiprintf_r+0xfa>
 800bf5a:	9a07      	ldr	r2, [sp, #28]
 800bf5c:	4654      	mov	r4, sl
 800bf5e:	2000      	movs	r0, #0
 800bf60:	f04f 0c0a 	mov.w	ip, #10
 800bf64:	4621      	mov	r1, r4
 800bf66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf6a:	3b30      	subs	r3, #48	@ 0x30
 800bf6c:	2b09      	cmp	r3, #9
 800bf6e:	d94b      	bls.n	800c008 <_svfiprintf_r+0x17c>
 800bf70:	b1b0      	cbz	r0, 800bfa0 <_svfiprintf_r+0x114>
 800bf72:	9207      	str	r2, [sp, #28]
 800bf74:	e014      	b.n	800bfa0 <_svfiprintf_r+0x114>
 800bf76:	eba0 0308 	sub.w	r3, r0, r8
 800bf7a:	fa09 f303 	lsl.w	r3, r9, r3
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	9304      	str	r3, [sp, #16]
 800bf82:	46a2      	mov	sl, r4
 800bf84:	e7d2      	b.n	800bf2c <_svfiprintf_r+0xa0>
 800bf86:	9b03      	ldr	r3, [sp, #12]
 800bf88:	1d19      	adds	r1, r3, #4
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	9103      	str	r1, [sp, #12]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	bfbb      	ittet	lt
 800bf92:	425b      	neglt	r3, r3
 800bf94:	f042 0202 	orrlt.w	r2, r2, #2
 800bf98:	9307      	strge	r3, [sp, #28]
 800bf9a:	9307      	strlt	r3, [sp, #28]
 800bf9c:	bfb8      	it	lt
 800bf9e:	9204      	strlt	r2, [sp, #16]
 800bfa0:	7823      	ldrb	r3, [r4, #0]
 800bfa2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bfa4:	d10a      	bne.n	800bfbc <_svfiprintf_r+0x130>
 800bfa6:	7863      	ldrb	r3, [r4, #1]
 800bfa8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfaa:	d132      	bne.n	800c012 <_svfiprintf_r+0x186>
 800bfac:	9b03      	ldr	r3, [sp, #12]
 800bfae:	1d1a      	adds	r2, r3, #4
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	9203      	str	r2, [sp, #12]
 800bfb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bfb8:	3402      	adds	r4, #2
 800bfba:	9305      	str	r3, [sp, #20]
 800bfbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c080 <_svfiprintf_r+0x1f4>
 800bfc0:	7821      	ldrb	r1, [r4, #0]
 800bfc2:	2203      	movs	r2, #3
 800bfc4:	4650      	mov	r0, sl
 800bfc6:	f7f4 f933 	bl	8000230 <memchr>
 800bfca:	b138      	cbz	r0, 800bfdc <_svfiprintf_r+0x150>
 800bfcc:	9b04      	ldr	r3, [sp, #16]
 800bfce:	eba0 000a 	sub.w	r0, r0, sl
 800bfd2:	2240      	movs	r2, #64	@ 0x40
 800bfd4:	4082      	lsls	r2, r0
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	3401      	adds	r4, #1
 800bfda:	9304      	str	r3, [sp, #16]
 800bfdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfe0:	4824      	ldr	r0, [pc, #144]	@ (800c074 <_svfiprintf_r+0x1e8>)
 800bfe2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bfe6:	2206      	movs	r2, #6
 800bfe8:	f7f4 f922 	bl	8000230 <memchr>
 800bfec:	2800      	cmp	r0, #0
 800bfee:	d036      	beq.n	800c05e <_svfiprintf_r+0x1d2>
 800bff0:	4b21      	ldr	r3, [pc, #132]	@ (800c078 <_svfiprintf_r+0x1ec>)
 800bff2:	bb1b      	cbnz	r3, 800c03c <_svfiprintf_r+0x1b0>
 800bff4:	9b03      	ldr	r3, [sp, #12]
 800bff6:	3307      	adds	r3, #7
 800bff8:	f023 0307 	bic.w	r3, r3, #7
 800bffc:	3308      	adds	r3, #8
 800bffe:	9303      	str	r3, [sp, #12]
 800c000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c002:	4433      	add	r3, r6
 800c004:	9309      	str	r3, [sp, #36]	@ 0x24
 800c006:	e76a      	b.n	800bede <_svfiprintf_r+0x52>
 800c008:	fb0c 3202 	mla	r2, ip, r2, r3
 800c00c:	460c      	mov	r4, r1
 800c00e:	2001      	movs	r0, #1
 800c010:	e7a8      	b.n	800bf64 <_svfiprintf_r+0xd8>
 800c012:	2300      	movs	r3, #0
 800c014:	3401      	adds	r4, #1
 800c016:	9305      	str	r3, [sp, #20]
 800c018:	4619      	mov	r1, r3
 800c01a:	f04f 0c0a 	mov.w	ip, #10
 800c01e:	4620      	mov	r0, r4
 800c020:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c024:	3a30      	subs	r2, #48	@ 0x30
 800c026:	2a09      	cmp	r2, #9
 800c028:	d903      	bls.n	800c032 <_svfiprintf_r+0x1a6>
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d0c6      	beq.n	800bfbc <_svfiprintf_r+0x130>
 800c02e:	9105      	str	r1, [sp, #20]
 800c030:	e7c4      	b.n	800bfbc <_svfiprintf_r+0x130>
 800c032:	fb0c 2101 	mla	r1, ip, r1, r2
 800c036:	4604      	mov	r4, r0
 800c038:	2301      	movs	r3, #1
 800c03a:	e7f0      	b.n	800c01e <_svfiprintf_r+0x192>
 800c03c:	ab03      	add	r3, sp, #12
 800c03e:	9300      	str	r3, [sp, #0]
 800c040:	462a      	mov	r2, r5
 800c042:	4b0e      	ldr	r3, [pc, #56]	@ (800c07c <_svfiprintf_r+0x1f0>)
 800c044:	a904      	add	r1, sp, #16
 800c046:	4638      	mov	r0, r7
 800c048:	f3af 8000 	nop.w
 800c04c:	1c42      	adds	r2, r0, #1
 800c04e:	4606      	mov	r6, r0
 800c050:	d1d6      	bne.n	800c000 <_svfiprintf_r+0x174>
 800c052:	89ab      	ldrh	r3, [r5, #12]
 800c054:	065b      	lsls	r3, r3, #25
 800c056:	f53f af2d 	bmi.w	800beb4 <_svfiprintf_r+0x28>
 800c05a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c05c:	e72c      	b.n	800beb8 <_svfiprintf_r+0x2c>
 800c05e:	ab03      	add	r3, sp, #12
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	462a      	mov	r2, r5
 800c064:	4b05      	ldr	r3, [pc, #20]	@ (800c07c <_svfiprintf_r+0x1f0>)
 800c066:	a904      	add	r1, sp, #16
 800c068:	4638      	mov	r0, r7
 800c06a:	f000 f879 	bl	800c160 <_printf_i>
 800c06e:	e7ed      	b.n	800c04c <_svfiprintf_r+0x1c0>
 800c070:	0800ce03 	.word	0x0800ce03
 800c074:	0800ce0d 	.word	0x0800ce0d
 800c078:	00000000 	.word	0x00000000
 800c07c:	0800bdd7 	.word	0x0800bdd7
 800c080:	0800ce09 	.word	0x0800ce09

0800c084 <_printf_common>:
 800c084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c088:	4616      	mov	r6, r2
 800c08a:	4698      	mov	r8, r3
 800c08c:	688a      	ldr	r2, [r1, #8]
 800c08e:	690b      	ldr	r3, [r1, #16]
 800c090:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c094:	4293      	cmp	r3, r2
 800c096:	bfb8      	it	lt
 800c098:	4613      	movlt	r3, r2
 800c09a:	6033      	str	r3, [r6, #0]
 800c09c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c0a0:	4607      	mov	r7, r0
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	b10a      	cbz	r2, 800c0aa <_printf_common+0x26>
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	6033      	str	r3, [r6, #0]
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	0699      	lsls	r1, r3, #26
 800c0ae:	bf42      	ittt	mi
 800c0b0:	6833      	ldrmi	r3, [r6, #0]
 800c0b2:	3302      	addmi	r3, #2
 800c0b4:	6033      	strmi	r3, [r6, #0]
 800c0b6:	6825      	ldr	r5, [r4, #0]
 800c0b8:	f015 0506 	ands.w	r5, r5, #6
 800c0bc:	d106      	bne.n	800c0cc <_printf_common+0x48>
 800c0be:	f104 0a19 	add.w	sl, r4, #25
 800c0c2:	68e3      	ldr	r3, [r4, #12]
 800c0c4:	6832      	ldr	r2, [r6, #0]
 800c0c6:	1a9b      	subs	r3, r3, r2
 800c0c8:	42ab      	cmp	r3, r5
 800c0ca:	dc26      	bgt.n	800c11a <_printf_common+0x96>
 800c0cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c0d0:	6822      	ldr	r2, [r4, #0]
 800c0d2:	3b00      	subs	r3, #0
 800c0d4:	bf18      	it	ne
 800c0d6:	2301      	movne	r3, #1
 800c0d8:	0692      	lsls	r2, r2, #26
 800c0da:	d42b      	bmi.n	800c134 <_printf_common+0xb0>
 800c0dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c0e0:	4641      	mov	r1, r8
 800c0e2:	4638      	mov	r0, r7
 800c0e4:	47c8      	blx	r9
 800c0e6:	3001      	adds	r0, #1
 800c0e8:	d01e      	beq.n	800c128 <_printf_common+0xa4>
 800c0ea:	6823      	ldr	r3, [r4, #0]
 800c0ec:	6922      	ldr	r2, [r4, #16]
 800c0ee:	f003 0306 	and.w	r3, r3, #6
 800c0f2:	2b04      	cmp	r3, #4
 800c0f4:	bf02      	ittt	eq
 800c0f6:	68e5      	ldreq	r5, [r4, #12]
 800c0f8:	6833      	ldreq	r3, [r6, #0]
 800c0fa:	1aed      	subeq	r5, r5, r3
 800c0fc:	68a3      	ldr	r3, [r4, #8]
 800c0fe:	bf0c      	ite	eq
 800c100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c104:	2500      	movne	r5, #0
 800c106:	4293      	cmp	r3, r2
 800c108:	bfc4      	itt	gt
 800c10a:	1a9b      	subgt	r3, r3, r2
 800c10c:	18ed      	addgt	r5, r5, r3
 800c10e:	2600      	movs	r6, #0
 800c110:	341a      	adds	r4, #26
 800c112:	42b5      	cmp	r5, r6
 800c114:	d11a      	bne.n	800c14c <_printf_common+0xc8>
 800c116:	2000      	movs	r0, #0
 800c118:	e008      	b.n	800c12c <_printf_common+0xa8>
 800c11a:	2301      	movs	r3, #1
 800c11c:	4652      	mov	r2, sl
 800c11e:	4641      	mov	r1, r8
 800c120:	4638      	mov	r0, r7
 800c122:	47c8      	blx	r9
 800c124:	3001      	adds	r0, #1
 800c126:	d103      	bne.n	800c130 <_printf_common+0xac>
 800c128:	f04f 30ff 	mov.w	r0, #4294967295
 800c12c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c130:	3501      	adds	r5, #1
 800c132:	e7c6      	b.n	800c0c2 <_printf_common+0x3e>
 800c134:	18e1      	adds	r1, r4, r3
 800c136:	1c5a      	adds	r2, r3, #1
 800c138:	2030      	movs	r0, #48	@ 0x30
 800c13a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c13e:	4422      	add	r2, r4
 800c140:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c144:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c148:	3302      	adds	r3, #2
 800c14a:	e7c7      	b.n	800c0dc <_printf_common+0x58>
 800c14c:	2301      	movs	r3, #1
 800c14e:	4622      	mov	r2, r4
 800c150:	4641      	mov	r1, r8
 800c152:	4638      	mov	r0, r7
 800c154:	47c8      	blx	r9
 800c156:	3001      	adds	r0, #1
 800c158:	d0e6      	beq.n	800c128 <_printf_common+0xa4>
 800c15a:	3601      	adds	r6, #1
 800c15c:	e7d9      	b.n	800c112 <_printf_common+0x8e>
	...

0800c160 <_printf_i>:
 800c160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c164:	7e0f      	ldrb	r7, [r1, #24]
 800c166:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c168:	2f78      	cmp	r7, #120	@ 0x78
 800c16a:	4691      	mov	r9, r2
 800c16c:	4680      	mov	r8, r0
 800c16e:	460c      	mov	r4, r1
 800c170:	469a      	mov	sl, r3
 800c172:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c176:	d807      	bhi.n	800c188 <_printf_i+0x28>
 800c178:	2f62      	cmp	r7, #98	@ 0x62
 800c17a:	d80a      	bhi.n	800c192 <_printf_i+0x32>
 800c17c:	2f00      	cmp	r7, #0
 800c17e:	f000 80d1 	beq.w	800c324 <_printf_i+0x1c4>
 800c182:	2f58      	cmp	r7, #88	@ 0x58
 800c184:	f000 80b8 	beq.w	800c2f8 <_printf_i+0x198>
 800c188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c18c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c190:	e03a      	b.n	800c208 <_printf_i+0xa8>
 800c192:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c196:	2b15      	cmp	r3, #21
 800c198:	d8f6      	bhi.n	800c188 <_printf_i+0x28>
 800c19a:	a101      	add	r1, pc, #4	@ (adr r1, 800c1a0 <_printf_i+0x40>)
 800c19c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1a0:	0800c1f9 	.word	0x0800c1f9
 800c1a4:	0800c20d 	.word	0x0800c20d
 800c1a8:	0800c189 	.word	0x0800c189
 800c1ac:	0800c189 	.word	0x0800c189
 800c1b0:	0800c189 	.word	0x0800c189
 800c1b4:	0800c189 	.word	0x0800c189
 800c1b8:	0800c20d 	.word	0x0800c20d
 800c1bc:	0800c189 	.word	0x0800c189
 800c1c0:	0800c189 	.word	0x0800c189
 800c1c4:	0800c189 	.word	0x0800c189
 800c1c8:	0800c189 	.word	0x0800c189
 800c1cc:	0800c30b 	.word	0x0800c30b
 800c1d0:	0800c237 	.word	0x0800c237
 800c1d4:	0800c2c5 	.word	0x0800c2c5
 800c1d8:	0800c189 	.word	0x0800c189
 800c1dc:	0800c189 	.word	0x0800c189
 800c1e0:	0800c32d 	.word	0x0800c32d
 800c1e4:	0800c189 	.word	0x0800c189
 800c1e8:	0800c237 	.word	0x0800c237
 800c1ec:	0800c189 	.word	0x0800c189
 800c1f0:	0800c189 	.word	0x0800c189
 800c1f4:	0800c2cd 	.word	0x0800c2cd
 800c1f8:	6833      	ldr	r3, [r6, #0]
 800c1fa:	1d1a      	adds	r2, r3, #4
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	6032      	str	r2, [r6, #0]
 800c200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c204:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c208:	2301      	movs	r3, #1
 800c20a:	e09c      	b.n	800c346 <_printf_i+0x1e6>
 800c20c:	6833      	ldr	r3, [r6, #0]
 800c20e:	6820      	ldr	r0, [r4, #0]
 800c210:	1d19      	adds	r1, r3, #4
 800c212:	6031      	str	r1, [r6, #0]
 800c214:	0606      	lsls	r6, r0, #24
 800c216:	d501      	bpl.n	800c21c <_printf_i+0xbc>
 800c218:	681d      	ldr	r5, [r3, #0]
 800c21a:	e003      	b.n	800c224 <_printf_i+0xc4>
 800c21c:	0645      	lsls	r5, r0, #25
 800c21e:	d5fb      	bpl.n	800c218 <_printf_i+0xb8>
 800c220:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c224:	2d00      	cmp	r5, #0
 800c226:	da03      	bge.n	800c230 <_printf_i+0xd0>
 800c228:	232d      	movs	r3, #45	@ 0x2d
 800c22a:	426d      	negs	r5, r5
 800c22c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c230:	4858      	ldr	r0, [pc, #352]	@ (800c394 <_printf_i+0x234>)
 800c232:	230a      	movs	r3, #10
 800c234:	e011      	b.n	800c25a <_printf_i+0xfa>
 800c236:	6821      	ldr	r1, [r4, #0]
 800c238:	6833      	ldr	r3, [r6, #0]
 800c23a:	0608      	lsls	r0, r1, #24
 800c23c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c240:	d402      	bmi.n	800c248 <_printf_i+0xe8>
 800c242:	0649      	lsls	r1, r1, #25
 800c244:	bf48      	it	mi
 800c246:	b2ad      	uxthmi	r5, r5
 800c248:	2f6f      	cmp	r7, #111	@ 0x6f
 800c24a:	4852      	ldr	r0, [pc, #328]	@ (800c394 <_printf_i+0x234>)
 800c24c:	6033      	str	r3, [r6, #0]
 800c24e:	bf14      	ite	ne
 800c250:	230a      	movne	r3, #10
 800c252:	2308      	moveq	r3, #8
 800c254:	2100      	movs	r1, #0
 800c256:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c25a:	6866      	ldr	r6, [r4, #4]
 800c25c:	60a6      	str	r6, [r4, #8]
 800c25e:	2e00      	cmp	r6, #0
 800c260:	db05      	blt.n	800c26e <_printf_i+0x10e>
 800c262:	6821      	ldr	r1, [r4, #0]
 800c264:	432e      	orrs	r6, r5
 800c266:	f021 0104 	bic.w	r1, r1, #4
 800c26a:	6021      	str	r1, [r4, #0]
 800c26c:	d04b      	beq.n	800c306 <_printf_i+0x1a6>
 800c26e:	4616      	mov	r6, r2
 800c270:	fbb5 f1f3 	udiv	r1, r5, r3
 800c274:	fb03 5711 	mls	r7, r3, r1, r5
 800c278:	5dc7      	ldrb	r7, [r0, r7]
 800c27a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c27e:	462f      	mov	r7, r5
 800c280:	42bb      	cmp	r3, r7
 800c282:	460d      	mov	r5, r1
 800c284:	d9f4      	bls.n	800c270 <_printf_i+0x110>
 800c286:	2b08      	cmp	r3, #8
 800c288:	d10b      	bne.n	800c2a2 <_printf_i+0x142>
 800c28a:	6823      	ldr	r3, [r4, #0]
 800c28c:	07df      	lsls	r7, r3, #31
 800c28e:	d508      	bpl.n	800c2a2 <_printf_i+0x142>
 800c290:	6923      	ldr	r3, [r4, #16]
 800c292:	6861      	ldr	r1, [r4, #4]
 800c294:	4299      	cmp	r1, r3
 800c296:	bfde      	ittt	le
 800c298:	2330      	movle	r3, #48	@ 0x30
 800c29a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c29e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c2a2:	1b92      	subs	r2, r2, r6
 800c2a4:	6122      	str	r2, [r4, #16]
 800c2a6:	f8cd a000 	str.w	sl, [sp]
 800c2aa:	464b      	mov	r3, r9
 800c2ac:	aa03      	add	r2, sp, #12
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	4640      	mov	r0, r8
 800c2b2:	f7ff fee7 	bl	800c084 <_printf_common>
 800c2b6:	3001      	adds	r0, #1
 800c2b8:	d14a      	bne.n	800c350 <_printf_i+0x1f0>
 800c2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c2be:	b004      	add	sp, #16
 800c2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2c4:	6823      	ldr	r3, [r4, #0]
 800c2c6:	f043 0320 	orr.w	r3, r3, #32
 800c2ca:	6023      	str	r3, [r4, #0]
 800c2cc:	4832      	ldr	r0, [pc, #200]	@ (800c398 <_printf_i+0x238>)
 800c2ce:	2778      	movs	r7, #120	@ 0x78
 800c2d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c2d4:	6823      	ldr	r3, [r4, #0]
 800c2d6:	6831      	ldr	r1, [r6, #0]
 800c2d8:	061f      	lsls	r7, r3, #24
 800c2da:	f851 5b04 	ldr.w	r5, [r1], #4
 800c2de:	d402      	bmi.n	800c2e6 <_printf_i+0x186>
 800c2e0:	065f      	lsls	r7, r3, #25
 800c2e2:	bf48      	it	mi
 800c2e4:	b2ad      	uxthmi	r5, r5
 800c2e6:	6031      	str	r1, [r6, #0]
 800c2e8:	07d9      	lsls	r1, r3, #31
 800c2ea:	bf44      	itt	mi
 800c2ec:	f043 0320 	orrmi.w	r3, r3, #32
 800c2f0:	6023      	strmi	r3, [r4, #0]
 800c2f2:	b11d      	cbz	r5, 800c2fc <_printf_i+0x19c>
 800c2f4:	2310      	movs	r3, #16
 800c2f6:	e7ad      	b.n	800c254 <_printf_i+0xf4>
 800c2f8:	4826      	ldr	r0, [pc, #152]	@ (800c394 <_printf_i+0x234>)
 800c2fa:	e7e9      	b.n	800c2d0 <_printf_i+0x170>
 800c2fc:	6823      	ldr	r3, [r4, #0]
 800c2fe:	f023 0320 	bic.w	r3, r3, #32
 800c302:	6023      	str	r3, [r4, #0]
 800c304:	e7f6      	b.n	800c2f4 <_printf_i+0x194>
 800c306:	4616      	mov	r6, r2
 800c308:	e7bd      	b.n	800c286 <_printf_i+0x126>
 800c30a:	6833      	ldr	r3, [r6, #0]
 800c30c:	6825      	ldr	r5, [r4, #0]
 800c30e:	6961      	ldr	r1, [r4, #20]
 800c310:	1d18      	adds	r0, r3, #4
 800c312:	6030      	str	r0, [r6, #0]
 800c314:	062e      	lsls	r6, r5, #24
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	d501      	bpl.n	800c31e <_printf_i+0x1be>
 800c31a:	6019      	str	r1, [r3, #0]
 800c31c:	e002      	b.n	800c324 <_printf_i+0x1c4>
 800c31e:	0668      	lsls	r0, r5, #25
 800c320:	d5fb      	bpl.n	800c31a <_printf_i+0x1ba>
 800c322:	8019      	strh	r1, [r3, #0]
 800c324:	2300      	movs	r3, #0
 800c326:	6123      	str	r3, [r4, #16]
 800c328:	4616      	mov	r6, r2
 800c32a:	e7bc      	b.n	800c2a6 <_printf_i+0x146>
 800c32c:	6833      	ldr	r3, [r6, #0]
 800c32e:	1d1a      	adds	r2, r3, #4
 800c330:	6032      	str	r2, [r6, #0]
 800c332:	681e      	ldr	r6, [r3, #0]
 800c334:	6862      	ldr	r2, [r4, #4]
 800c336:	2100      	movs	r1, #0
 800c338:	4630      	mov	r0, r6
 800c33a:	f7f3 ff79 	bl	8000230 <memchr>
 800c33e:	b108      	cbz	r0, 800c344 <_printf_i+0x1e4>
 800c340:	1b80      	subs	r0, r0, r6
 800c342:	6060      	str	r0, [r4, #4]
 800c344:	6863      	ldr	r3, [r4, #4]
 800c346:	6123      	str	r3, [r4, #16]
 800c348:	2300      	movs	r3, #0
 800c34a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c34e:	e7aa      	b.n	800c2a6 <_printf_i+0x146>
 800c350:	6923      	ldr	r3, [r4, #16]
 800c352:	4632      	mov	r2, r6
 800c354:	4649      	mov	r1, r9
 800c356:	4640      	mov	r0, r8
 800c358:	47d0      	blx	sl
 800c35a:	3001      	adds	r0, #1
 800c35c:	d0ad      	beq.n	800c2ba <_printf_i+0x15a>
 800c35e:	6823      	ldr	r3, [r4, #0]
 800c360:	079b      	lsls	r3, r3, #30
 800c362:	d413      	bmi.n	800c38c <_printf_i+0x22c>
 800c364:	68e0      	ldr	r0, [r4, #12]
 800c366:	9b03      	ldr	r3, [sp, #12]
 800c368:	4298      	cmp	r0, r3
 800c36a:	bfb8      	it	lt
 800c36c:	4618      	movlt	r0, r3
 800c36e:	e7a6      	b.n	800c2be <_printf_i+0x15e>
 800c370:	2301      	movs	r3, #1
 800c372:	4632      	mov	r2, r6
 800c374:	4649      	mov	r1, r9
 800c376:	4640      	mov	r0, r8
 800c378:	47d0      	blx	sl
 800c37a:	3001      	adds	r0, #1
 800c37c:	d09d      	beq.n	800c2ba <_printf_i+0x15a>
 800c37e:	3501      	adds	r5, #1
 800c380:	68e3      	ldr	r3, [r4, #12]
 800c382:	9903      	ldr	r1, [sp, #12]
 800c384:	1a5b      	subs	r3, r3, r1
 800c386:	42ab      	cmp	r3, r5
 800c388:	dcf2      	bgt.n	800c370 <_printf_i+0x210>
 800c38a:	e7eb      	b.n	800c364 <_printf_i+0x204>
 800c38c:	2500      	movs	r5, #0
 800c38e:	f104 0619 	add.w	r6, r4, #25
 800c392:	e7f5      	b.n	800c380 <_printf_i+0x220>
 800c394:	0800ce14 	.word	0x0800ce14
 800c398:	0800ce25 	.word	0x0800ce25

0800c39c <__sflush_r>:
 800c39c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a4:	0716      	lsls	r6, r2, #28
 800c3a6:	4605      	mov	r5, r0
 800c3a8:	460c      	mov	r4, r1
 800c3aa:	d454      	bmi.n	800c456 <__sflush_r+0xba>
 800c3ac:	684b      	ldr	r3, [r1, #4]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	dc02      	bgt.n	800c3b8 <__sflush_r+0x1c>
 800c3b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	dd48      	ble.n	800c44a <__sflush_r+0xae>
 800c3b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3ba:	2e00      	cmp	r6, #0
 800c3bc:	d045      	beq.n	800c44a <__sflush_r+0xae>
 800c3be:	2300      	movs	r3, #0
 800c3c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c3c4:	682f      	ldr	r7, [r5, #0]
 800c3c6:	6a21      	ldr	r1, [r4, #32]
 800c3c8:	602b      	str	r3, [r5, #0]
 800c3ca:	d030      	beq.n	800c42e <__sflush_r+0x92>
 800c3cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c3ce:	89a3      	ldrh	r3, [r4, #12]
 800c3d0:	0759      	lsls	r1, r3, #29
 800c3d2:	d505      	bpl.n	800c3e0 <__sflush_r+0x44>
 800c3d4:	6863      	ldr	r3, [r4, #4]
 800c3d6:	1ad2      	subs	r2, r2, r3
 800c3d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c3da:	b10b      	cbz	r3, 800c3e0 <__sflush_r+0x44>
 800c3dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c3de:	1ad2      	subs	r2, r2, r3
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3e4:	6a21      	ldr	r1, [r4, #32]
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	47b0      	blx	r6
 800c3ea:	1c43      	adds	r3, r0, #1
 800c3ec:	89a3      	ldrh	r3, [r4, #12]
 800c3ee:	d106      	bne.n	800c3fe <__sflush_r+0x62>
 800c3f0:	6829      	ldr	r1, [r5, #0]
 800c3f2:	291d      	cmp	r1, #29
 800c3f4:	d82b      	bhi.n	800c44e <__sflush_r+0xb2>
 800c3f6:	4a2a      	ldr	r2, [pc, #168]	@ (800c4a0 <__sflush_r+0x104>)
 800c3f8:	40ca      	lsrs	r2, r1
 800c3fa:	07d6      	lsls	r6, r2, #31
 800c3fc:	d527      	bpl.n	800c44e <__sflush_r+0xb2>
 800c3fe:	2200      	movs	r2, #0
 800c400:	6062      	str	r2, [r4, #4]
 800c402:	04d9      	lsls	r1, r3, #19
 800c404:	6922      	ldr	r2, [r4, #16]
 800c406:	6022      	str	r2, [r4, #0]
 800c408:	d504      	bpl.n	800c414 <__sflush_r+0x78>
 800c40a:	1c42      	adds	r2, r0, #1
 800c40c:	d101      	bne.n	800c412 <__sflush_r+0x76>
 800c40e:	682b      	ldr	r3, [r5, #0]
 800c410:	b903      	cbnz	r3, 800c414 <__sflush_r+0x78>
 800c412:	6560      	str	r0, [r4, #84]	@ 0x54
 800c414:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c416:	602f      	str	r7, [r5, #0]
 800c418:	b1b9      	cbz	r1, 800c44a <__sflush_r+0xae>
 800c41a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c41e:	4299      	cmp	r1, r3
 800c420:	d002      	beq.n	800c428 <__sflush_r+0x8c>
 800c422:	4628      	mov	r0, r5
 800c424:	f7fe fbdc 	bl	800abe0 <_free_r>
 800c428:	2300      	movs	r3, #0
 800c42a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c42c:	e00d      	b.n	800c44a <__sflush_r+0xae>
 800c42e:	2301      	movs	r3, #1
 800c430:	4628      	mov	r0, r5
 800c432:	47b0      	blx	r6
 800c434:	4602      	mov	r2, r0
 800c436:	1c50      	adds	r0, r2, #1
 800c438:	d1c9      	bne.n	800c3ce <__sflush_r+0x32>
 800c43a:	682b      	ldr	r3, [r5, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d0c6      	beq.n	800c3ce <__sflush_r+0x32>
 800c440:	2b1d      	cmp	r3, #29
 800c442:	d001      	beq.n	800c448 <__sflush_r+0xac>
 800c444:	2b16      	cmp	r3, #22
 800c446:	d11e      	bne.n	800c486 <__sflush_r+0xea>
 800c448:	602f      	str	r7, [r5, #0]
 800c44a:	2000      	movs	r0, #0
 800c44c:	e022      	b.n	800c494 <__sflush_r+0xf8>
 800c44e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c452:	b21b      	sxth	r3, r3
 800c454:	e01b      	b.n	800c48e <__sflush_r+0xf2>
 800c456:	690f      	ldr	r7, [r1, #16]
 800c458:	2f00      	cmp	r7, #0
 800c45a:	d0f6      	beq.n	800c44a <__sflush_r+0xae>
 800c45c:	0793      	lsls	r3, r2, #30
 800c45e:	680e      	ldr	r6, [r1, #0]
 800c460:	bf08      	it	eq
 800c462:	694b      	ldreq	r3, [r1, #20]
 800c464:	600f      	str	r7, [r1, #0]
 800c466:	bf18      	it	ne
 800c468:	2300      	movne	r3, #0
 800c46a:	eba6 0807 	sub.w	r8, r6, r7
 800c46e:	608b      	str	r3, [r1, #8]
 800c470:	f1b8 0f00 	cmp.w	r8, #0
 800c474:	dde9      	ble.n	800c44a <__sflush_r+0xae>
 800c476:	6a21      	ldr	r1, [r4, #32]
 800c478:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c47a:	4643      	mov	r3, r8
 800c47c:	463a      	mov	r2, r7
 800c47e:	4628      	mov	r0, r5
 800c480:	47b0      	blx	r6
 800c482:	2800      	cmp	r0, #0
 800c484:	dc08      	bgt.n	800c498 <__sflush_r+0xfc>
 800c486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c48a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c48e:	81a3      	strh	r3, [r4, #12]
 800c490:	f04f 30ff 	mov.w	r0, #4294967295
 800c494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c498:	4407      	add	r7, r0
 800c49a:	eba8 0800 	sub.w	r8, r8, r0
 800c49e:	e7e7      	b.n	800c470 <__sflush_r+0xd4>
 800c4a0:	20400001 	.word	0x20400001

0800c4a4 <_fflush_r>:
 800c4a4:	b538      	push	{r3, r4, r5, lr}
 800c4a6:	690b      	ldr	r3, [r1, #16]
 800c4a8:	4605      	mov	r5, r0
 800c4aa:	460c      	mov	r4, r1
 800c4ac:	b913      	cbnz	r3, 800c4b4 <_fflush_r+0x10>
 800c4ae:	2500      	movs	r5, #0
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	bd38      	pop	{r3, r4, r5, pc}
 800c4b4:	b118      	cbz	r0, 800c4be <_fflush_r+0x1a>
 800c4b6:	6a03      	ldr	r3, [r0, #32]
 800c4b8:	b90b      	cbnz	r3, 800c4be <_fflush_r+0x1a>
 800c4ba:	f7fe f9fd 	bl	800a8b8 <__sinit>
 800c4be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d0f3      	beq.n	800c4ae <_fflush_r+0xa>
 800c4c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c4c8:	07d0      	lsls	r0, r2, #31
 800c4ca:	d404      	bmi.n	800c4d6 <_fflush_r+0x32>
 800c4cc:	0599      	lsls	r1, r3, #22
 800c4ce:	d402      	bmi.n	800c4d6 <_fflush_r+0x32>
 800c4d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4d2:	f7fe fb6a 	bl	800abaa <__retarget_lock_acquire_recursive>
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	4621      	mov	r1, r4
 800c4da:	f7ff ff5f 	bl	800c39c <__sflush_r>
 800c4de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c4e0:	07da      	lsls	r2, r3, #31
 800c4e2:	4605      	mov	r5, r0
 800c4e4:	d4e4      	bmi.n	800c4b0 <_fflush_r+0xc>
 800c4e6:	89a3      	ldrh	r3, [r4, #12]
 800c4e8:	059b      	lsls	r3, r3, #22
 800c4ea:	d4e1      	bmi.n	800c4b0 <_fflush_r+0xc>
 800c4ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4ee:	f7fe fb5d 	bl	800abac <__retarget_lock_release_recursive>
 800c4f2:	e7dd      	b.n	800c4b0 <_fflush_r+0xc>

0800c4f4 <memmove>:
 800c4f4:	4288      	cmp	r0, r1
 800c4f6:	b510      	push	{r4, lr}
 800c4f8:	eb01 0402 	add.w	r4, r1, r2
 800c4fc:	d902      	bls.n	800c504 <memmove+0x10>
 800c4fe:	4284      	cmp	r4, r0
 800c500:	4623      	mov	r3, r4
 800c502:	d807      	bhi.n	800c514 <memmove+0x20>
 800c504:	1e43      	subs	r3, r0, #1
 800c506:	42a1      	cmp	r1, r4
 800c508:	d008      	beq.n	800c51c <memmove+0x28>
 800c50a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c50e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c512:	e7f8      	b.n	800c506 <memmove+0x12>
 800c514:	4402      	add	r2, r0
 800c516:	4601      	mov	r1, r0
 800c518:	428a      	cmp	r2, r1
 800c51a:	d100      	bne.n	800c51e <memmove+0x2a>
 800c51c:	bd10      	pop	{r4, pc}
 800c51e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c522:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c526:	e7f7      	b.n	800c518 <memmove+0x24>

0800c528 <_sbrk_r>:
 800c528:	b538      	push	{r3, r4, r5, lr}
 800c52a:	4d06      	ldr	r5, [pc, #24]	@ (800c544 <_sbrk_r+0x1c>)
 800c52c:	2300      	movs	r3, #0
 800c52e:	4604      	mov	r4, r0
 800c530:	4608      	mov	r0, r1
 800c532:	602b      	str	r3, [r5, #0]
 800c534:	f7f5 ffd8 	bl	80024e8 <_sbrk>
 800c538:	1c43      	adds	r3, r0, #1
 800c53a:	d102      	bne.n	800c542 <_sbrk_r+0x1a>
 800c53c:	682b      	ldr	r3, [r5, #0]
 800c53e:	b103      	cbz	r3, 800c542 <_sbrk_r+0x1a>
 800c540:	6023      	str	r3, [r4, #0]
 800c542:	bd38      	pop	{r3, r4, r5, pc}
 800c544:	20005384 	.word	0x20005384

0800c548 <__assert_func>:
 800c548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c54a:	4614      	mov	r4, r2
 800c54c:	461a      	mov	r2, r3
 800c54e:	4b09      	ldr	r3, [pc, #36]	@ (800c574 <__assert_func+0x2c>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4605      	mov	r5, r0
 800c554:	68d8      	ldr	r0, [r3, #12]
 800c556:	b14c      	cbz	r4, 800c56c <__assert_func+0x24>
 800c558:	4b07      	ldr	r3, [pc, #28]	@ (800c578 <__assert_func+0x30>)
 800c55a:	9100      	str	r1, [sp, #0]
 800c55c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c560:	4906      	ldr	r1, [pc, #24]	@ (800c57c <__assert_func+0x34>)
 800c562:	462b      	mov	r3, r5
 800c564:	f000 f858 	bl	800c618 <fiprintf>
 800c568:	f000 f868 	bl	800c63c <abort>
 800c56c:	4b04      	ldr	r3, [pc, #16]	@ (800c580 <__assert_func+0x38>)
 800c56e:	461c      	mov	r4, r3
 800c570:	e7f3      	b.n	800c55a <__assert_func+0x12>
 800c572:	bf00      	nop
 800c574:	200001d8 	.word	0x200001d8
 800c578:	0800ce36 	.word	0x0800ce36
 800c57c:	0800ce43 	.word	0x0800ce43
 800c580:	0800ce71 	.word	0x0800ce71

0800c584 <_calloc_r>:
 800c584:	b570      	push	{r4, r5, r6, lr}
 800c586:	fba1 5402 	umull	r5, r4, r1, r2
 800c58a:	b934      	cbnz	r4, 800c59a <_calloc_r+0x16>
 800c58c:	4629      	mov	r1, r5
 800c58e:	f7fe fecd 	bl	800b32c <_malloc_r>
 800c592:	4606      	mov	r6, r0
 800c594:	b928      	cbnz	r0, 800c5a2 <_calloc_r+0x1e>
 800c596:	4630      	mov	r0, r6
 800c598:	bd70      	pop	{r4, r5, r6, pc}
 800c59a:	220c      	movs	r2, #12
 800c59c:	6002      	str	r2, [r0, #0]
 800c59e:	2600      	movs	r6, #0
 800c5a0:	e7f9      	b.n	800c596 <_calloc_r+0x12>
 800c5a2:	462a      	mov	r2, r5
 800c5a4:	4621      	mov	r1, r4
 800c5a6:	f7fe fa36 	bl	800aa16 <memset>
 800c5aa:	e7f4      	b.n	800c596 <_calloc_r+0x12>

0800c5ac <malloc>:
 800c5ac:	4b02      	ldr	r3, [pc, #8]	@ (800c5b8 <malloc+0xc>)
 800c5ae:	4601      	mov	r1, r0
 800c5b0:	6818      	ldr	r0, [r3, #0]
 800c5b2:	f7fe bebb 	b.w	800b32c <_malloc_r>
 800c5b6:	bf00      	nop
 800c5b8:	200001d8 	.word	0x200001d8

0800c5bc <_realloc_r>:
 800c5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c0:	4607      	mov	r7, r0
 800c5c2:	4614      	mov	r4, r2
 800c5c4:	460d      	mov	r5, r1
 800c5c6:	b921      	cbnz	r1, 800c5d2 <_realloc_r+0x16>
 800c5c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5cc:	4611      	mov	r1, r2
 800c5ce:	f7fe bead 	b.w	800b32c <_malloc_r>
 800c5d2:	b92a      	cbnz	r2, 800c5e0 <_realloc_r+0x24>
 800c5d4:	f7fe fb04 	bl	800abe0 <_free_r>
 800c5d8:	4625      	mov	r5, r4
 800c5da:	4628      	mov	r0, r5
 800c5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5e0:	f000 f833 	bl	800c64a <_malloc_usable_size_r>
 800c5e4:	4284      	cmp	r4, r0
 800c5e6:	4606      	mov	r6, r0
 800c5e8:	d802      	bhi.n	800c5f0 <_realloc_r+0x34>
 800c5ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c5ee:	d8f4      	bhi.n	800c5da <_realloc_r+0x1e>
 800c5f0:	4621      	mov	r1, r4
 800c5f2:	4638      	mov	r0, r7
 800c5f4:	f7fe fe9a 	bl	800b32c <_malloc_r>
 800c5f8:	4680      	mov	r8, r0
 800c5fa:	b908      	cbnz	r0, 800c600 <_realloc_r+0x44>
 800c5fc:	4645      	mov	r5, r8
 800c5fe:	e7ec      	b.n	800c5da <_realloc_r+0x1e>
 800c600:	42b4      	cmp	r4, r6
 800c602:	4622      	mov	r2, r4
 800c604:	4629      	mov	r1, r5
 800c606:	bf28      	it	cs
 800c608:	4632      	movcs	r2, r6
 800c60a:	f7fe fad0 	bl	800abae <memcpy>
 800c60e:	4629      	mov	r1, r5
 800c610:	4638      	mov	r0, r7
 800c612:	f7fe fae5 	bl	800abe0 <_free_r>
 800c616:	e7f1      	b.n	800c5fc <_realloc_r+0x40>

0800c618 <fiprintf>:
 800c618:	b40e      	push	{r1, r2, r3}
 800c61a:	b503      	push	{r0, r1, lr}
 800c61c:	4601      	mov	r1, r0
 800c61e:	ab03      	add	r3, sp, #12
 800c620:	4805      	ldr	r0, [pc, #20]	@ (800c638 <fiprintf+0x20>)
 800c622:	f853 2b04 	ldr.w	r2, [r3], #4
 800c626:	6800      	ldr	r0, [r0, #0]
 800c628:	9301      	str	r3, [sp, #4]
 800c62a:	f000 f83f 	bl	800c6ac <_vfiprintf_r>
 800c62e:	b002      	add	sp, #8
 800c630:	f85d eb04 	ldr.w	lr, [sp], #4
 800c634:	b003      	add	sp, #12
 800c636:	4770      	bx	lr
 800c638:	200001d8 	.word	0x200001d8

0800c63c <abort>:
 800c63c:	b508      	push	{r3, lr}
 800c63e:	2006      	movs	r0, #6
 800c640:	f000 fa08 	bl	800ca54 <raise>
 800c644:	2001      	movs	r0, #1
 800c646:	f7f5 fed7 	bl	80023f8 <_exit>

0800c64a <_malloc_usable_size_r>:
 800c64a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c64e:	1f18      	subs	r0, r3, #4
 800c650:	2b00      	cmp	r3, #0
 800c652:	bfbc      	itt	lt
 800c654:	580b      	ldrlt	r3, [r1, r0]
 800c656:	18c0      	addlt	r0, r0, r3
 800c658:	4770      	bx	lr

0800c65a <__sfputc_r>:
 800c65a:	6893      	ldr	r3, [r2, #8]
 800c65c:	3b01      	subs	r3, #1
 800c65e:	2b00      	cmp	r3, #0
 800c660:	b410      	push	{r4}
 800c662:	6093      	str	r3, [r2, #8]
 800c664:	da08      	bge.n	800c678 <__sfputc_r+0x1e>
 800c666:	6994      	ldr	r4, [r2, #24]
 800c668:	42a3      	cmp	r3, r4
 800c66a:	db01      	blt.n	800c670 <__sfputc_r+0x16>
 800c66c:	290a      	cmp	r1, #10
 800c66e:	d103      	bne.n	800c678 <__sfputc_r+0x1e>
 800c670:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c674:	f000 b932 	b.w	800c8dc <__swbuf_r>
 800c678:	6813      	ldr	r3, [r2, #0]
 800c67a:	1c58      	adds	r0, r3, #1
 800c67c:	6010      	str	r0, [r2, #0]
 800c67e:	7019      	strb	r1, [r3, #0]
 800c680:	4608      	mov	r0, r1
 800c682:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <__sfputs_r>:
 800c688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c68a:	4606      	mov	r6, r0
 800c68c:	460f      	mov	r7, r1
 800c68e:	4614      	mov	r4, r2
 800c690:	18d5      	adds	r5, r2, r3
 800c692:	42ac      	cmp	r4, r5
 800c694:	d101      	bne.n	800c69a <__sfputs_r+0x12>
 800c696:	2000      	movs	r0, #0
 800c698:	e007      	b.n	800c6aa <__sfputs_r+0x22>
 800c69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c69e:	463a      	mov	r2, r7
 800c6a0:	4630      	mov	r0, r6
 800c6a2:	f7ff ffda 	bl	800c65a <__sfputc_r>
 800c6a6:	1c43      	adds	r3, r0, #1
 800c6a8:	d1f3      	bne.n	800c692 <__sfputs_r+0xa>
 800c6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c6ac <_vfiprintf_r>:
 800c6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b0:	460d      	mov	r5, r1
 800c6b2:	b09d      	sub	sp, #116	@ 0x74
 800c6b4:	4614      	mov	r4, r2
 800c6b6:	4698      	mov	r8, r3
 800c6b8:	4606      	mov	r6, r0
 800c6ba:	b118      	cbz	r0, 800c6c4 <_vfiprintf_r+0x18>
 800c6bc:	6a03      	ldr	r3, [r0, #32]
 800c6be:	b90b      	cbnz	r3, 800c6c4 <_vfiprintf_r+0x18>
 800c6c0:	f7fe f8fa 	bl	800a8b8 <__sinit>
 800c6c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6c6:	07d9      	lsls	r1, r3, #31
 800c6c8:	d405      	bmi.n	800c6d6 <_vfiprintf_r+0x2a>
 800c6ca:	89ab      	ldrh	r3, [r5, #12]
 800c6cc:	059a      	lsls	r2, r3, #22
 800c6ce:	d402      	bmi.n	800c6d6 <_vfiprintf_r+0x2a>
 800c6d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6d2:	f7fe fa6a 	bl	800abaa <__retarget_lock_acquire_recursive>
 800c6d6:	89ab      	ldrh	r3, [r5, #12]
 800c6d8:	071b      	lsls	r3, r3, #28
 800c6da:	d501      	bpl.n	800c6e0 <_vfiprintf_r+0x34>
 800c6dc:	692b      	ldr	r3, [r5, #16]
 800c6de:	b99b      	cbnz	r3, 800c708 <_vfiprintf_r+0x5c>
 800c6e0:	4629      	mov	r1, r5
 800c6e2:	4630      	mov	r0, r6
 800c6e4:	f000 f938 	bl	800c958 <__swsetup_r>
 800c6e8:	b170      	cbz	r0, 800c708 <_vfiprintf_r+0x5c>
 800c6ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6ec:	07dc      	lsls	r4, r3, #31
 800c6ee:	d504      	bpl.n	800c6fa <_vfiprintf_r+0x4e>
 800c6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f4:	b01d      	add	sp, #116	@ 0x74
 800c6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6fa:	89ab      	ldrh	r3, [r5, #12]
 800c6fc:	0598      	lsls	r0, r3, #22
 800c6fe:	d4f7      	bmi.n	800c6f0 <_vfiprintf_r+0x44>
 800c700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c702:	f7fe fa53 	bl	800abac <__retarget_lock_release_recursive>
 800c706:	e7f3      	b.n	800c6f0 <_vfiprintf_r+0x44>
 800c708:	2300      	movs	r3, #0
 800c70a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c70c:	2320      	movs	r3, #32
 800c70e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c712:	f8cd 800c 	str.w	r8, [sp, #12]
 800c716:	2330      	movs	r3, #48	@ 0x30
 800c718:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c8c8 <_vfiprintf_r+0x21c>
 800c71c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c720:	f04f 0901 	mov.w	r9, #1
 800c724:	4623      	mov	r3, r4
 800c726:	469a      	mov	sl, r3
 800c728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c72c:	b10a      	cbz	r2, 800c732 <_vfiprintf_r+0x86>
 800c72e:	2a25      	cmp	r2, #37	@ 0x25
 800c730:	d1f9      	bne.n	800c726 <_vfiprintf_r+0x7a>
 800c732:	ebba 0b04 	subs.w	fp, sl, r4
 800c736:	d00b      	beq.n	800c750 <_vfiprintf_r+0xa4>
 800c738:	465b      	mov	r3, fp
 800c73a:	4622      	mov	r2, r4
 800c73c:	4629      	mov	r1, r5
 800c73e:	4630      	mov	r0, r6
 800c740:	f7ff ffa2 	bl	800c688 <__sfputs_r>
 800c744:	3001      	adds	r0, #1
 800c746:	f000 80a7 	beq.w	800c898 <_vfiprintf_r+0x1ec>
 800c74a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c74c:	445a      	add	r2, fp
 800c74e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c750:	f89a 3000 	ldrb.w	r3, [sl]
 800c754:	2b00      	cmp	r3, #0
 800c756:	f000 809f 	beq.w	800c898 <_vfiprintf_r+0x1ec>
 800c75a:	2300      	movs	r3, #0
 800c75c:	f04f 32ff 	mov.w	r2, #4294967295
 800c760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c764:	f10a 0a01 	add.w	sl, sl, #1
 800c768:	9304      	str	r3, [sp, #16]
 800c76a:	9307      	str	r3, [sp, #28]
 800c76c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c770:	931a      	str	r3, [sp, #104]	@ 0x68
 800c772:	4654      	mov	r4, sl
 800c774:	2205      	movs	r2, #5
 800c776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c77a:	4853      	ldr	r0, [pc, #332]	@ (800c8c8 <_vfiprintf_r+0x21c>)
 800c77c:	f7f3 fd58 	bl	8000230 <memchr>
 800c780:	9a04      	ldr	r2, [sp, #16]
 800c782:	b9d8      	cbnz	r0, 800c7bc <_vfiprintf_r+0x110>
 800c784:	06d1      	lsls	r1, r2, #27
 800c786:	bf44      	itt	mi
 800c788:	2320      	movmi	r3, #32
 800c78a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c78e:	0713      	lsls	r3, r2, #28
 800c790:	bf44      	itt	mi
 800c792:	232b      	movmi	r3, #43	@ 0x2b
 800c794:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c798:	f89a 3000 	ldrb.w	r3, [sl]
 800c79c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c79e:	d015      	beq.n	800c7cc <_vfiprintf_r+0x120>
 800c7a0:	9a07      	ldr	r2, [sp, #28]
 800c7a2:	4654      	mov	r4, sl
 800c7a4:	2000      	movs	r0, #0
 800c7a6:	f04f 0c0a 	mov.w	ip, #10
 800c7aa:	4621      	mov	r1, r4
 800c7ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7b0:	3b30      	subs	r3, #48	@ 0x30
 800c7b2:	2b09      	cmp	r3, #9
 800c7b4:	d94b      	bls.n	800c84e <_vfiprintf_r+0x1a2>
 800c7b6:	b1b0      	cbz	r0, 800c7e6 <_vfiprintf_r+0x13a>
 800c7b8:	9207      	str	r2, [sp, #28]
 800c7ba:	e014      	b.n	800c7e6 <_vfiprintf_r+0x13a>
 800c7bc:	eba0 0308 	sub.w	r3, r0, r8
 800c7c0:	fa09 f303 	lsl.w	r3, r9, r3
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	9304      	str	r3, [sp, #16]
 800c7c8:	46a2      	mov	sl, r4
 800c7ca:	e7d2      	b.n	800c772 <_vfiprintf_r+0xc6>
 800c7cc:	9b03      	ldr	r3, [sp, #12]
 800c7ce:	1d19      	adds	r1, r3, #4
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	9103      	str	r1, [sp, #12]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	bfbb      	ittet	lt
 800c7d8:	425b      	neglt	r3, r3
 800c7da:	f042 0202 	orrlt.w	r2, r2, #2
 800c7de:	9307      	strge	r3, [sp, #28]
 800c7e0:	9307      	strlt	r3, [sp, #28]
 800c7e2:	bfb8      	it	lt
 800c7e4:	9204      	strlt	r2, [sp, #16]
 800c7e6:	7823      	ldrb	r3, [r4, #0]
 800c7e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7ea:	d10a      	bne.n	800c802 <_vfiprintf_r+0x156>
 800c7ec:	7863      	ldrb	r3, [r4, #1]
 800c7ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7f0:	d132      	bne.n	800c858 <_vfiprintf_r+0x1ac>
 800c7f2:	9b03      	ldr	r3, [sp, #12]
 800c7f4:	1d1a      	adds	r2, r3, #4
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	9203      	str	r2, [sp, #12]
 800c7fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7fe:	3402      	adds	r4, #2
 800c800:	9305      	str	r3, [sp, #20]
 800c802:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c8d8 <_vfiprintf_r+0x22c>
 800c806:	7821      	ldrb	r1, [r4, #0]
 800c808:	2203      	movs	r2, #3
 800c80a:	4650      	mov	r0, sl
 800c80c:	f7f3 fd10 	bl	8000230 <memchr>
 800c810:	b138      	cbz	r0, 800c822 <_vfiprintf_r+0x176>
 800c812:	9b04      	ldr	r3, [sp, #16]
 800c814:	eba0 000a 	sub.w	r0, r0, sl
 800c818:	2240      	movs	r2, #64	@ 0x40
 800c81a:	4082      	lsls	r2, r0
 800c81c:	4313      	orrs	r3, r2
 800c81e:	3401      	adds	r4, #1
 800c820:	9304      	str	r3, [sp, #16]
 800c822:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c826:	4829      	ldr	r0, [pc, #164]	@ (800c8cc <_vfiprintf_r+0x220>)
 800c828:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c82c:	2206      	movs	r2, #6
 800c82e:	f7f3 fcff 	bl	8000230 <memchr>
 800c832:	2800      	cmp	r0, #0
 800c834:	d03f      	beq.n	800c8b6 <_vfiprintf_r+0x20a>
 800c836:	4b26      	ldr	r3, [pc, #152]	@ (800c8d0 <_vfiprintf_r+0x224>)
 800c838:	bb1b      	cbnz	r3, 800c882 <_vfiprintf_r+0x1d6>
 800c83a:	9b03      	ldr	r3, [sp, #12]
 800c83c:	3307      	adds	r3, #7
 800c83e:	f023 0307 	bic.w	r3, r3, #7
 800c842:	3308      	adds	r3, #8
 800c844:	9303      	str	r3, [sp, #12]
 800c846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c848:	443b      	add	r3, r7
 800c84a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c84c:	e76a      	b.n	800c724 <_vfiprintf_r+0x78>
 800c84e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c852:	460c      	mov	r4, r1
 800c854:	2001      	movs	r0, #1
 800c856:	e7a8      	b.n	800c7aa <_vfiprintf_r+0xfe>
 800c858:	2300      	movs	r3, #0
 800c85a:	3401      	adds	r4, #1
 800c85c:	9305      	str	r3, [sp, #20]
 800c85e:	4619      	mov	r1, r3
 800c860:	f04f 0c0a 	mov.w	ip, #10
 800c864:	4620      	mov	r0, r4
 800c866:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c86a:	3a30      	subs	r2, #48	@ 0x30
 800c86c:	2a09      	cmp	r2, #9
 800c86e:	d903      	bls.n	800c878 <_vfiprintf_r+0x1cc>
 800c870:	2b00      	cmp	r3, #0
 800c872:	d0c6      	beq.n	800c802 <_vfiprintf_r+0x156>
 800c874:	9105      	str	r1, [sp, #20]
 800c876:	e7c4      	b.n	800c802 <_vfiprintf_r+0x156>
 800c878:	fb0c 2101 	mla	r1, ip, r1, r2
 800c87c:	4604      	mov	r4, r0
 800c87e:	2301      	movs	r3, #1
 800c880:	e7f0      	b.n	800c864 <_vfiprintf_r+0x1b8>
 800c882:	ab03      	add	r3, sp, #12
 800c884:	9300      	str	r3, [sp, #0]
 800c886:	462a      	mov	r2, r5
 800c888:	4b12      	ldr	r3, [pc, #72]	@ (800c8d4 <_vfiprintf_r+0x228>)
 800c88a:	a904      	add	r1, sp, #16
 800c88c:	4630      	mov	r0, r6
 800c88e:	f3af 8000 	nop.w
 800c892:	4607      	mov	r7, r0
 800c894:	1c78      	adds	r0, r7, #1
 800c896:	d1d6      	bne.n	800c846 <_vfiprintf_r+0x19a>
 800c898:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c89a:	07d9      	lsls	r1, r3, #31
 800c89c:	d405      	bmi.n	800c8aa <_vfiprintf_r+0x1fe>
 800c89e:	89ab      	ldrh	r3, [r5, #12]
 800c8a0:	059a      	lsls	r2, r3, #22
 800c8a2:	d402      	bmi.n	800c8aa <_vfiprintf_r+0x1fe>
 800c8a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c8a6:	f7fe f981 	bl	800abac <__retarget_lock_release_recursive>
 800c8aa:	89ab      	ldrh	r3, [r5, #12]
 800c8ac:	065b      	lsls	r3, r3, #25
 800c8ae:	f53f af1f 	bmi.w	800c6f0 <_vfiprintf_r+0x44>
 800c8b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c8b4:	e71e      	b.n	800c6f4 <_vfiprintf_r+0x48>
 800c8b6:	ab03      	add	r3, sp, #12
 800c8b8:	9300      	str	r3, [sp, #0]
 800c8ba:	462a      	mov	r2, r5
 800c8bc:	4b05      	ldr	r3, [pc, #20]	@ (800c8d4 <_vfiprintf_r+0x228>)
 800c8be:	a904      	add	r1, sp, #16
 800c8c0:	4630      	mov	r0, r6
 800c8c2:	f7ff fc4d 	bl	800c160 <_printf_i>
 800c8c6:	e7e4      	b.n	800c892 <_vfiprintf_r+0x1e6>
 800c8c8:	0800ce03 	.word	0x0800ce03
 800c8cc:	0800ce0d 	.word	0x0800ce0d
 800c8d0:	00000000 	.word	0x00000000
 800c8d4:	0800c689 	.word	0x0800c689
 800c8d8:	0800ce09 	.word	0x0800ce09

0800c8dc <__swbuf_r>:
 800c8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8de:	460e      	mov	r6, r1
 800c8e0:	4614      	mov	r4, r2
 800c8e2:	4605      	mov	r5, r0
 800c8e4:	b118      	cbz	r0, 800c8ee <__swbuf_r+0x12>
 800c8e6:	6a03      	ldr	r3, [r0, #32]
 800c8e8:	b90b      	cbnz	r3, 800c8ee <__swbuf_r+0x12>
 800c8ea:	f7fd ffe5 	bl	800a8b8 <__sinit>
 800c8ee:	69a3      	ldr	r3, [r4, #24]
 800c8f0:	60a3      	str	r3, [r4, #8]
 800c8f2:	89a3      	ldrh	r3, [r4, #12]
 800c8f4:	071a      	lsls	r2, r3, #28
 800c8f6:	d501      	bpl.n	800c8fc <__swbuf_r+0x20>
 800c8f8:	6923      	ldr	r3, [r4, #16]
 800c8fa:	b943      	cbnz	r3, 800c90e <__swbuf_r+0x32>
 800c8fc:	4621      	mov	r1, r4
 800c8fe:	4628      	mov	r0, r5
 800c900:	f000 f82a 	bl	800c958 <__swsetup_r>
 800c904:	b118      	cbz	r0, 800c90e <__swbuf_r+0x32>
 800c906:	f04f 37ff 	mov.w	r7, #4294967295
 800c90a:	4638      	mov	r0, r7
 800c90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c90e:	6823      	ldr	r3, [r4, #0]
 800c910:	6922      	ldr	r2, [r4, #16]
 800c912:	1a98      	subs	r0, r3, r2
 800c914:	6963      	ldr	r3, [r4, #20]
 800c916:	b2f6      	uxtb	r6, r6
 800c918:	4283      	cmp	r3, r0
 800c91a:	4637      	mov	r7, r6
 800c91c:	dc05      	bgt.n	800c92a <__swbuf_r+0x4e>
 800c91e:	4621      	mov	r1, r4
 800c920:	4628      	mov	r0, r5
 800c922:	f7ff fdbf 	bl	800c4a4 <_fflush_r>
 800c926:	2800      	cmp	r0, #0
 800c928:	d1ed      	bne.n	800c906 <__swbuf_r+0x2a>
 800c92a:	68a3      	ldr	r3, [r4, #8]
 800c92c:	3b01      	subs	r3, #1
 800c92e:	60a3      	str	r3, [r4, #8]
 800c930:	6823      	ldr	r3, [r4, #0]
 800c932:	1c5a      	adds	r2, r3, #1
 800c934:	6022      	str	r2, [r4, #0]
 800c936:	701e      	strb	r6, [r3, #0]
 800c938:	6962      	ldr	r2, [r4, #20]
 800c93a:	1c43      	adds	r3, r0, #1
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d004      	beq.n	800c94a <__swbuf_r+0x6e>
 800c940:	89a3      	ldrh	r3, [r4, #12]
 800c942:	07db      	lsls	r3, r3, #31
 800c944:	d5e1      	bpl.n	800c90a <__swbuf_r+0x2e>
 800c946:	2e0a      	cmp	r6, #10
 800c948:	d1df      	bne.n	800c90a <__swbuf_r+0x2e>
 800c94a:	4621      	mov	r1, r4
 800c94c:	4628      	mov	r0, r5
 800c94e:	f7ff fda9 	bl	800c4a4 <_fflush_r>
 800c952:	2800      	cmp	r0, #0
 800c954:	d0d9      	beq.n	800c90a <__swbuf_r+0x2e>
 800c956:	e7d6      	b.n	800c906 <__swbuf_r+0x2a>

0800c958 <__swsetup_r>:
 800c958:	b538      	push	{r3, r4, r5, lr}
 800c95a:	4b29      	ldr	r3, [pc, #164]	@ (800ca00 <__swsetup_r+0xa8>)
 800c95c:	4605      	mov	r5, r0
 800c95e:	6818      	ldr	r0, [r3, #0]
 800c960:	460c      	mov	r4, r1
 800c962:	b118      	cbz	r0, 800c96c <__swsetup_r+0x14>
 800c964:	6a03      	ldr	r3, [r0, #32]
 800c966:	b90b      	cbnz	r3, 800c96c <__swsetup_r+0x14>
 800c968:	f7fd ffa6 	bl	800a8b8 <__sinit>
 800c96c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c970:	0719      	lsls	r1, r3, #28
 800c972:	d422      	bmi.n	800c9ba <__swsetup_r+0x62>
 800c974:	06da      	lsls	r2, r3, #27
 800c976:	d407      	bmi.n	800c988 <__swsetup_r+0x30>
 800c978:	2209      	movs	r2, #9
 800c97a:	602a      	str	r2, [r5, #0]
 800c97c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c980:	81a3      	strh	r3, [r4, #12]
 800c982:	f04f 30ff 	mov.w	r0, #4294967295
 800c986:	e033      	b.n	800c9f0 <__swsetup_r+0x98>
 800c988:	0758      	lsls	r0, r3, #29
 800c98a:	d512      	bpl.n	800c9b2 <__swsetup_r+0x5a>
 800c98c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c98e:	b141      	cbz	r1, 800c9a2 <__swsetup_r+0x4a>
 800c990:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c994:	4299      	cmp	r1, r3
 800c996:	d002      	beq.n	800c99e <__swsetup_r+0x46>
 800c998:	4628      	mov	r0, r5
 800c99a:	f7fe f921 	bl	800abe0 <_free_r>
 800c99e:	2300      	movs	r3, #0
 800c9a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c9a2:	89a3      	ldrh	r3, [r4, #12]
 800c9a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c9a8:	81a3      	strh	r3, [r4, #12]
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	6063      	str	r3, [r4, #4]
 800c9ae:	6923      	ldr	r3, [r4, #16]
 800c9b0:	6023      	str	r3, [r4, #0]
 800c9b2:	89a3      	ldrh	r3, [r4, #12]
 800c9b4:	f043 0308 	orr.w	r3, r3, #8
 800c9b8:	81a3      	strh	r3, [r4, #12]
 800c9ba:	6923      	ldr	r3, [r4, #16]
 800c9bc:	b94b      	cbnz	r3, 800c9d2 <__swsetup_r+0x7a>
 800c9be:	89a3      	ldrh	r3, [r4, #12]
 800c9c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c9c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9c8:	d003      	beq.n	800c9d2 <__swsetup_r+0x7a>
 800c9ca:	4621      	mov	r1, r4
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	f000 f883 	bl	800cad8 <__smakebuf_r>
 800c9d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9d6:	f013 0201 	ands.w	r2, r3, #1
 800c9da:	d00a      	beq.n	800c9f2 <__swsetup_r+0x9a>
 800c9dc:	2200      	movs	r2, #0
 800c9de:	60a2      	str	r2, [r4, #8]
 800c9e0:	6962      	ldr	r2, [r4, #20]
 800c9e2:	4252      	negs	r2, r2
 800c9e4:	61a2      	str	r2, [r4, #24]
 800c9e6:	6922      	ldr	r2, [r4, #16]
 800c9e8:	b942      	cbnz	r2, 800c9fc <__swsetup_r+0xa4>
 800c9ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c9ee:	d1c5      	bne.n	800c97c <__swsetup_r+0x24>
 800c9f0:	bd38      	pop	{r3, r4, r5, pc}
 800c9f2:	0799      	lsls	r1, r3, #30
 800c9f4:	bf58      	it	pl
 800c9f6:	6962      	ldrpl	r2, [r4, #20]
 800c9f8:	60a2      	str	r2, [r4, #8]
 800c9fa:	e7f4      	b.n	800c9e6 <__swsetup_r+0x8e>
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	e7f7      	b.n	800c9f0 <__swsetup_r+0x98>
 800ca00:	200001d8 	.word	0x200001d8

0800ca04 <_raise_r>:
 800ca04:	291f      	cmp	r1, #31
 800ca06:	b538      	push	{r3, r4, r5, lr}
 800ca08:	4605      	mov	r5, r0
 800ca0a:	460c      	mov	r4, r1
 800ca0c:	d904      	bls.n	800ca18 <_raise_r+0x14>
 800ca0e:	2316      	movs	r3, #22
 800ca10:	6003      	str	r3, [r0, #0]
 800ca12:	f04f 30ff 	mov.w	r0, #4294967295
 800ca16:	bd38      	pop	{r3, r4, r5, pc}
 800ca18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ca1a:	b112      	cbz	r2, 800ca22 <_raise_r+0x1e>
 800ca1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca20:	b94b      	cbnz	r3, 800ca36 <_raise_r+0x32>
 800ca22:	4628      	mov	r0, r5
 800ca24:	f000 f830 	bl	800ca88 <_getpid_r>
 800ca28:	4622      	mov	r2, r4
 800ca2a:	4601      	mov	r1, r0
 800ca2c:	4628      	mov	r0, r5
 800ca2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca32:	f000 b817 	b.w	800ca64 <_kill_r>
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d00a      	beq.n	800ca50 <_raise_r+0x4c>
 800ca3a:	1c59      	adds	r1, r3, #1
 800ca3c:	d103      	bne.n	800ca46 <_raise_r+0x42>
 800ca3e:	2316      	movs	r3, #22
 800ca40:	6003      	str	r3, [r0, #0]
 800ca42:	2001      	movs	r0, #1
 800ca44:	e7e7      	b.n	800ca16 <_raise_r+0x12>
 800ca46:	2100      	movs	r1, #0
 800ca48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	4798      	blx	r3
 800ca50:	2000      	movs	r0, #0
 800ca52:	e7e0      	b.n	800ca16 <_raise_r+0x12>

0800ca54 <raise>:
 800ca54:	4b02      	ldr	r3, [pc, #8]	@ (800ca60 <raise+0xc>)
 800ca56:	4601      	mov	r1, r0
 800ca58:	6818      	ldr	r0, [r3, #0]
 800ca5a:	f7ff bfd3 	b.w	800ca04 <_raise_r>
 800ca5e:	bf00      	nop
 800ca60:	200001d8 	.word	0x200001d8

0800ca64 <_kill_r>:
 800ca64:	b538      	push	{r3, r4, r5, lr}
 800ca66:	4d07      	ldr	r5, [pc, #28]	@ (800ca84 <_kill_r+0x20>)
 800ca68:	2300      	movs	r3, #0
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	4608      	mov	r0, r1
 800ca6e:	4611      	mov	r1, r2
 800ca70:	602b      	str	r3, [r5, #0]
 800ca72:	f7f5 fcb1 	bl	80023d8 <_kill>
 800ca76:	1c43      	adds	r3, r0, #1
 800ca78:	d102      	bne.n	800ca80 <_kill_r+0x1c>
 800ca7a:	682b      	ldr	r3, [r5, #0]
 800ca7c:	b103      	cbz	r3, 800ca80 <_kill_r+0x1c>
 800ca7e:	6023      	str	r3, [r4, #0]
 800ca80:	bd38      	pop	{r3, r4, r5, pc}
 800ca82:	bf00      	nop
 800ca84:	20005384 	.word	0x20005384

0800ca88 <_getpid_r>:
 800ca88:	f7f5 bc9e 	b.w	80023c8 <_getpid>

0800ca8c <__swhatbuf_r>:
 800ca8c:	b570      	push	{r4, r5, r6, lr}
 800ca8e:	460c      	mov	r4, r1
 800ca90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca94:	2900      	cmp	r1, #0
 800ca96:	b096      	sub	sp, #88	@ 0x58
 800ca98:	4615      	mov	r5, r2
 800ca9a:	461e      	mov	r6, r3
 800ca9c:	da0d      	bge.n	800caba <__swhatbuf_r+0x2e>
 800ca9e:	89a3      	ldrh	r3, [r4, #12]
 800caa0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800caa4:	f04f 0100 	mov.w	r1, #0
 800caa8:	bf14      	ite	ne
 800caaa:	2340      	movne	r3, #64	@ 0x40
 800caac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cab0:	2000      	movs	r0, #0
 800cab2:	6031      	str	r1, [r6, #0]
 800cab4:	602b      	str	r3, [r5, #0]
 800cab6:	b016      	add	sp, #88	@ 0x58
 800cab8:	bd70      	pop	{r4, r5, r6, pc}
 800caba:	466a      	mov	r2, sp
 800cabc:	f000 f848 	bl	800cb50 <_fstat_r>
 800cac0:	2800      	cmp	r0, #0
 800cac2:	dbec      	blt.n	800ca9e <__swhatbuf_r+0x12>
 800cac4:	9901      	ldr	r1, [sp, #4]
 800cac6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800caca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cace:	4259      	negs	r1, r3
 800cad0:	4159      	adcs	r1, r3
 800cad2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cad6:	e7eb      	b.n	800cab0 <__swhatbuf_r+0x24>

0800cad8 <__smakebuf_r>:
 800cad8:	898b      	ldrh	r3, [r1, #12]
 800cada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cadc:	079d      	lsls	r5, r3, #30
 800cade:	4606      	mov	r6, r0
 800cae0:	460c      	mov	r4, r1
 800cae2:	d507      	bpl.n	800caf4 <__smakebuf_r+0x1c>
 800cae4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cae8:	6023      	str	r3, [r4, #0]
 800caea:	6123      	str	r3, [r4, #16]
 800caec:	2301      	movs	r3, #1
 800caee:	6163      	str	r3, [r4, #20]
 800caf0:	b003      	add	sp, #12
 800caf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caf4:	ab01      	add	r3, sp, #4
 800caf6:	466a      	mov	r2, sp
 800caf8:	f7ff ffc8 	bl	800ca8c <__swhatbuf_r>
 800cafc:	9f00      	ldr	r7, [sp, #0]
 800cafe:	4605      	mov	r5, r0
 800cb00:	4639      	mov	r1, r7
 800cb02:	4630      	mov	r0, r6
 800cb04:	f7fe fc12 	bl	800b32c <_malloc_r>
 800cb08:	b948      	cbnz	r0, 800cb1e <__smakebuf_r+0x46>
 800cb0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb0e:	059a      	lsls	r2, r3, #22
 800cb10:	d4ee      	bmi.n	800caf0 <__smakebuf_r+0x18>
 800cb12:	f023 0303 	bic.w	r3, r3, #3
 800cb16:	f043 0302 	orr.w	r3, r3, #2
 800cb1a:	81a3      	strh	r3, [r4, #12]
 800cb1c:	e7e2      	b.n	800cae4 <__smakebuf_r+0xc>
 800cb1e:	89a3      	ldrh	r3, [r4, #12]
 800cb20:	6020      	str	r0, [r4, #0]
 800cb22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb26:	81a3      	strh	r3, [r4, #12]
 800cb28:	9b01      	ldr	r3, [sp, #4]
 800cb2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cb2e:	b15b      	cbz	r3, 800cb48 <__smakebuf_r+0x70>
 800cb30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb34:	4630      	mov	r0, r6
 800cb36:	f000 f81d 	bl	800cb74 <_isatty_r>
 800cb3a:	b128      	cbz	r0, 800cb48 <__smakebuf_r+0x70>
 800cb3c:	89a3      	ldrh	r3, [r4, #12]
 800cb3e:	f023 0303 	bic.w	r3, r3, #3
 800cb42:	f043 0301 	orr.w	r3, r3, #1
 800cb46:	81a3      	strh	r3, [r4, #12]
 800cb48:	89a3      	ldrh	r3, [r4, #12]
 800cb4a:	431d      	orrs	r5, r3
 800cb4c:	81a5      	strh	r5, [r4, #12]
 800cb4e:	e7cf      	b.n	800caf0 <__smakebuf_r+0x18>

0800cb50 <_fstat_r>:
 800cb50:	b538      	push	{r3, r4, r5, lr}
 800cb52:	4d07      	ldr	r5, [pc, #28]	@ (800cb70 <_fstat_r+0x20>)
 800cb54:	2300      	movs	r3, #0
 800cb56:	4604      	mov	r4, r0
 800cb58:	4608      	mov	r0, r1
 800cb5a:	4611      	mov	r1, r2
 800cb5c:	602b      	str	r3, [r5, #0]
 800cb5e:	f7f5 fc9b 	bl	8002498 <_fstat>
 800cb62:	1c43      	adds	r3, r0, #1
 800cb64:	d102      	bne.n	800cb6c <_fstat_r+0x1c>
 800cb66:	682b      	ldr	r3, [r5, #0]
 800cb68:	b103      	cbz	r3, 800cb6c <_fstat_r+0x1c>
 800cb6a:	6023      	str	r3, [r4, #0]
 800cb6c:	bd38      	pop	{r3, r4, r5, pc}
 800cb6e:	bf00      	nop
 800cb70:	20005384 	.word	0x20005384

0800cb74 <_isatty_r>:
 800cb74:	b538      	push	{r3, r4, r5, lr}
 800cb76:	4d06      	ldr	r5, [pc, #24]	@ (800cb90 <_isatty_r+0x1c>)
 800cb78:	2300      	movs	r3, #0
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	4608      	mov	r0, r1
 800cb7e:	602b      	str	r3, [r5, #0]
 800cb80:	f7f5 fc9a 	bl	80024b8 <_isatty>
 800cb84:	1c43      	adds	r3, r0, #1
 800cb86:	d102      	bne.n	800cb8e <_isatty_r+0x1a>
 800cb88:	682b      	ldr	r3, [r5, #0]
 800cb8a:	b103      	cbz	r3, 800cb8e <_isatty_r+0x1a>
 800cb8c:	6023      	str	r3, [r4, #0]
 800cb8e:	bd38      	pop	{r3, r4, r5, pc}
 800cb90:	20005384 	.word	0x20005384

0800cb94 <_init>:
 800cb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb96:	bf00      	nop
 800cb98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb9a:	bc08      	pop	{r3}
 800cb9c:	469e      	mov	lr, r3
 800cb9e:	4770      	bx	lr

0800cba0 <_fini>:
 800cba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cba2:	bf00      	nop
 800cba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cba6:	bc08      	pop	{r3}
 800cba8:	469e      	mov	lr, r3
 800cbaa:	4770      	bx	lr
